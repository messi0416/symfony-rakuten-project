<?php

namespace MiscBundle\Entity\Repository;
use Doctrine\ORM\Query\ResultSetMapping;
use forestlib\Doctrine\ORM\LimitableNativeQuery;

/**
 * TbNeMallOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbNeMallOrderRepository extends BaseRepository
{
  /**
   * @param array $conditions
   * @param array $orders
   * @param int $page
   * @param int $limit
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
     */
  public function findListByConvertedDate($conditions = [], $orders = [], $page = 1, $limit = 100)
  {
    $em = $this->getEntityManager();

    // 処理済み or 未処理のみ取得する。（30分以内の「処理待ち」は取得しない）

    $sqlSelect = <<<EOD
      SELECT
        *
EOD;

    $sqlBody = <<<EOD
      FROM (
        SELECT
            o.shop_code
          , s.mall_name_short1
          , o.converted
          , MIN(o.downloaded) AS downloaded
          , MIN(o.converted_by) AS converted_by /* ※MINはどれか一つ、程度の意味しかない */
          , COUNT(*)          AS num
          , MIN(o.受注日)     AS order_date_min
          , MAX(o.受注日)     AS order_date_max
          , SUM(
              CASE
                WHEN o.converted IS NULL AND o.伝票番号 IS NULL THEN 1
                ELSE 0
              END
            ) AS no_sales_detail_num
          , SUM(
              CASE
                WHEN o.converted IS NULL AND o.伝票番号 IS NOT NULL THEN 1
                ELSE 0
              END
            ) AS process_waiting_num
          , GROUP_CONCAT(
              DISTINCT CASE
                WHEN o.converted IS NULL AND o.伝票番号 IS NULL THEN o.店舗伝票番号
                ELSE NULL
              END
              ORDER BY o.店舗伝票番号
              SEPARATOR ','
            ) AS no_sales_voucher_number
        FROM tb_ne_mall_order o
        INNER JOIN tb_shopping_mall s ON o.shop_code = s.ne_mall_id
        GROUP BY o.shop_code
               , s.mall_name_short1
               , o.converted
      ) T
      ORDER BY COALESCE(converted, '9999-12-31') DESC
             , order_date_max DESC
             , order_date_min DESC
EOD;
    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('shop_code', 'shop_code', 'string');
    $rsm->addScalarResult('mall_name_short1', 'shop_name', 'string');
    $rsm->addScalarResult('converted', 'converted', 'datetime');
    $rsm->addScalarResult('downloaded', 'downloaded', 'datetime');
    $rsm->addScalarResult('converted_by', 'converted_by', 'string');
    $rsm->addScalarResult('num', 'num', 'integer');
    $rsm->addScalarResult('order_date_min', 'order_date_min', 'datetime');
    $rsm->addScalarResult('order_date_max', 'order_date_max', 'datetime');
    $rsm->addScalarResult('no_sales_detail_num', 'no_sales_detail_num', 'integer');
    $rsm->addScalarResult('process_waiting_num', 'process_waiting_num', 'integer');
    $rsm->addScalarResult('no_sales_voucher_number', 'no_sales_voucher_number', 'string');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }
}
