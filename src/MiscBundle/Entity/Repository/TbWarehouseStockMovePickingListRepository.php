<?php

namespace MiscBundle\Entity\Repository;
use MiscBundle\Entity\EntityInterface\SymfonyUserInterface;
use MiscBundle\Entity\TbLocation;
use MiscBundle\Entity\TbWarehouse;
use MiscBundle\Entity\TbWarehouseStockMovePickingList;

/**
 * TbWarehouseStockMovePickingListRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbWarehouseStockMovePickingListRepository extends BaseRepository
{
  // ピッキングステータス
  // 1: OK, 2: △, 3: PASS
  const PICKING_STATUS_NONE      = TbDeliveryPickingListRepository::PICKING_STATUS_NONE;
  const PICKING_STATUS_OK        = TbDeliveryPickingListRepository::PICKING_STATUS_OK;
  const PICKING_STATUS_INCORRECT = TbDeliveryPickingListRepository::PICKING_STATUS_INCORRECT;
  const PICKING_STATUS_PASS      = TbDeliveryPickingListRepository::PICKING_STATUS_PASS;

  // ピッキングステータス 文言
  public static $PICKING_STATUS_DISPLAYS = [
      self::PICKING_STATUS_NONE => ''
    , self::PICKING_STATUS_OK => 'OK'
    , self::PICKING_STATUS_INCORRECT => '不足'
    , self::PICKING_STATUS_PASS => 'パス'
  ];

  // 見出しステータス
  const INDEX_STATUS_NONE      = '未処理';
  const INDEX_STATUS_ONGOING   = '未完了';
  // const INDEX_STATUS_CHECK     = '要チェック';
  const INDEX_STATUS_UNLOCATED = 'ロケ未作成';
  const INDEX_STATUS_DONE      = '完了';

  const TYPE_WAREHOUSE = 'warehouse';
  const TYPE_FBA_SEND = 'fba';

  /**
   * ピッキングリスト 見出し一覧取得
   * ステータスでの絞込は、集約後のステータス。処理途中のリストに留意する。
   * @param $warehouseId
   * @param array $conditions
   * @param int $limit
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function findListIndex($warehouseId, $conditions, $limit = 100)
  {
    $dbMain = $this->getConnection('main');

    $wheres = [];
    $params = [];

    if (isset($conditions['date']) && $conditions['date']) {
      $wheres[] = '( T.`date` = :date )';
      $params[':date'] = $conditions['date']->format('Y-m-d');
    }
    if (isset($conditions['status'])) {
      if ($conditions['status'] == 'incomplete') {
        $wheres[] = '( T.`status` <> :indexStatusDone )';
        $params[':indexStatusDone'] = self::INDEX_STATUS_DONE;
      }
    }
    if (isset($conditions['number'])) {
      $wheres[] = '( T.`number` = :number )';
      $params[':number'] = intval($conditions['number']);
    }

    $addWheres = '';
    if ($wheres) {
      $addWheres = ' AND ' . implode(' AND ', $wheres);
    }

    $sql = <<<EOD
      SELECT 
          `date`
        , number
        , syohin_num
        , item_num
        , date_short
        , status
        , account_name
      FROM (
        SELECT
            `date`
          , number
          , COUNT(DISTINCT ne_syohin_syohin_code) AS syohin_num
          , SUM(move_num) AS item_num
          , DATE_FORMAT(`date`, '%m/%d') AS date_short
          , CASE
              WHEN MAX(status) = :pickingStatusNone THEN :indexStatusNone
              WHEN MAX(status) > :pickingStatusNone AND MIN(status) < :pickingStatusOk THEN :indexStatusOngoing
              WHEN MIN(status) > :pickingStatusNone THEN (
                CASE
                  WHEN SUM(CASE 
                            WHEN status <> :pickingStatusNone 
                             AND picked_num > 0  
                             AND LENGTH(new_location_code) = 0 
                            THEN 1 ELSE 0 END
                      ) > 1 
                  THEN :indexStatusUnlocated
                  ELSE :indexStatusDone
                END
              )
              ELSE ''
            END AS status
          , MAX(account_name) AS account_name
        FROM tb_warehouse_stock_move_picking_list
        WHERE warehouse_id = :warehouseId
        GROUP BY `date`, `number`
      ) T
      WHERE 1 
      {$addWheres}
      ORDER BY `date` DESC
             , number DESC
      LIMIT :limit
EOD;
    $stmt = $dbMain->prepare($sql);
    if ($params) {
      foreach($params as $k => $v) {
        $stmt->bindValue($k, $v, \PDO::PARAM_STR);
      }
    }
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->bindValue(':pickingStatusNone', self::PICKING_STATUS_NONE, \PDO::PARAM_INT);
    $stmt->bindValue(':pickingStatusOk', self::PICKING_STATUS_OK, \PDO::PARAM_INT);
    $stmt->bindValue(':indexStatusNone', self::INDEX_STATUS_NONE, \PDO::PARAM_STR);
    $stmt->bindValue(':indexStatusOngoing', self::INDEX_STATUS_ONGOING, \PDO::PARAM_STR);
    $stmt->bindValue(':indexStatusUnlocated', self::INDEX_STATUS_UNLOCATED, \PDO::PARAM_STR);
    $stmt->bindValue(':indexStatusDone', self::INDEX_STATUS_DONE, \PDO::PARAM_STR);
    $stmt->bindValue(':limit', intval($limit), \PDO::PARAM_INT);
    $stmt->execute();

    $result = [];
    while($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
      $result[] = $row;
    }

    return $result;
  }

  /**
   * 作成済みピッキングリスト 1セット取得
   * @param int $warehouseId
   * @param string $date
   * @param integer $number
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getPickingList($warehouseId, $date, $number)
  {
    $sql = <<<EOD
      SELECT
        l.*
      FROM tb_warehouse_stock_move_picking_list l
      WHERE l.warehouse_id = :warehouseId
        AND l.`date` = :date
        AND l.number = :number
      ORDER BY l.picking_order ASC
             , l.current_location ASC
EOD;
    $stmt = $this->getConnection('main')->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * ピッキングリスト削除
   * @param int $warehouseId
   * @param string $date
   * @param int $number
   * @throws \Doctrine\DBAL\DBALException
   */
  public function removePickingList($warehouseId, $date, $number)
  {
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      DELETE l
      FROM tb_warehouse_stock_move_picking_list l
      WHERE l.warehouse_id = :warehouseId
        AND l.`date` = :date
        AND l.number = :number
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->execute();

    // 紐付いている移動伝票があればクリア
    $sql = <<<EOD
      UPDATE 
      tb_stock_transport t 
      SET t.picking_list_date = null
        , t.picking_list_number = 0
      WHERE t.departure_warehouse_id = :warehouseId
        AND t.picking_list_date = :date 
        AND t.picking_list_number = :number
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->execute();
  }

  /**
   * 全削除 （ただし、安全のため確定済みのものは残す。）
   * @throws \Doctrine\DBAL\DBALException
   */
  public function clearAll()
  {
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      DELETE pl
      FROM tb_warehouse_stock_move_picking_list pl
      WHERE pl.status <> :statusOk
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':statusOk', self::PICKING_STATUS_OK, \PDO::PARAM_INT);
    $stmt->execute();
  }


  /**
   * ピッキングリスト最終更新日時・最終更新者（作業者）取得
   * @param int $warehouseId
   * @param string $date
   * @param int $number
   * @return \DateTimeImmutable|null
   * @throws \Doctrine\DBAL\DBALException
   * @throws \Exception
   */
  public function getLastUpdatedAndAccount($warehouseId, $date, $number)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
          MAX(l.updated) AS last_updated
        , MAX(l.account_name) AS account_name
      FROM tb_warehouse_stock_move_picking_list l
      WHERE l.warehouse_id = :warehouseId
        AND l.date   = :date
        AND l.number = :number
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->execute();

    $result = $stmt->fetch(\PDO::FETCH_ASSOC);
    if ($result) {
      $result['last_updated'] = new \DateTimeImmutable($result['last_updated']);
    }

    return $result;
  }


  /**
   * ピッキングリスト ロケーション更新
   * current_location を設定し、並び順を決める。
   *
   * @param string $date
   * @param integer $number
   * @param TbWarehouse $currentWarehouse
   * @param SymfonyUserInterface $account
   * @throws \Doctrine\DBAL\DBALException
   */
  public function refreshLocation($date, $number, $currentWarehouse, $account)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      UPDATE
      tb_warehouse_stock_move_picking_list picking
      INNER JOIN (
        SELECT
            l.warehouse_id
          , picking.ne_syohin_syohin_code
          , MIN(pl.position)  AS min_position
        FROM tb_warehouse_stock_move_picking_list picking
        LEFT JOIN (
          tb_product_location pl
          INNER JOIN tb_location l ON pl.location_id = l.id
        ) ON picking.ne_syohin_syohin_code = pl.ne_syohin_syohin_code
         AND l.warehouse_id = :warehouseId
        GROUP BY picking.ne_syohin_syohin_code
      ) T ON picking.warehouse_id = T.warehouse_id
         AND picking.ne_syohin_syohin_code = T.ne_syohin_syohin_code
         AND picking.date   = :date
         AND picking.number = :number
      LEFT JOIN (
        tb_product_location pl
        INNER JOIN tb_location l ON pl.location_id = l.id
      ) ON T.ne_syohin_syohin_code = pl.ne_syohin_syohin_code
       AND l.warehouse_id = :warehouseId
       AND T.min_position = pl.position
      SET picking.current_location = COALESCE(l.location_code, '')
        , account_id = :accountId
        , account_name = :accountName
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->bindValue(':warehouseId', $currentWarehouse->getId(), \PDO::PARAM_INT);
    $stmt->bindValue(':accountId', $account->getId(), \PDO::PARAM_INT);
    $stmt->bindValue(':accountName', $account->getUsername(), \PDO::PARAM_STR);
    $stmt->execute();

    // 並び順更新
    $dbMain->exec("SET @i := 0");

    $sql = <<<EOD
      UPDATE tb_warehouse_stock_move_picking_list
      SET picking_order = CASE
                            WHEN current_location = '' THEN 999999
                            ELSE (@i := @i + 1)
                          END
      WHERE `date`   = :date
        AND number = :number
      ORDER BY current_location
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->execute();
  }

//  /**
//   * ピッキング済み在庫数 一覧取得
//   * @param string $date
//   * @param int $number
//   * @return array
//   * @throws \Doctrine\DBAL\DBALException
//   */
//  public function getPickedStocksTotal($date, $number)
//  {
//    $dbMain = $this->getConnection('main');
//    $sql = <<<EOD
//      SELECT
//          l.ne_syohin_syohin_code
//        , SUM(l.move_num) AS move_num
//      FROM tb_warehouse_stock_move_picking_list l
//      WHERE l.date = :date
//        AND l.number = :number
//        AND l.`status` = :pickingStatusOk
//      GROUP BY l.ne_syohin_syohin_code
//EOD;
//    $stmt = $dbMain->prepare($sql);
//    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
//    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
//    $stmt->bindValue(':pickingStatusOk', TbSetProductPickingListRepository::PICKING_STATUS_OK, \PDO::PARAM_INT);
//    $stmt->execute();
//
//    $result = [];
//    foreach($stmt as $row) {
//      $result[$row['ne_syohin_syohin_code']] = $row['move_num'];
//    }
//
//    return $result;
//  }

  /**
   * ピッキングリスト 全取得
   * @param \DateTime $date
   * @return array
   */
  public function getAllOfADay($date = null)
  {
    if (!$date) {
      $date = new \DateTime();
    }

    $qb = $this->createQueryBuilder('l');
    $qb->andWhere('l.date = :date')->setParameter(':date', $date->format('Y-m-d'), \PDO::PARAM_STR);
    $qb->addOrderBy('l.warehouse_id', 'ASC');
    $qb->addOrderBy('l.number', 'ASC');

    /** @var TbWarehouseStockMovePickingList[] $list */
    $list = $qb->getQuery()->getResult();
    $result = [];
    foreach($list as $picking) {
      if (!isset($list[$picking->getWarehouseId()])) {
        $list[$picking->getWarehouseId()] = [];
      }

      $result[$picking->getWarehouseId()][] = $picking;
    }

    return $result;
  }

  /**
   * ピッキングリスト　倉庫別件数取得。
   *
   * 引数に条件を受け取り、倉庫別のピッキングリスト件数を返却する。
   * 戻り値は以下の配列。
   * [
   *   ['warehouse_id' => 12, 'warehouse_name' => '古市', 'num' => 12]
   *   , ['warehouse_id' => 15, 'warehouse_name' => '百毫寺', 'count' => 4]
   *   , ...
   * ]
   */
  public function getRemainNumberEachWarehouse($conditions) {

    $dbMain = $this->getConnection('main');
    $wheres = [];
    $params = [];
    if (isset($conditions['warehouse_id'])) {
      $wheres[] = '( v.`warehouse_id` = :warehouseId )';
      $params[':warehouseId'] = $conditions['warehouse_id'];
    }
    if (isset($conditions['status'])) {
      $wheres[] = '( l.`status` = :status )';
      $params[':status'] = $conditions['status'];
    }
    $addWheres = '';
    if ($wheres) {
      $addWheres = ' AND ' . implode(' AND ', $wheres);
    }

    $sql = <<<EOD
      SELECT
           l.warehouse_id
         , w.name AS warehouse_name
         , COUNT(*) AS num
      FROM tb_warehouse_stock_move_picking_list l
      INNER JOIN tb_warehouse w ON l.warehouse_id = w.id
      WHERE 1=1
        {$addWheres}
      GROUP BY l.warehouse_id
      ORDER BY l.warehouse_id
EOD;
      $stmt = $dbMain->prepare($sql);
      if ($params) {
        foreach($params as $k => $v) {
          $stmt->bindValue($k, $v, \PDO::PARAM_STR);
        }
      }
      $stmt->execute();
      return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * ロケーション作成対象全倉庫対象取得 （再集計チェック用）
   *
   * @param string $date
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function findUnlocatedPickedCount($date)
  {
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      SELECT
           l.warehouse_id
         , w.name AS warehouse_name
         , COUNT(*) AS num
      FROM tb_warehouse_stock_move_picking_list l
      INNER JOIN tb_warehouse w ON l.warehouse_id = w.id
      WHERE l.`date` = :date
        AND (l.status <> :pickingStatusNone AND l.picked_num > 0)
        AND l.new_location_code = ''
      GROUP BY l.warehouse_id
      ORDER BY l.warehouse_id
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':pickingStatusNone', TbWarehouseStockMovePickingListRepository::PICKING_STATUS_NONE, \PDO::PARAM_INT);
    $stmt->execute();

    $result = [];
    while($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
      $result[] = $row;
    }

    return $result;
  }


  /**
   * ロケーション作成対象一括取得
   * @param int $warehouseId
   * @param string $date
   * @param int $number
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function findUnlocatedPickedList($warehouseId, $date, $number)
  {
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      SELECT
        *
      FROM tb_warehouse_stock_move_picking_list l
      WHERE l.warehouse_id = :warehouseId
        AND l.`date` = :date
        AND l.`number` = :number
        AND (l.status <> :pickingStatusNone AND l.picked_num > 0)
        AND l.new_location_code = ''
      ORDER BY l.id
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->bindValue(':pickingStatusNone', TbWarehouseStockMovePickingListRepository::PICKING_STATUS_NONE, \PDO::PARAM_INT);
    $stmt->execute();

    $result = [];
    while($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
      $result[] = $row;
    }

    return $result;
  }

  /**
   * ロケーション作成
   * @param TbLocation $newLocation
   * @param TbWarehouse $warehouse
   * @param string $date
   * @param int $number
   * @throws \Doctrine\DBAL\DBALException
   */
  public function createLocationWithUnlocatedPickedList($newLocation, $warehouse, $date, $number)
  {
    $dbMain = $this->getConnection('main');

    // 登録
    $sql = <<<EOD
        INSERT INTO tb_product_location (
            ne_syohin_syohin_code
          , location_id
          , stock
          , `position`
        )
        SELECT
            l.ne_syohin_syohin_code
          , :newLocationId
          , l.picked_num
          , COALESCE(T.new_position, 0) AS `position`
        FROM tb_warehouse_stock_move_picking_list l
        LEFT JOIN (
          SELECT
              ne_syohin_syohin_code
            , MAX(pl.position) + 1 AS new_position
          FROM tb_product_location pl
          GROUP BY pl.ne_syohin_syohin_code
        ) T ON l.ne_syohin_syohin_code = T.ne_syohin_syohin_code
        WHERE l.warehouse_id = :warehouseId
          AND l.date = :date
          AND l.number = :number
          AND (l.status <> :pickingStatusNone AND l.picked_num > 0)
          AND l.new_location_code = ''
        ORDER BY l.id

        ON DUPLICATE KEY UPDATE stock = stock + VALUES(stock)
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':newLocationId', $newLocation->getId(), \PDO::PARAM_INT);
    $stmt->bindValue(':warehouseId', $warehouse->getId(), \PDO::PARAM_INT);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->bindValue(':pickingStatusNone', TbWarehouseStockMovePickingListRepository::PICKING_STATUS_NONE, \PDO::PARAM_INT);
    $stmt->execute();

    $sql = <<<EOD
        UPDATE
        tb_warehouse_stock_move_picking_list l
        SET l.new_location_code = :newLocationCode
        WHERE l.warehouse_id = :warehouseId
          AND l.date = :date
          AND l.number = :number
          AND (l.status <> :pickingStatusNone AND l.picked_num > 0)
          AND l.new_location_code = ''
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':newLocationCode', $newLocation->getLocationCode(), \PDO::PARAM_STR);
    $stmt->bindValue(':warehouseId', $warehouse->getId(), \PDO::PARAM_INT);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->bindValue(':pickingStatusNone', TbWarehouseStockMovePickingListRepository::PICKING_STATUS_NONE, \PDO::PARAM_INT);
    $stmt->execute();
  }


  /**
   * ID配列で移動伝票充当
   * その他の引数はチェック用
   * @param TbWarehouse $warehouse
   * @param string $date
   * @param int $number
   * @param int[] $ids
   * @throws \Doctrine\DBAL\DBALException
   */
  public function applyTransportDetailWithUnlocatedPickedList($warehouse, $date, $number)
  {
    $dbMain = $this->getConnection('main');

    /** @var TbStockTransportRepository $repoTransport */
    $repoTransport = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbStockTransport');
    $transport = $repoTransport->getOneByPickingListDateAndNumber($warehouse, $date, $number);
    $this->getLogger()->dump($transport);
    if (!$transport) {
      throw new \RuntimeException('移動伝票が取得できませんでした。');
    }

    if ($transport->getStatus() != TbStockTransportRepository::STATUS_NONE) {
      throw new \RuntimeException('移動伝票は未処理ではありません。');
    }

    // 充当
    $sql = <<<EOD
      UPDATE
      tb_stock_transport_detail d
      INNER JOIN tb_stock_transport t ON d.transport_id = t.id
      INNER JOIN tb_warehouse_stock_move_picking_list pl ON t.departure_warehouse_id = pl.warehouse_id
                                                        AND t.picking_list_date = pl.date
                                                        AND t.picking_list_number = pl.number
                                                        AND d.ne_syohin_syohin_code = pl.ne_syohin_syohin_code
      SET d.picked = pl.picked_num
      WHERE pl.warehouse_id = :warehouseId
        AND pl.date = :date
        AND pl.number = :number
        AND (pl.status <> :pickingStatusNone AND pl.picked_num > 0)
        AND pl.new_location_code = ''
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouse->getId(), \PDO::PARAM_INT);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->bindValue(':pickingStatusNone', TbWarehouseStockMovePickingListRepository::PICKING_STATUS_NONE, \PDO::PARAM_INT);
    $stmt->execute();

    $sql = <<<EOD
        UPDATE
        tb_warehouse_stock_move_picking_list l
        SET l.new_location_code = :newLocationCode
        WHERE l.warehouse_id = :warehouseId
          AND l.date = :date
          AND l.number = :number
          AND (l.status <> :pickingStatusNone AND l.picked_num > 0)
          AND l.new_location_code = ''
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':newLocationCode', 'fba', \PDO::PARAM_STR);
    $stmt->bindValue(':warehouseId', $warehouse->getId(), \PDO::PARAM_INT);
    $stmt->bindValue(':date', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->bindValue(':pickingStatusNone', TbWarehouseStockMovePickingListRepository::PICKING_STATUS_NONE, \PDO::PARAM_INT);
    $stmt->execute();
  }


}
