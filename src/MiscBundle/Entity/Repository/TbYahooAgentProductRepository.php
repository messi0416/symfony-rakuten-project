<?php

namespace MiscBundle\Entity\Repository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use forestlib\Doctrine\ORM\LimitableNativeQuery;
use MiscBundle\Util\DbCommonUtil;

/**
 * TbYahooAgentProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbYahooAgentProductRepository extends BaseRepository
{
  /**
   * 一覧取得
   * 複数プライマリキーのテーブルではpagination取得時にエラーとなるため（既知の不具合）ため、NativeQueryを利用。
   * @param array $conditions
   * @param array $orders
   * @param null $limit
   * @param int $page
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  public function searchProductList($conditions = [], $orders = [], $limit = 20, $page = 1)
  {
    /** @var EntityManager $em */
    $em = $this->getEntityManager();
    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    if (empty($orders)) {
      $orders = ['product_code' => 'ASC'];
    }

    if (!isset($conditions['shop_code'])) {
      throw new \RuntimeException('店舗コードが取得できません。');
    }

    $params = [
      ':shopCode' => $conditions['shop_code']
    ];

    $sqlSelect = <<<EOD
      SELECT
         ya.*
EOD;
    $sqlBody = <<<EOD
      FROM tb_yahoo_agent_product ya
      WHERE ya.shop_code = :shopCode
EOD;
    // 絞込条件
    if (isset($conditions['product_code']) && strlen($conditions['product_code'])) {
      $sqlBody .= " AND ya.product_code LIKE :productCode ";
      $params[':productCode'] = sprintf('%%%s%%', $commonUtil->escapeLikeString($conditions['product_code']));
    }

    if (isset($conditions['update_flg']) && strlen($conditions['update_flg'])) {
      $sqlBody .= " AND ya.update_flg = :updateFlg ";
      $params[':updateFlg'] = intval($conditions['update_flg']);
    }

    if (isset($conditions['registration_flg']) && strlen($conditions['registration_flg'])) {
      $sqlBody .= " AND ya.registration_flg = :registrationFlg ";
      $params[':registrationFlg'] = intval($conditions['registration_flg']);
    }

    $rsm =  new ResultSetMappingBuilder($em);
    $rsm->addRootEntityFromClassMetadata('MiscBundle:TbYahooAgentProduct', 'ya');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    $query->setOrders($orders);

    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }

}
