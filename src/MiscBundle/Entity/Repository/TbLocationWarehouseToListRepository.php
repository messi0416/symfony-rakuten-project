<?php

namespace MiscBundle\Entity\Repository;
use MiscBundle\Util\DbCommonUtil;
use MiscBundle\Util\MultiInsertUtil;

/**
 * TbLocationWarehouseToListRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbLocationWarehouseToListRepository extends BaseRepository
{
  // ピッキングステータス
  // 1: OK, 2: △, 3: PASS
  const PICKING_STATUS_NONE      = TbDeliveryPickingListRepository::PICKING_STATUS_NONE;
  const PICKING_STATUS_OK        = TbDeliveryPickingListRepository::PICKING_STATUS_OK;
  const PICKING_STATUS_INCORRECT = TbDeliveryPickingListRepository::PICKING_STATUS_INCORRECT;
  const PICKING_STATUS_PASS      = TbDeliveryPickingListRepository::PICKING_STATUS_PASS;

  // const STOCK_MONTHS = 3; // 在庫保持期間
  const STOCK_MONTHS = 2; // 在庫保持期間

  /**
   * 倉庫へ 一覧更新
   * @param bool $cleanUpFlag 1個残し無効フラグ
   * @throws \Doctrine\DBAL\DBALException
   */
  public function refreshWarehouseToList($cleanUpFlag = false)
  {
    $dbMain = $this->getConnection('main');

    $dbMain->query('TRUNCATE tb_location_warehouse_to_list');

    // 値下げシーズン 該当カラム
    $seasonColumn = sprintf('s%d', (new \DateTime())->format('n'));

    $sql = <<<EOD
      INSERT INTO tb_location_warehouse_to_list (
          ne_syohin_syohin_code
        , daihyo_syohin_code
        , colcode
        , rowcode
        , colname
        , rowname
        , sort_order
        , stock
        , allocation_num
        , free_stock
        , order_num
        , reserve_num
        , warehouse_total
        , warehouse_stock
        , move_num
        , pricedown_flg
        , sales_season
        , pict_directory
        , pict_filename
      )
      SELECT
          ne_syohin_syohin_code
        , daihyo_syohin_code
        , colcode
        , rowcode
        , colname
        , rowname
        , sort_order
        , stock
        , allocation_num
        , free_stock
        , order_num
        , reserve_num
        , warehouse_total
        , warehouse_stock
        , move_num
        , pricedown_flg
        , sales_season
        , pict_directory
        , pict_filename
      FROM (
        SELECT
            ne_syohin_syohin_code
          , daihyo_syohin_code
          , colcode
          , rowcode
          , colname
          , rowname
          , sort_order
          , stock
          , allocation_num
          , free_stock
          , order_num
          , reserve_num
          , warehouse_total
          , warehouse_stock
          , CASE
              WHEN free_stock <= 0 THEN 0
              WHEN move_num <= 0 THEN 0
              WHEN free_stock <= warehouse_stock THEN 0
              /* 値下げ許可、かつ値下げシーズン中は一つ残す */
              WHEN (
                  (
                    (NOT :cleanUpFlag) /* 1個残し無効フラグ なし → 1個残す */
                     OR
                    (:cleanUpFlag AND Nヶ月の受注数 > 0) /* 1個残し無効フラグありだが、Nヶ月以内に受注あり → 1個残す */
                  )
                AND free_stock - warehouse_stock - move_num <= 0
                AND pricedown_flg <> 0
                AND sales_season <> 0
              ) THEN free_stock - warehouse_stock - 1
              WHEN (free_stock - warehouse_stock - move_num < 0) THEN
                    CASE
                      WHEN free_stock - warehouse_stock < 0 THEN 0
                      ELSE free_stock - warehouse_stock
                    END
              ELSE move_num
            END AS move_num
          , pricedown_flg
          , sales_season
          , pict_directory
          , pict_filename
        FROM (
          SELECT
              pci.ne_syohin_syohin_code
            , pci.daihyo_syohin_code
            , pci.colcode
            , pci.rowcode
            , pci.colname
            , pci.rowname
            , pci.`並び順No`                                          AS sort_order
            , pci.`在庫数`                                            AS stock
            , pci.`引当数`                                             AS allocation_num
            , pci.`フリー在庫数`                                       AS free_stock
            , COALESCE(T.１ヶ月の受注数, 0)                            AS order_num
            , COALESCE(T.１ヶ月の受注数, 0) * :stockMonth              AS reserve_num
            , pci.`フリー在庫数` - (COALESCE(T.１ヶ月の受注数, 0) * :stockMonth) AS warehouse_total
            , COALESCE(T2.p_stock, 0)                                  AS warehouse_stock
            , pci.`フリー在庫数` - (COALESCE(T.１ヶ月の受注数, 0) * :stockMonth) - COALESCE(T2.p_stock, 0) AS move_num
            , cal.pricedown_flg
            , s.`{$seasonColumn}` AS sales_season
            , m.picfolderP1     AS pict_directory
            , m.picnameP1       AS pict_filename
            , COALESCE(T3.Nヶ月の受注数, 0) AS Nヶ月の受注数
          FROM tb_productchoiceitems pci
          INNER JOIN tb_mainproducts_cal cal ON pci.daihyo_syohin_code = cal.daihyo_syohin_code
          INNER JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
          INNER JOIN tb_product_season s ON pci.daihyo_syohin_code = s.daihyo_syohin_code
          LEFT JOIN (
            SELECT
               a.`商品コード（伝票）` AS syohin_code
             , SUM(a.`受注数`) AS １ヶ月の受注数
            FROM tb_sales_detail_analyze a
            WHERE a.`受注日` >= DATE_ADD(CURRENT_DATE, INTERVAL -30 DAY)
              AND a.`キャンセル区分` = '0'
              AND a.`明細行キャンセル` = '0'
            GROUP BY a.`商品コード（伝票）`
          ) T ON pci.ne_syohin_syohin_code = T.syohin_code
          LEFT JOIN (
            SELECT
                pl.ne_syohin_syohin_code
              , SUM(pl.stock) AS p_stock
            FROM tb_product_location pl
            INNER JOIN tb_location l ON pl.location_id = l.id
            WHERE l.location_code LIKE 'P%'
            GROUP BY pl.ne_syohin_syohin_code
          ) AS T2 ON pci.ne_syohin_syohin_code = T2.ne_syohin_syohin_code
          LEFT JOIN (
            SELECT
               a.`商品コード（伝票）` AS syohin_code
             , SUM(a.`受注数`) AS Nヶ月の受注数
            FROM tb_sales_detail_analyze a
            WHERE a.`受注日` >= DATE_ADD(CURRENT_DATE, INTERVAL (-30 * :stockMonth) DAY)
              AND a.`キャンセル区分` = '0'
              AND a.`明細行キャンセル` = '0'
            GROUP BY a.`商品コード（伝票）`
          ) T3 ON pci.ne_syohin_syohin_code = T3.syohin_code
          WHERE pci.在庫数 > 0
        ) AS T
      ) AS TT
      WHERE TT.move_num > 0
EOD;

    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':stockMonth', self::STOCK_MONTHS, \PDO::PARAM_INT);
    $stmt->bindValue(':cleanUpFlag', ($cleanUpFlag ? 1 : 0), \PDO::PARAM_INT);
    $stmt->execute();
  }


  /**
   * 最終更新日時取得
   * @return \DateTimeImmutable|null
   */
  public function getLastUpdated()
  {
    $qb = $this->createQueryBuilder('l');
    $qb->select('MAX(l.updated) AS last_updated');
    $result = $qb->getQuery()->getResult();

    return isset($result[0]['last_updated']) ? new \DateTimeImmutable($result[0]['last_updated']) : null;
  }


  /**
   * 倉庫へ 一覧取得
   * @param array $conditions
   * @param array $orders
   * @param int $limit
   * @param int $page
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  public function getWarehouseToList($conditions = [], $orders = [], $limit = 100, $page = 1)
  {
    $em = $this->getEntityManager();

    $qb = $this->createQueryBuilder('l');

    // 今のところ順序は決め打ち
    $orders = [
        'l.move_num'           => 'DESC'
      , 'l.warehouse_total'    => 'DESC'
      , 'l.daihyo_syohin_code' => 'ASC'
      , 'l.sort_order'         => 'ASC'
    ];
    foreach($orders as $sort => $order) {
      $qb->addOrderBy($sort, $order);
    }

    $dbMain = $this->getConnection('main');
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    if (isset($conditions['syohin_code']) && strlen($conditions['syohin_code'])) {

      $keyword = sprintf('%%%s%%', $commonUtil->escapeLikeString($conditions['syohin_code']));
      $qb->andWhere($qb->expr()->like('l.ne_syohin_syohin_code', $dbMain->quote($keyword)));
    }

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator = $this->getContainer()->get('knp_paginator');

    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
      $qb->getQuery() /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }


  /**
   * 倉庫へ ピッキングリスト一覧取得
   * @return array
   */
  public function getWarehouseToPickingList()
  {
    $sql = <<<EOD
      SELECT
        *
      FROM tb_location_warehouse_to_picking_list l
      ORDER BY l.location_code ASC
             , l.ne_syohin_syohin_code ASC
             , l.position ASC
EOD;
    $stmt = $this->getConnection('main')->query($sql);
    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }


  /**
   * 「倉庫へ」ピッキングリスト再作成
   */
  public function refreshWarehouseToPickingList()
  {
    $logger = $this->getContainer()->get('misc.util.batch_logger');
    $dbMain = $this->getConnection('main');

    $dbMain->query('TRUNCATE tb_location_warehouse_to_picking_list');

    // 「倉庫へ」に集計された全商品の非倉庫ロケーションを、優先順位順に取得する。
    // 優先順位は ロケーションコード降順
    $sql = <<<EOD
      SELECT
          t.ne_syohin_syohin_code
        , pl.location_id
        , l.location_code
        , pl.position
        , pl.stock
        , t.move_num
        , t.pict_directory
        , t.pict_filename
      FROM tb_location_warehouse_to_list t
      INNER JOIN tb_product_location pl ON t.ne_syohin_syohin_code = pl.ne_syohin_syohin_code
      INNER JOIN tb_location l ON pl.location_id = l.id
      WHERE pl.position >= 0
        AND pl.stock > 0
        AND l.location_code NOT LIKE 'P%'
      ORDER BY t.ne_syohin_syohin_code
             , l.location_code DESC
EOD;
    $stmt = $dbMain->query($sql);

    // 全データを商品別の配列にいれてしまう。（今のところ件数的には大丈夫）
    $products = [];
    foreach($stmt as $row) {
      $syohinCode = $row['ne_syohin_syohin_code'];
      if (!isset($products[$syohinCode])) {
        $products[$syohinCode] = [];
      }
      $products[$syohinCode][] = $row;
    }

    // 全商品について、データを作成
    $pickingData = [];
    foreach($products as $syohinCode => $locations) {

      // 優先順位(ロケーションコード降順)の高いロケーションから順に在庫移動数を設定する。
      $remainNum = $locations[0]['move_num'];
      foreach($locations as $picking) {
        if ($remainNum >= $picking['stock']) {
          $picking['move_num'] = $picking['stock'];
          $remainNum = $remainNum - $picking['stock'];
        } else {
          $picking['move_num'] = $remainNum;
          $remainNum = 0;
        }

        // 移動数 = 0 のロケーションは登録不要
        if ($picking['move_num'] > 0) {
          $pickingData[] = $picking;
        }
      }
    }

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    // 一括insert
    $insertBuilder = new MultiInsertUtil("tb_location_warehouse_to_picking_list", [
      'fields' => [
          'ne_syohin_syohin_code' => \PDO::PARAM_STR
        , 'location_id' => \PDO::PARAM_STR
        , 'location_code' => \PDO::PARAM_STR
        , 'position' => \PDO::PARAM_STR
        , 'stock' => \PDO::PARAM_STR
        , 'move_num' => \PDO::PARAM_STR
        , 'status' => \PDO::PARAM_INT
        , 'pict_directory' => \PDO::PARAM_STR
        , 'pict_filename' => \PDO::PARAM_STR
      ]
      , 'prefix' => "INSERT IGNORE INTO"
    ]);

    $commonUtil->multipleInsert($insertBuilder, $dbMain, $pickingData, function($item) {
      $item['status'] = 0;
      return $item;
    });

  }

}
