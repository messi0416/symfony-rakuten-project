<?php

namespace MiscBundle\Entity\Repository;
use MiscBundle\Entity\TbDiscountList;
use MiscBundle\Entity\TbDiscountSetting;
use MiscBundle\Util\BatchLogger;
use MiscBundle\Util\DbCommonUtil;
use MiscBundle\Util\MultiInsertUtil;

/**
 * TbDiscountListRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbDiscountListRepository extends BaseRepository
{
  /** デフォルト値：在庫消化日数見積もり */
  const DEFAULT_VALUE_ESTIMATED_SALES_DAYS = 999999.0000;
  /** デフォルト値：日付型無効値（nullの代わりに利用） */
  const DEFAULT_VALUE_DATE_TYPE_INVALID = '9999-12-31';

  public function refreshDiscountListCopy()
  {
    $dbMain = $this->getConnection('main');

    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    // 設定値取得
    /** @var TbDiscountSettingRepository $settingRepo */
    $settingRepo = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbDiscountSetting');
    /** @var TbDiscountSetting $setting */
    $setting = $settingRepo->getCurrentSettingCopy();

    // 値下げ開始日 更新
    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');
    $commonUtil->updateDiscountBaseDate();

    // シーズン設定 当月カラム
    $seasonColumn = sprintf('s%d', (new \DateTime())->format('n'));

    // 全削除
    $dbMain->query("TRUNCATE tb_discount_list");

    // 計算処理修正
    //   * 基準日 カラム変更
    //   * 計算処理 修正
    $sql = <<<EOD
      INSERT INTO tb_discount_list (
          daihyo_syohin_code
        , stock_amount
        , default_warehouse_stock_amount
        , last_orderdate
        , sales_start_date
        , discount_base_date
        , discount_terminal_date
        , sales_amount
        , expected_daily_sales_amount
        , estimated_sales_days
        , sell_out_days
        , sell_out_date
        , sell_out_over_days
        , genka_tnk
        , genka_tnk_ave
        , cost_total
        , base_price
        , current_price
        , discount_price
        , discount_rate
        , discount_destination_price
        , pricedown_flg
        , pricedown_flg_pre
        , pic_directory
        , pic_filename
        , season_flg
      )
      SELECT
          m.daihyo_syohin_code
        , p.stock_amount
        , COALESCE(pl.default_warehouse_stock_amount, 0)
        , cal.last_orderdate
        , m.販売開始日
        , cal.discount_base_date
        , NULL              AS discount_terminal_date
        , 0                 AS sales_amount
        , 0                 AS expected_daily_sales_amount
        , 0                 AS estimated_sales_days
        , :sellOutDays      AS sell_out_days
        , NULL              AS sell_out_date
        , 0                 AS sell_out_over_days
        , m.genka_tnk       AS genka_tnk
        , cal.genka_tnk_ave AS genka_tnk_ave
        , price.baika_genka AS cost_total
        , price.baika_tanka AS base_price
        , cal.baika_tnk     AS current_price
        , 0                 AS discount_price
        , -1                AS discount_rate
        , 0                 AS discount_destination_price
        , CASE
            WHEN cal.pricedown_flg = 0 THEN 0
            ELSE -1
          END                         AS pricedown_flg
        , CASE
            WHEN cal.pricedown_flg = 0 THEN 0
            ELSE -1
          END                         AS pricedown_flg_pre
        , COALESCE(m.picfolderP1, '')
        , COALESCE(m.picnameP1, '')
        , season.`{$seasonColumn}`    AS season_flg
      FROM tb_mainproducts            AS m
      INNER JOIN tb_mainproducts_cal  AS cal ON m.daihyo_syohin_code = cal.daihyo_syohin_code
      INNER JOIN v_product_price      AS price ON m.daihyo_syohin_code = price.daihyo_syohin_code
      INNER JOIN tb_product_season    AS season ON m.daihyo_syohin_code = season.daihyo_syohin_code
      INNER JOIN (
         SELECT
             daihyo_syohin_code
           , SUM(フリー在庫数) AS stock_amount
         FROM tb_productchoiceitems pci
         WHERE フリー在庫数 > 0
         GROUP BY daihyo_syohin_code
         HAVING stock_amount > 0
      ) AS p ON m.daihyo_syohin_code = p.daihyo_syohin_code
      LEFT JOIN (
         SELECT
             daihyo_syohin_code
           , SUM(pl.stock) AS default_warehouse_stock_amount
         FROM tb_product_location pl
         INNER JOIN tb_location l ON pl.location_id = l.id
         INNER JOIN tb_productchoiceitems pci ON pl.ne_syohin_syohin_code = pci.ne_syohin_syohin_code
         WHERE l.warehouse_id = :defaultWarehouseId
           AND pl.stock > 0
         GROUP BY pci.daihyo_syohin_code
      ) AS pl ON m.daihyo_syohin_code = pl.daihyo_syohin_code
      WHERE cal.endofavailability IS NULL
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':sellOutDays', $setting->getSellOutDays(), \PDO::PARAM_INT);
    $stmt->bindValue(':defaultWarehouseId', TbWarehouseRepository::DEFAULT_WAREHOUSE_ID, \PDO::PARAM_INT);
    $stmt->execute();

    // 最終入荷日が未設定のデータは、このタイミングで暫定的に入荷日を本日に更新。tb_mainproducts_calを更新し、tb_discount_listにも反映
    $stmt = $dbMain->query("SELECT daihyo_syohin_code FROM tb_discount_list WHERE last_orderdate IS NULL OR last_orderdate = '0000-00-00'");
    $lastOrderdayNullCodeList = array();
    while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
      $lastOrderdayNullCodeList[] = $row['daihyo_syohin_code'];
    }
    if (!empty($lastOrderdayNullCodeList)) {
      /** @var DbCommonUtil $commonUtil */
      $commonUtil = $this->getContainer()->get('misc.util.db_common');
      $commonUtil->updateLastOrderdateToday($lastOrderdayNullCodeList);

      $inClause = substr(str_repeat(',?', count($lastOrderdayNullCodeList)), 1); // '?,?,?'
      $sql = <<<EOD
        UPDATE tb_discount_list AS d
        INNER JOIN tb_mainproducts_cal cal ON d.daihyo_syohin_code = cal.daihyo_syohin_code
        SET d.last_orderdate = cal.last_orderdate
        WHERE d.daihyo_syohin_code IN ({$inClause})
EOD;
      $stmt = $dbMain->prepare($sql);
      $stmt->execute($lastOrderdayNullCodeList);
    }

    // 期間内販売件数 取得

    // 一時テーブル作成
    $dbMain->query("DROP TEMPORARY TABLE IF EXISTS tmp_sales_amount");
    $sql = <<<EOD
      CREATE TEMPORARY TABLE tmp_sales_amount (
          daihyo_syohin_code VARCHAR(30) NOT NULL
        , sales_date DATE NOT NULL
        , rank INTEGER NOT NULL
        , sales_amount INTEGER NOT NULL DEFAULT 0
        , PRIMARY KEY (daihyo_syohin_code, sales_date)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8
EOD;
    $dbMain->query($sql);

    // 商品別・日別の受注数を一時テーブルに投入
    // MySQLのユーザ変数を利用するグロい方法。あまりよろしくなさそう
    $sql = <<<EOD
      INSERT INTO tmp_sales_amount (
          rank
        , daihyo_syohin_code
        , sales_date
        , sales_amount
      )
      SELECT
         @rank := if(
            @prev_code <=> x.daihyo_syohin_code
          , if(@prev_date <=> x.sales_date, @rank, @rank + 1)
          , 1
        ) as rank
        , @prev_code := x.daihyo_syohin_code daihyo_syohin_code
        , @prev_date := x.sales_date sales_date
        , x.sales_amount sales_amount
      FROM (
        SELECT
            a.daihyo_syohin_code
          , CAST(DATE_FORMAT(a.受注日, '%Y-%m-%d') AS DATE) AS sales_date
          , SUM(a.受注数) AS sales_amount
        FROM tb_sales_detail_analyze a
        INNER JOIN tb_discount_list d ON a.daihyo_syohin_code = d.daihyo_syohin_code
        WHERE a.受注日 >= COALESCE(d.sales_start_date, '0000-00-00')
          AND a.受注日 >= DATE_ADD(CURRENT_DATE, INTERVAL (-1 * :salesTermDays) DAY)
          AND a.受注日 < CURRENT_DATE /* 本日分は含まない(取得日数を厳密に) */
          AND a.キャンセル区分 = '0'
          AND a.明細行キャンセル = '0'
          AND a.店舗コード <> 19 /* 「在庫引き抜き用店舗」は管理用であり、売上ではないので除外 */
        GROUP BY a.daihyo_syohin_code, DATE_FORMAT(a.受注日, '%Y-%m-%d')
        ORDER BY a.daihyo_syohin_code
               , SUM(a.受注数) DESC
               , a.受注日 DESC
      ) x
      CROSS JOIN ( SELECT @prev_code := '', @prev_date := NULL, @rank := 0 ) as dummy /* ただの変数初期化 */
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':salesTermDays', $setting->getSalesTermDays(), \PDO::PARAM_INT);
    $stmt->execute();

    // 上位指定件数分だけの集計で tb_discount_list 更新
    $sql = <<<EOD
      UPDATE tb_discount_list d
      INNER JOIN (
         SELECT
             daihyo_syohin_code
           , SUM(sales_amount) as sales_amount
         FROM tmp_sales_amount s
         WHERE rank <= :salesSamplingDays
         GROUP BY daihyo_syohin_code
      ) T ON d.daihyo_syohin_code = T.daihyo_syohin_code
      SET d.sales_amount = T.sales_amount
        , d.expected_daily_sales_amount = ROUND(
               /* 販売開始日からの日数が販売数取得日数に満たない場合、販売開始日からの日数で除算 */
               T.sales_amount
                 /
               LEAST(
                   :salesSamplingDays
                 , CASE
                     WHEN DATEDIFF(CURRENT_DATE, d.sales_start_date) <= 0 THEN 1 /* 販売開始前。こちらはイレギュラー */
                     ELSE DATEDIFF(CURRENT_DATE, d.sales_start_date)
                   END
               )
           , 4)
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':salesSamplingDays', $setting->getSalesSamplingDays(), \PDO::PARAM_INT);
    $stmt->execute();

    // その他カラム更新処理
    // 全件取得 ＆ 逐次更新
    $sql = <<<EOD
      SELECT
          d.daihyo_syohin_code
        , d.stock_amount
        , CASE d.last_orderdate WHEN '0000-00-00' THEN NULL ELSE d.last_orderdate END as last_orderdate /* 0000-00-00はnullとして取得 */
        , d.sales_start_date
        , d.discount_base_date
        , d.discount_terminal_date
        , d.sales_amount
        , d.expected_daily_sales_amount
        , d.estimated_sales_days
        , d.sell_out_days
        , d.sell_out_date
        , d.sell_out_over_days
        , d.genka_tnk_ave
        , d.cost_total
        , d.base_price
        , d.current_price
        , d.discount_price
        , d.discount_destination_price
        , d.discount_rate
        , d.pricedown_flg
        , d.pricedown_flg_pre
        , m.genka_tnk
        , m.additional_cost
        , cal.fixed_cost
        , cal.cost_rate AS product_cost_rate
        , v.cost_rate
        , LEAST(
            :salesSamplingDays
            , CASE
                WHEN DATEDIFF(CURRENT_DATE, d.sales_start_date) <= 0 THEN 1 /* 販売開始前。こちらはイレギュラー */
                ELSE DATEDIFF(CURRENT_DATE, d.sales_start_date)
                END
            ) as adjust_sales_sampling_days /* 調整後販売数取得日数。発売日直後の商品の調整を行う */
      FROM tb_discount_list d
      INNER JOIN tb_mainproducts_cal cal ON d.daihyo_syohin_code = cal.daihyo_syohin_code
      INNER JOIN tb_mainproducts m ON d.daihyo_syohin_code = m.daihyo_syohin_code
      INNER JOIN tb_vendormasterdata v ON m.sire_code = v.sire_code
      INNER JOIN tb_product_season AS season ON m.daihyo_syohin_code = season.daihyo_syohin_code
      ORDER BY d.daihyo_syohin_code
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':salesSamplingDays', $setting->getSalesSamplingDays(), \PDO::PARAM_INT);
    $stmt->execute();

    $count = 0;
    while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {

      if (!isset($insertBuilder)) {
        $insertBuilder = new MultiInsertUtil("tb_discount_list", [
          'fields' => [
              'daihyo_syohin_code'          => \PDO::PARAM_STR
            , 'sell_out_date'               => \PDO::PARAM_STR
            , 'estimated_sales_days'        => \PDO::PARAM_STR
            , 'discount_destination_price'  => \PDO::PARAM_INT
            , 'discount_price'              => \PDO::PARAM_INT
          ]
          , 'postfix' => "ON DUPLICATE KEY UPDATE   sell_out_date               = VALUES(sell_out_date) "
                                              . " , estimated_sales_days        = VALUES(estimated_sales_days) "
                                              . " , discount_destination_price  = VALUES(discount_destination_price) "
                                              . " , discount_price              = VALUES(discount_price) "
        ]);
      }
      $update = [
          'daihyo_syohin_code' => $row['daihyo_syohin_code']
      ];

      $today = new \DateTime();
      $today->setTime(0, 0, 0);
      $baseDate = new \DateTime($row['last_orderdate']);

      // 在庫消化希望日 ：　現在日 + 消化日数
      if ($baseDate) {
        $sellOutDate = clone $today;
        $update['sell_out_date'] = $sellOutDate->modify(sprintf('+ %d day', $setting->getSellOutDays()))->format('Y-m-d');
      }

      // 在庫消化日数見積もり（販売完了日数）
      $estimatedSalesDays = self::DEFAULT_VALUE_ESTIMATED_SALES_DAYS;
      if ($row['sales_amount'] > 0) { // 1件も売れていなければデフォルト値のまま
        $estimatedSalesDays = $row['stock_amount'] / ($row['sales_amount'] / $row['adjust_sales_sampling_days']); // 在庫数/(販売数量/販売数取得日数(日))
        $estimatedSalesDays = round($estimatedSalesDays - 0.005, 2); // 小数点以下3桁目切り捨て
      }
      $update['estimated_sales_days'] = $estimatedSalesDays;

      // 最終値下げ売価（「ここまで下げる」値。この値が最大値下幅の範囲内であれば、今回の値下げでここまで下げて良い。消化日数内で売り切れるならば通常売価）
      // ※estimated_sales_daysが0となると、 0 除算エラーとなる。0.00の場合0.01で計算
      if ($estimatedSalesDays == 0) {
        $update['discount_destination_price'] = round($row['base_price'] * ($setting->getSellOutDays() / 0.01));
      } else {
        $update['discount_destination_price'] = round($row['base_price'] * ($setting->getSellOutDays() / $estimatedSalesDays));
      }
      if ($update['discount_destination_price'] > $row['base_price']) {
        $update['discount_destination_price'] = $row['base_price'];
      } else if ($update['discount_destination_price'] <= 0) {
        $update['discount_destination_price'] = 1; // 下限は1円（楽天以外のモールで0円販売がエラーになるため）
      }

      // 値下げ売価（最終的な、今回の値下げ売価）
      // 仕様：値上げの場合には、計算結果まですぐ値上げ
      //      値下げの場合、許容範囲よりも下がっていれば、許容範囲下限の金額
      // 許容範囲加減：
      //   ・1回の実行毎に、最大値下幅まで
      //   ・商品ごとに、最終仕入れ日と原価売価に対する割合で決まる価格まで
      $update['discount_price'] = $update['discount_destination_price'];
      if ($update['discount_destination_price'] < $row['current_price']) { // 値下げ
        // 最大値下幅
        $priceDiff = $row['current_price'] - $update['discount_destination_price'];
        $maxDiff = round($row['base_price'] * ($setting->getMaxDiscountRate() / 100), 0);
        if ($priceDiff > $maxDiff) {
          $update['discount_price'] = $row['current_price'] - $maxDiff;
        }
        // 値下開始日と原価売価に対する割合で決まる価格までしか下げない。※原価の300%等だと値上げになるので、その場合はMAXで通常売価
        $afterDiscountBaseDays = $today->diff(new \Datetime($row['discount_base_date']))->days;
        if ($setting->getLimitWithinDays1() && $setting->getLimitWithinDays1() >= $afterDiscountBaseDays) { // 設定があれば適用。2つともそろっていない場合は空にされるので1つだけで判定。以下同じ。
          $limit = ceil($row['cost_total'] * $setting->getLimitRateForCost1() / 100);
          if ($limit > $update['discount_price']) {
            $update['discount_price'] = min($limit, $row['base_price']);
          }
        }
        if ($setting->getLimitWithinDays2() && $setting->getLimitWithinDays2() >= $afterDiscountBaseDays) {
          $limit = ceil($row['cost_total'] * $setting->getLimitRateForCost2() / 100);
          if ($limit > $update['discount_price']) {
            $update['discount_price'] = min($limit, $row['base_price']);
          }
        }
        if ($setting->getLimitWithinDays3() && $setting->getLimitWithinDays3() >= $afterDiscountBaseDays) {
          $limit = ceil($row['cost_total'] * $setting->getLimitRateForCost3() / 100);
          if ($limit > $update['discount_price']) {
            $update['discount_price'] = min($limit, $row['base_price']);
          }
        }
      }

      $insertBuilder->bindRow($update);

      // 分割 INSERT（を利用したUPDATE） (1000件ずつ)
      if (++$count >= 1000) {
        if (count($insertBuilder->binds())) {
          $updateStmt = $dbMain->prepare($insertBuilder->toQuery());
          $insertBuilder->bindValues($updateStmt);
          $updateStmt->execute();
        }

        unset($insertBuilder);
        $count = 0;
      }
    }

    // INSERT 残り
    if ($count && isset($insertBuilder) && count($insertBuilder->binds())) {
      $updateStmt = $dbMain->prepare($insertBuilder->toQuery());
      $insertBuilder->bindValues($updateStmt);
      $updateStmt->execute();
    }

    return;
  }

  /**
   * 値引き対象商品一覧 取得
   */
  public function getDiscountList()
  {
    $result = [];

    /** @var TbDiscountList[] $tmp */
    $tmp = $this->findBy([], ['daihyo_syohin_code' => 'ASC']);
    foreach($tmp as $row) {
      $result[] = $row->toScalarArray();
    }

    return $result;
  }

}
