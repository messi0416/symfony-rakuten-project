<?php
namespace MiscBundle\Entity\Repository;

use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Query\Expr\Join;
use MiscBundle\Entity\TbLocation;
use MiscBundle\Entity\TbProductLocation;
use MiscBundle\Entity\TbWarehouse;

/**
 * TbProductLocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbProductLocationRepository extends BaseRepository
{
  const MIN_POSITION = 0; // 過去履歴として-5 まで持っていたが、現状無駄で煩雑さの元のため0（現役最小値）で済ます。

  /**
   * 商品ロケーション在庫一覧取得処理
   *
   * TbProductchoiceitems->getLocations() の refresh の正しい方法がわからないため、ひとまず直接取得。
   *
   * @param string $neSyohinSyohinCode
   * @return array
   */
  public function getActiveLocations($neSyohinSyohinCode)
  {
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      SELECT
          pl.ne_syohin_syohin_code
        , pl.position
        , pl.stock
        , pl.location_id
        , l.location_code
      FROM tb_product_location pl
      INNER JOIN tb_location l ON pl.location_id = l.id
      WHERE pl.ne_syohin_syohin_code = :neSyohinSyohinCode
        AND pl.position >= :minPosition
      ORDER BY pl.position
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':neSyohinSyohinCode', $neSyohinSyohinCode, \PDO::PARAM_STR);
    $stmt->bindValue(':minPosition', self::MIN_POSITION, \PDO::PARAM_INT);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * 倉庫移動候補の商品ロケーション在庫一覧取得
   * @param array $neSyohinSyohinCodes 対象商品コード配列
   * @return array
   */
  public function getActiveLocationsForMoveWarehouse(array $neSyohinSyohinCodes) : array
  {
      $qb = $this->createQueryBuilder('pl');
      $qb->select('pl.ne_syohin_syohin_code, pl.location_id, pl.stock');
      $qb->addSelect('(CASE WHEN w.id = :id1 THEN 0 ELSE 1 END) AS HIDDEN FURUICH_TOP ')->setParameter(":id1", TbWarehouseRepository::FURUICHI_WAREHOUSE_ID);
      $qb->innerJoin(TbLocation::class, 'l', JOIN::WITH, 'pl.location_id = l.id');
      $qb->innerJoin(TbWarehouse::class, 'w', JOIN::WITH, 'l.warehouse_id = w.id');
      $qb->andWhere('pl.ne_syohin_syohin_code IN(:neSyohinSyohinCodes)')->setParameter('neSyohinSyohinCodes', $neSyohinSyohinCodes);
      $qb->andWhere('pl.position >= :minPosition')->setParameter('minPosition', self::MIN_POSITION);
      $qb->andWhere('(w.id = :id2 OR w.transport_priority > 0)')->setParameter(":id2", TbWarehouseRepository::FURUICHI_WAREHOUSE_ID);
      $qb->addOrderBy('pl.ne_syohin_syohin_code');
      $qb->addOrderBy('FURUICH_TOP', 'ASC'); // 古市倉庫を他の倉庫より優先
      $qb->addOrderBy('w.shipment_priority', 'DESC'); // 出荷優先順
      $qb->addOrderBy('pl.position', 'ASC'); // ポジション順

      return $qb->getQuery()->getResult();
  }

  /**
   * 在庫あり商品(SKU)一覧取得
   * @param array $excludeItems 対象外商品コード一覧
   * @return array
   */
  public function getNeSyohinCodeInStock(array $excludeItems) : array
  {
      $qb = $this->createQueryBuilder('pl');
      $qb->select('pl.ne_syohin_syohin_code, SUM(pl.stock) AS SUM_STOCK');
      $qb->andWhere('pl.position >= :minPosition')->setParameter('minPosition', self::MIN_POSITION);
      if (count($excludeItems) > 0) {
          $qb->andWhere($qb->expr()->notin('pl.ne_syohin_syohin_code', $excludeItems));
      }
      $qb->andWhere('pl.stock > 0');
      $qb->groupBy('pl.ne_syohin_syohin_code');
      $qb->addOrderBy('pl.ne_syohin_syohin_code');
      return $qb->getQuery()->getResult();
  }

  /**
   * ロケーションIDで全取得
   * @param $locationId
   * @return TbProductLocation[]|Collection
   */
  public function getProductsByLocationId($locationId)
  {
    $dbMain = $this->getConnection('main');

    $qb = $this->createQueryBuilder('pl');
    $qb->innerJoin('MiscBundle:TbLocation', 'l', Join::WITH, 'pl.location_id = l.id');

    $qb->andWhere($qb->expr()->eq('l.id', $dbMain->quote($locationId, \PDO::PARAM_INT)));
    $qb->andWhere($qb->expr()->gte('pl.position', self::MIN_POSITION));
    $qb->orderBy('pl.ne_syohin_syohin_code');
    $qb->addOrderBy('pl.position');

    return $qb->getQuery()->getResult();
  }

  /**
   * 商品の在庫を倉庫別に集計取得
   * @param string $syohinCode
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getStocksWithWarehouses($syohinCode)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
          pl.ne_syohin_syohin_code
        , l.warehouse_id
        , w.name AS warehouse_name
        , SUM(pl.stock) AS stock
      FROM tb_product_location pl
      INNER JOIN tb_location l ON pl.location_id = l.id
      LEFT JOIN tb_warehouse w ON l.warehouse_id = w.id
      WHERE pl.stock > 0
        AND pl.position >= 0
        AND pl.ne_syohin_syohin_code = :syohinCode
      GROUP BY pl.ne_syohin_syohin_code, l.warehouse_id
      ORDER BY l.warehouse_id
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':syohinCode', $syohinCode, \PDO::PARAM_STR);
    $stmt->execute();

    $ret = [];
    foreach($stmt as $item) {
      $ret[$item['warehouse_id']] = $item;
    }

    return $ret;
  }

  /**
   * 代表商品 倉庫在庫一覧取得
   * @param string $daihyoSyohinCode
   * @param int $warehouseId
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getProductWarehouseStockList($daihyoSyohinCode, $warehouseId)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
          pl.ne_syohin_syohin_code
        , l.warehouse_id
        , w.name AS warehouse_name
        , SUM(pl.stock) AS stock
      FROM tb_product_location pl
      INNER JOIN tb_location l ON pl.location_id = l.id
      INNER JOIN tb_productchoiceitems pci on pl.ne_syohin_syohin_code = pci.ne_syohin_syohin_code
      LEFT JOIN tb_warehouse w ON l.warehouse_id = w.id
      WHERE pl.stock > 0
        AND pl.position >= 0
        AND pci.daihyo_syohin_code = :daihyoSyohinCode
        AND l.warehouse_id = :warehouseId
      GROUP BY pl.ne_syohin_syohin_code
      ORDER BY pci.並び順No
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':daihyoSyohinCode', $daihyoSyohinCode, \PDO::PARAM_STR);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->execute();

    $ret = $stmt->fetchAll(\PDO::FETCH_ASSOC);
    return $ret;
  }



  /**
   * 商品のピッキングリストを倉庫別に集計取得
   * @param string $syohinCode
   * @param \DateTimeInterface $date
   * @return array
   */
  public function getPickingListWithWarehouses($syohinCode, $date = null)
  {
    if (!$date) {
      $date = new \DateTime();
    }

    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
          pl.`商品コード` AS ne_syohin_syohin_code
        , pl.warehouse_id
        , w.name AS warehouse_name
        , SUM(pl.`総ピッキング数`) AS total
        , SUM(CASE WHEN pl.picking_status = 0 THEN pl.`総ピッキング数` ELSE 0 END) AS reserved
      FROM tb_delivery_picking_list pl
      LEFT JOIN tb_warehouse w ON pl.warehouse_id = w.id
      WHERE pl.date = :date
        AND pl.`商品コード` = :syohinCode
      GROUP BY pl.`商品コード`, pl.warehouse_id
EOD;

    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':date', $date->format('Y-m-d'), \PDO::PARAM_STR);
    $stmt->bindValue(':syohinCode', $syohinCode, \PDO::PARAM_STR);
    $stmt->execute();

    $ret = [];
    foreach($stmt as $item) {
      $ret[$item['warehouse_id']] = $item;
    }

    return $ret;
  }

  /**
   * 商品の倉庫在庫ピッキングリストを倉庫別に集計取得
   * @param string $syohinCode
   * @return array
   */
  public function getWarehouseStockMovePickingListWithWarehouses($syohinCode)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
          pl.ne_syohin_syohin_code
        , pl.warehouse_id
        , w.name AS warehouse_name
        , SUM(pl.move_num) AS total
        , SUM(CASE WHEN pl.`status` = 0 THEN pl.move_num ELSE 0 END) AS reserved
      FROM tb_warehouse_stock_move_picking_list pl
      LEFT JOIN tb_warehouse w ON pl.warehouse_id = w.id
      WHERE  pl.ne_syohin_syohin_code = :syohinCode
      GROUP BY pl.ne_syohin_syohin_code, pl.warehouse_id
EOD;

    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':syohinCode', $syohinCode, \PDO::PARAM_STR);
    $stmt->execute();

    $ret = [];
    foreach($stmt as $item) {
      $ret[$item['warehouse_id']] = $item;
    }

    return $ret;
  }

  /**
   * 移動伝票の倉庫在庫ピッキング未作成分を倉庫別に集計取得
   * @param string $syohinCode
   * @return array
   */
  public function getTransportAssignWithWarehouses($syohinCode)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
        t.departure_warehouse_id AS warehouse_id
        , d.ne_syohin_syohin_code AS ne_syohin_syohin_code
        , sum(d.amount - coalesce(pl.move_num, 0)) AS transport_assign
      FROM tb_stock_transport_detail d
      JOIN tb_stock_transport t ON d.transport_id = t.id
      LEFT JOIN tb_warehouse_stock_move_picking_list pl ON t.departure_warehouse_id = pl.warehouse_id
        and t.picking_list_date = pl.date
        and t.picking_list_number = pl.number
        and d.ne_syohin_syohin_code = pl.ne_syohin_syohin_code
        and pl.status = 0
      WHERE
        t.departure_warehouse_id <> 0
        and t.status = 0
        and d.ne_syohin_syohin_code = :syohinCode
      GROUP BY
        t.departure_warehouse_id
        , d.ne_syohin_syohin_code
EOD;

    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':syohinCode', $syohinCode, \PDO::PARAM_STR);
    $stmt->execute();

    $ret = [];
    foreach($stmt as $item) {
      $ret[$item['warehouse_id']] = $item;
    }

    return $ret;
  }

}
