<?php

namespace MiscBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use MiscBundle\Entity\TbRakutenExpressConversion;
use MiscBundle\Entity\TbSalesDetail;
use MiscBundle\Util\FileUtil;
use MiscBundle\Util\StringUtil;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;

/**
 * TbRakutenExpressConversionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbRakutenExpressConversionRepository extends BaseRepository
{
  const RAKUTEN_EXPRESS_DIR_PATH          = '/RakutenExpress';
  const DOWNLOAD_DIR_PATH           = self::RAKUTEN_EXPRESS_DIR_PATH . '/Download';
  const ADDR_NE_CSV_DIR_PATH        = self::DOWNLOAD_DIR_PATH  . '/AddrNECSV';
  const ADDR_CSV_DIR_PATH           = self::DOWNLOAD_DIR_PATH  . '/AddrCSV';

  const CUSTOMER_PREFIX = 'ご依頼主';
  const DELIVERY_PREFIX = 'お届け先';
  
  // CSVヘッダー
  public static $RAKUTEN_EXPRESS_HEADER = [
    '配送キャリア' => '配送キャリア'
    , '受注番号' => '受注番号'
    , '配送方法' => '配送方法'
    , '温度区分' => '温度区分'
    , '決済方法' => '決済方法'
    , '荷物のサイズ' => '荷物のサイズ'
    , '荷物の重量' => '荷物の重量'
    , 'お届け希望日' => 'お届け希望日'
    , 'お届け希望時間帯コード' => 'お届け希望時間帯コード'
    , 'お届け先郵便番号' => 'お届け先郵便番号'
    , 'お届け先都道府県' => 'お届け先都道府県'
    , 'お届け先市区郡町村' => 'お届け先市区郡町村'
    , 'お届け先町・番地' => 'お届け先町・番地'
    , 'お届け先建物名・部屋番号' => 'お届け先建物名・部屋番号'
    , 'お届け先会社・部門' => 'お届け先会社・部門'
    , 'お届け先お名前' => 'お届け先お名前'
    , 'お届け先電話番号' => 'お届け先電話番号'
    , 'ご依頼主郵便番号' => 'ご依頼主郵便番号'
    , 'ご依頼主都道府県' => 'ご依頼主都道府県'
    , 'ご依頼主市区郡町村' => 'ご依頼主市区郡町村'
    , 'ご依頼主町・番地' => 'ご依頼主町・番地'
    , 'ご依頼主建物名・部屋番号' => 'ご依頼主建物名・部屋番号'
    , 'ご依頼主お名前' => 'ご依頼主お名前'
    , 'ご依頼主電話番号' => 'ご依頼主電話番号'
    , '品名' => '品名'
    , '記事' => '記事'
    , '荷扱い区分1' => '荷扱い区分1'
    , '荷扱い区分2' => '荷扱い区分2'
    , '置き配' => '置き配'
    , '消費税金額' => '消費税金額'
    , '請求金額' => '請求金額'
    , '顧客管理番号' => '顧客管理番号'
    , 'サイト区分' => 'サイト区分'
    , '出荷予定日' => '出荷予定日'
  ];

  /**
   * 楽天ExpressCSVファイル変換 出力ディレクトリ作成
   */
  public function rakutenExpresstMakedir()
  {
    // 出力パス
    /** @var FileUtil $fileUtil */
    $fileUtil = $this->getContainer()->get('misc.util.file');
    $webCsVDirPath    = $fileUtil->getWebCsvDir();
    // 出力ディレクトリ 作成
    if (!file_exists($webCsVDirPath . self::RAKUTEN_EXPRESS_DIR_PATH)) {
      mkdir($webCsVDirPath . self::RAKUTEN_EXPRESS_DIR_PATH, 0755);
    }
    if (!file_exists($webCsVDirPath . self::DOWNLOAD_DIR_PATH)) {
      mkdir($webCsVDirPath . self::DOWNLOAD_DIR_PATH, 0755);
    }
    if (!file_exists($webCsVDirPath . self::ADDR_NE_CSV_DIR_PATH)) {
      mkdir($webCsVDirPath . self::ADDR_NE_CSV_DIR_PATH, 0755);
    }
    if (!file_exists($webCsVDirPath . self::ADDR_CSV_DIR_PATH)) {
      mkdir($webCsVDirPath . self::ADDR_CSV_DIR_PATH, 0755);
    }

    $currentDate = (new \DateTime())->format('Y-m-d');
    if (!file_exists($webCsVDirPath . self::ADDR_NE_CSV_DIR_PATH . '/' . $currentDate)) {
      mkdir($webCsVDirPath . self::ADDR_NE_CSV_DIR_PATH . '/' . $currentDate, 0755);
    }
    if (!file_exists($webCsVDirPath . self::ADDR_CSV_DIR_PATH . '/' . $currentDate)) {
      mkdir($webCsVDirPath . self::ADDR_CSV_DIR_PATH . '/' . $currentDate, 0755);
    }
  }

  /**
   * 一月以上前のテーブルデータとファイルを削除する
   */
  public function refresh()
  {
    /** @var \Doctrine\DBAL\Connection $dbMain */
    $dbMain = $this->getConnection('main');
    $sql = "DELETE FROM tb_rakuten_express_conversion WHERE `変換日` <= :limit_date";
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':limit_date', (new \DateTime())->modify('-1 month')->format('Y-m-d'), \PDO::PARAM_STR);
    $stmt->execute();

    /** @var FileUtil $fileUtil */
    $fileUtil = $this->getContainer()->get('misc.util.file');
    $fs = new FileSystem();
    $finder = new Finder();
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');
    $filterFunc = function (\SplFileInfo $dir) {
      $limitDate = (new \DateTime())->modify('-1 month')->format('Y-m-d');
      if ($limitDate <= $dir->getFilename()) {
        return false;
      }
    };
    $finder->in($fileUtil->getWebCsvDir() . self::ADDR_NE_CSV_DIR_PATH)->directories()->filter($filterFunc);
    $fs->remove($finder);

    $finder->in($fileUtil->getWebCsvDir() . self::ADDR_CSV_DIR_PATH)->directories()->filter($filterFunc);
    $fs->remove($finder);
  }

  /**
   * 楽天ExpressCSVファイル変換 日付で一覧取得
   * @param \DateTime $from
   * @param \DateTime $to
   * @return array
   */
  public function fetchListByDate($from, $to)
  {
    /** @var \Doctrine\DBAL\Connection $dbMain */
    $dbMain = $this->getConnection('main');
    $sql = <<< EOD
      SELECT
        `変換日`
        , `変換後csvファイル名`
        , `保存回数`
        , `エラー伝票番号`
      FROM tb_rakuten_express_conversion
      WHERE `変換日` BETWEEN :from AND :to
      ORDER BY `変換日` ASC , `変換後csvファイル名` ASC
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':from', $from->format('Y-m-d'), \PDO::PARAM_STR);
    $stmt->bindValue(':to', $to->format('Y-m-d'), \PDO::PARAM_STR);
    $stmt->execute();
    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * 楽天ExpressCSVへ変換
   * @param string $uploadedTmpFileName
   * @param string $uploadedFileName
   * @param string $expectedShippingDate
   * @return array $result
   */
  public function convertRakutenExpressCsv($uploadedTmpFileName, $uploadedFileName, $expectedShippingDate)
  {
    $result = [];
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');
    // ファイルチェック
    if (!(is_uploaded_file($uploadedTmpFileName))) {
      throw new \RuntimeException('ファイルが選択されていません。');
    }
    if (pathinfo($uploadedFileName, PATHINFO_EXTENSION) != 'csv') {
      throw new \RuntimeException('CSVファイルを選択してください。');
    }

    /** @var FileUtil $fileUtil */
    $fileUtil = $this->getContainer()->get('misc.util.file');
    $currentDate = (new \DateTime())->format('Y-m-d');
    $uploadDirPath = sprintf('%s/%s', $fileUtil->getWebCsvDir() . self::ADDR_NE_CSV_DIR_PATH, $currentDate);
    if (!(move_uploaded_file($uploadedTmpFileName, sprintf('%s/%s', $uploadDirPath, $uploadedFileName)))) {
      throw new \RuntimeException('ファイルをアップロードできませんでした。');
    }

    /** @var StringUtil $stringUtil */
    $stringUtil = $this->getContainer()->get('misc.util.string');
    $header = self::$RAKUTEN_EXPRESS_HEADER;
    $eol = "\r\n";
    $headerLine = $stringUtil->convertArrayToCsvLine($header, [], array_keys($header), ",");
    $headerLine = mb_convert_encoding($headerLine, 'SJIS-WIN', 'UTF-8') . $eol;

    // 変換するファイルからヘッダー取り出し
    $uploadedFilepath = sprintf('%s/%s', $uploadDirPath, $uploadedFileName);
    $fp = fopen($uploadedFilepath, 'r');
    $originHeader = fgets($fp);
    $unconvertedHeader = mb_convert_encoding($originHeader, "UTF-8", "SJIS-WIN");
    $unconvertedHeader = rtrim($unconvertedHeader); // 行末の空白改行削除
    $unconvertedHeader = str_replace("\"", '', $unconvertedHeader);
    $unconvertedHeaderArray = explode(',', $unconvertedHeader);

    // ヘッダチェック
    foreach(array_keys($header) AS $colname) {
      if (!in_array($colname, $unconvertedHeaderArray, true)) throw new \RuntimeException("必要なカラムが含まれていません。ファイルが正しいか確認してください。(".$colname.")");
    }

    $fileInfo = $fileUtil->getTextFileInfo($uploadedFilepath);
    $info = [
      'サイズ' => $fileInfo['size']
      , '行数' => $fileInfo['lineCount']
      , 'ファイル名' => $fileInfo['basename']
    ];

    /** @var TbSalesDetailRepository $repoSalesDetail */
    $repoSalesDetail = $this->getEntityManager()->getRepository('MiscBundle:TbSalesDetail');

    /** @var TbShippingVoucherRepository $repoShippingVoucher */
    $repoShippingVoucher = $this->getEntityManager()->getRepository('MiscBundle:TbShippingVoucher');

    $exportList = [];
    while ($line = str_replace("\"", '', mb_convert_encoding(rtrim(fgets($fp)), 'UTF-8', 'SJIS-WIN'))) {

      $line = explode(',', $line);
      $list = [];
      for($i = 0;$i < count($unconvertedHeaderArray);$i++) {
        $list[$unconvertedHeaderArray[$i]] = $line[$i];
      }
      $voucherNumber = $list['受注番号'];
      $exportList[$voucherNumber] = $list;
    }

    $voucherNumbers = array_keys($exportList);

    // お届け先とご依頼主の住所・電話番号の一覧をDBから取得
    $sendDetailList = $repoSalesDetail->getAddressesByVoucherNumbers($voucherNumbers);
    $shippingVoucherDetailList = $repoShippingVoucher->getAddressesByVoucherNumbers($voucherNumbers);

    // お届け先住所とご依頼主住所を差し替える
    $outputList = []; // 出力一覧
    $skipedList = []; // 出力スキップ一覧
    foreach ($voucherNumbers AS $voucherNumber) {
      $export = $exportList[$voucherNumber];

      $customerAddress = "";
      $deliveryAddress = "";
      if (isset($shippingVoucherDetailList[$voucherNumber])) { // tb_shipping_voucher_detailから取得した場合
        $shippingAddresses = $shippingVoucherDetailList[$voucherNumber];
        $deliveryAddress = $shippingAddresses['発送先住所1'].$shippingAddresses['発送先住所2'];
      } else if (isset($sendDetailList[$voucherNumber])) { // tb_sales_detailから取得した場合
        $sendAddresses = $sendDetailList[$voucherNumber];
        $deliveryAddress = $sendAddresses['delivery_address1'].$sendAddresses['delivery_address2'];
      }

      // 住所項目を分割して各出力項目に反映
      $ngAddresses = [];
      $isSucceed = $this->convertAddress($export, $deliveryAddress, self::DELIVERY_PREFIX);
      if (!$isSucceed) {
        $ngAddresses[self::DELIVERY_PREFIX] = $deliveryAddress;
      }
      if (!empty($ngAddresses)) {
        $skipedList[$voucherNumber] = $ngAddresses;
      }
      
      // 依頼主はフォレスト固定
      $export["ご依頼主郵便番号"] = "6308424";
      $export["ご依頼主都道府県"] = "奈良県";
      $export["ご依頼主市区郡町村"] = "奈良市古市町";
      $export["ご依頼主町・番地"] = "789";
      $export["ご依頼主建物名・部屋番号"] = "";
      $export["ご依頼主お名前"] = "株式会社フォレスト";
      $export["ご依頼主電話番号"] = "05053056840";
      
      $export['品名'] = '衣類'; // 品名は衣類に固定　別のものの場合は運用で手動変更
      if (isset($expectedShippingDate)) {
        $export['出荷予定日'] = $expectedShippingDate;
      } else {
        $export['出荷予定日'] = '';
      }
      $outputList[$voucherNumber] = $export;
    }

    // #125650 送り状PDF生成処理が、CSVと逆順に出力するため、CSV生成前に順序を反転する
    $outputList = array_reverse($outputList);

    // ファイル出力
    $outputDirPath = sprintf('%s/%s', $fileUtil->getWebCsvDir() . self::ADDR_CSV_DIR_PATH, $currentDate);
    $outputfp = null;
    // 新CSVファイル作成
    $fileName = sprintf('rakutenExpressConvertCsv%s.csv', date('YmdHis'));
    $filePath = sprintf('%s/%s', $outputDirPath, $fileName);

    $outputfp = fopen($filePath, 'w+');
    fwrite($outputfp, $originHeader); // ヘッダ行書き込み

    foreach($outputList AS $output) {
      $outputLine = $stringUtil->convertArrayToCsvLine($output, array_keys($header), [], ",");
      $outputLine = mb_convert_encoding($outputLine, 'SJIS-WIN', 'UTF-8').$eol;
      fwrite($outputfp, $outputLine); // データ行書き込み
    }
    unset($outputfp);

    // テーブルのカラムをキーとする
    $result['変換日'] = (new \DateTime())->format('Y-m-d');
    $result['変換後csvファイル名'] = $fileName;
    $result['保存回数'] = 0;
    if (!empty($skipedList)) {
      $result['エラー伝票番号'] = implode(',', array_keys($skipedList));
    }

    $result['変換スキップ住所一覧'] = $skipedList; // 変換できなかったお届け先住所またはご依頼主住所
    return $result;
  }

  /**
   * 住所を項目別に分割して出力項目に格納
   * @param array $export 格納先配列への参照
   * @param string $address 住所
   * @param string $prefix 項目名の前半部分(ご依頼主|お届け先)
   * @return bool true:成功 false:分割できないご依頼主住所の場合（都道府県がないか、数字が含まれていない場合）
   */
  public function convertAddress(array &$export, string $address, string $prefix) : bool
  {
    $regSplit = '/(東京都|北海道|(?:京都|大阪)府|.{2,3}県) *(.*?)((?:[0-9０-９])(?:[-−‐ー－―0-9０-９]|丁目|番地|番|号)*) *(.*)/u';
    $parts = [];
    preg_match($regSplit, $address, $parts);
    if (count($parts) == 5) {
      // 文字数調整を行いながら登録
      $export[$prefix.'都道府県'] = $parts[1]; // 都道府県：4文字
      $tmpArray = $this->splitAddress($parts[2], 12); // 市区郡町村：12文字
      $export[$prefix.'市区郡町村'] = $tmpArray[0];
      $tmpArray = $this->splitAddress($tmpArray[1] . $parts[3], 16); // 町・番地：16文字 市区郡町村の余り + 町・番地
      $export[$prefix.'町・番地'] = $tmpArray[0];
      $tmpArray = $this->splitAddress($tmpArray[1] . $parts[4], 16); // 建物名・部屋番号：16文字 建物名・部屋番号の余り + 建物名・部屋番号
      $export[$prefix.'建物名・部屋番号'] = $tmpArray[0];
      if ($prefix === self::DELIVERY_PREFIX) { // お届け先の場合、余った部分は会社、部門へ
        $export[$prefix.'会社・部門'] = $tmpArray[1];
      }
      // 入りきらなかった部分がある場合はエラー伝票とする
      if ($prefix === self::DELIVERY_PREFIX && mb_strlen($tmpArray[1]) >= 40) { // お届け先の場合　会社・部門は40文字まで　それを超えたらエラー
        return false;
      } else if ($prefix === self::CUSTOMER_PREFIX && $tmpArray[1] != "") { // 依頼主の場合　建物名・部屋番号で分割の余りがあればエラー
        return false;
      }

    } else {
      // 分割できないご依頼主住所の場合（都道府県がないか、数字が含まれていない場合）
      return false;
    }
    return true;
  }

  /**
   * 文字を指定の長さで分割する。ただし、後ろの文字列の冒頭が記号にならないように調整する。
   * @param string $org 元の文字列
   * @param int $length 分割する際の前半部分の文字数（後ろの文字列の冒頭が記号になった場合、一文字短縮する）
   */
  private function splitAddress($org, $length) : array
  {
    $result = ["", ""];
    if (!$org || ! trim($org)) { // 元の文字列がそもそもなければ、空文字列の配列を返却
      return $result;
    }
    if (mb_strlen($org) <= $length) { // 元の文字列が指定長以内であれば、分割不要
      $result[0] = $org;
      return $result;
    }
    $result[0] = mb_substr($org, 0, $length);
    $result[1] = mb_substr($org, $length);
    if (preg_match('/[-‐]/u', mb_substr($result[1], 0, 1))) { // 後ろ側の文字の冒頭が記号ではないかチェック とりあえず全角半角ハイフンのみ
      // 一文字目が記号だったので、区切り位置を一文字前へずらして再帰呼び出しし、再度分割チェック
      return $this->splitAddress($org, $length - 1);
    }
    return $result;
  }

  /**
   * 当日の保存回数を取得
   * @return int 保存回数
   */
  public function getMaxSaveCount() : int
  {
    $today = (new \DateTime())->format('Y-m-d');

    /** @var \Doctrine\DBAL\Connection $dbMain */
    $dbMain = $this->getConnection('main');
    $sql = <<< EOD
      SELECT
        MAX(`保存回数`) AS SAVE_COUNT
      FROM tb_rakuten_express_conversion
      WHERE `変換日` = :today
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':today', $today, \PDO::PARAM_STR);
    $stmt->execute();
    /** @var TbRakutenExpressConversion $result */
    $result = $stmt->fetch();

    if (!isset($result['SAVE_COUNT'])) {
      return 0;
    }
    return $result['SAVE_COUNT'];
  }

  /**
   * 変換後ファイルデータをテーブルへ追加
   * @param Array $fileData
   */
  public function insertConvertedFileData($fileData)
  {
    $today = (new \DateTime())->format('Y-m-d');
    $em = $this->getEntityManager();
    $rakutenExpress = new TbRakutenExpressConversion();
    $rakutenExpress->setConversionDate($today);
    $rakutenExpress->setConvertedCsvName($fileData['変換後csvファイル名']);
    $rakutenExpress->setSavedCount($fileData['保存回数']);
    if (isset($fileData['エラー伝票番号'])) {
      $rakutenExpress->setError_voucher_numbers($fileData['エラー伝票番号']);
    }
    $em->persist($rakutenExpress);
    $em->flush();
  }

  /**
   * 変換後CSV用 ファイルパス取得
   * @param string $date
   * @param string $baseFile
   * @return string $filePath
   */
  public function findConversionCsvPath($date, $baseFile)
  {
    /** @var FileUtil $fileUtil */
    $fileUtil = $this->getContainer()->get('misc.util.file');
    $filePath = sprintf('%s/%s/%s', $fileUtil->getWebCsvDir() . self::ADDR_CSV_DIR_PATH, $date, $baseFile);
    if (!(file_exists($filePath))) {
      throw new \RuntimeException('ファイルが存在しません。');
    }
    return $filePath;
  }

  /**
   * CSVファイルのダウンロード回数を更新
   * @param string $date
   * @param string $baseFile
   */
  public function updateDownloadCount($date, $baseFile)
  {
    $em = $this->getEntityManager();
    $entity = $this->findOneBy(['conversion_date' => $date, 'converted_csv_name' => $baseFile]);
    $entity->setSavedCount($entity->getSavedCount() + 1);
    $em->flush();
  }

  /**
   * CSVファイルのダウンロード回数を取得
   * @param string $date
   * @param string $baseFile
   */
  public function getDownloadCount($date, $baseFile)
  {
    $entity = $this->findOneBy(['conversion_date' => $date, 'converted_csv_name' => $baseFile]);
    return $entity->getSavedCount();
  }
}
