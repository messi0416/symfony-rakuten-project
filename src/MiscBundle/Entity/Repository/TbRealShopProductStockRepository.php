<?php

namespace MiscBundle\Entity\Repository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use forestlib\Doctrine\ORM\LimitableNativeQuery;
use MiscBundle\Entity\TbMainproductsCal;
use MiscBundle\Util\DbCommonUtil;
use MiscBundle\Util\MultiInsertUtil;
use MiscBundle\Util\StringUtil;

/**
 * TbRealShopProductStock
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbRealShopProductStockRepository extends BaseRepository
{
  /**
   * @param array $conditions
   * @param array $orders
   * @param int $page
   * @param int $limit
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  public function findProductList($conditions = [], $orders = [], $page = 1, $limit = 100)
  {
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    $sqlSelect = <<<EOD
      SELECT
          m.daihyo_syohin_code
        , img.`directory`
        , img.filename
        , m.総在庫数 AS free_stock
        , COALESCE(S.shop_stock, 0) AS shop_stock
        , COALESCE(S.order_num, 0) AS order_num
        , COALESCE(S.picking_num, 0) AS picking_num
        , price.baika_genka AS cost
        , price.price AS base_price
        , COALESCE(i.baika_tanka, 0) AS current_price
        , i.label_type
EOD;
    $sqlBody = <<<EOD
      FROM tb_mainproducts m
      INNER JOIN product_images img ON m.daihyo_syohin_code = img.daihyo_syohin_code AND img.code = 'p001'
      INNER JOIN tb_mainproducts_cal cal ON m.daihyo_syohin_code = cal.daihyo_syohin_code
      INNER JOIN v_product_price_real_shop price ON m.daihyo_syohin_code = price.daihyo_syohin_code
      LEFT JOIN (
        SELECT
            s.daihyo_syohin_code
          , SUM(s.stock) AS shop_stock
          , SUM(s.order_num) AS order_num
          , 0 AS picking_num /* TODO 実装 */
        FROM tb_real_shop_product_stock s
        GROUP BY s.daihyo_syohin_code
      ) S ON m.daihyo_syohin_code  = S.daihyo_syohin_code
      LEFT JOIN tb_real_shop_information i ON m.daihyo_syohin_code = i.daihyo_syohin_code
      WHERE 1
        AND cal.deliverycode <> :deliveryCodeTemporary
EOD;

    $params = [
      ':deliveryCodeTemporary' => TbMainproductsCal::DELIVERY_CODE_TEMPORARY
    ];

    if (!empty($conditions['daihyo_syohin_code'])) {
      $sqlBody .= " AND m.daihyo_syohin_code LIKE :daihyoSyohinCode ";
      $params[':daihyoSyohinCode'] = $commonUtil->escapeLikeString($conditions['daihyo_syohin_code']) . '%';
    }
    if (isset($conditions['shop_stock_only']) && $conditions['shop_stock_only']) {
      $sqlBody .= " AND S.shop_stock > 0 ";
    }
    if (isset($conditions['forest_stock_only']) && $conditions['forest_stock_only']) {
      $sqlBody .= " AND m.総在庫数 > 0 ";
    }
    if (isset($conditions['stock_order_only']) && $conditions['stock_order_only']) {
      $sqlBody .= " AND S.order_num > 0 ";
    }
    if (!isset($conditions['include_finished']) || ! $conditions['include_finished']) {
      $sqlBody .= " AND cal.deliverycode <> :deliveryCodeFinished ";
      $params[':deliveryCodeFinished'] = TbMainproductsCal::DELIVERY_CODE_FINISHED;
    }

    if (isset($conditions['label_type']) && strlen($conditions['label_type'])) {
      $sqlBody .= " AND i.label_type = :labelType ";
      $params[':labelType'] = $conditions['label_type'];
    }

//    $logger->info(print_r($conditions, true));
//    $logger->info(print_r($sqlBody, true));

    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('daihyo_syohin_code', 'daihyo_syohin_code', 'string');
    $rsm->addScalarResult('directory', 'directory', 'string');
    $rsm->addScalarResult('filename', 'filename', 'string');
    $rsm->addScalarResult('free_stock', 'free_stock', 'integer');
    $rsm->addScalarResult('shop_stock', 'shop_stock', 'integer');
    $rsm->addScalarResult('order_num', 'order_num', 'integer');
    $rsm->addScalarResult('picking_num', 'picking_num', 'integer');
    $rsm->addScalarResult('cost', 'cost', 'integer');
    $rsm->addScalarResult('base_price', 'base_price', 'integer');
    $rsm->addScalarResult('current_price', 'current_price', 'integer');
    $rsm->addScalarResult('label_type', 'label_type', 'string');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $resultOrders = [];
    $defaultOrders = [
        'm.販売開始日' => 'DESC'
      , 'm.登録日時' => 'DESC'
      , 'm.daihyo_syohin_code' => 'DESC'
    ];

    if ($orders) {
      foreach($orders as $k => $v) {
        switch($k) {
          case 'daihyo_syohin_code':
            $k = 'm.' . $k;
            break;
          case 'free_stock':
            $k = 'm.総在庫数';
            break;
          case 'shop_stock': // fallthrough
          case 'order_num':
            $k = 'S.' . $k;
            break;
          case 'cost': // fallthrough
          case 'base_price':
            $k = 'price.' . $k;
            break;
          case 'current_price':
            $k = 'i.baika_tanka';
            break;
          case 'label_type':
            $k = 'i.label_type'; // tag <-> sticker で微妙だが気にしない
            break;
        }

        $logger->info($k);

        $resultOrders[$k] = $v;
        if (isset($defaultOrders[$k])) {
          unset($defaultOrders[$k]);
        }
      }
    }
    $query->setOrders(array_merge($resultOrders, $defaultOrders));

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }


  /**
   * 商品SKU一覧取得
   * @param $daihyoSyohinCode
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function findProductSkuList($daihyoSyohinCode)
  {
    $db = $this->getConnection('main');

    $sql = <<<EOD
      SELECT
          pci.ne_syohin_syohin_code
        , pci.daihyo_syohin_code
        , pci.colname
        , pci.rowname
        , pci.`フリー在庫数`       AS free_stock
        , pci.`発注残数`           AS order_remain
        , COALESCE(s.stock, 0)     AS shop_stock
        , COALESCE(s.order_num, 0) AS order_num
        , s.last_ordered AS last_ordered
        , COALESCE(code.id, '') AS product_code
      FROM tb_productchoiceitems pci
      LEFT JOIN tb_real_shop_product_stock s ON pci.ne_syohin_syohin_code = s.ne_syohin_syohin_code
      LEFT JOIN tb_product_code code ON pci.ne_syohin_syohin_code = code.ne_syohin_syohin_code
      WHERE pci.daihyo_syohin_code = :daihyoSyohinCode
      ORDER BY pci.`並び順No`
EOD;
    $stmt = $db->prepare($sql);

    $stmt->bindValue(':daihyoSyohinCode', $daihyoSyohinCode);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * 商品SKU 一括更新
   * @param array $list
   */
  public function updateProductSkuList($list)
  {
    $db = $this->getConnection('main');

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    // 不要レコード削除
    $sql = <<<EOD
      DELETE s
      FROM tb_real_shop_product_stock s
      LEFT JOIN tb_productchoiceitems pci ON s.ne_syohin_syohin_code = pci.ne_syohin_syohin_code
      WHERE pci.ne_syohin_syohin_code IS NULL
EOD;
    $db->query($sql);

    // 一括INSERT OR UPDATE
    $insertBuilder = new MultiInsertUtil("tb_real_shop_product_stock", [
      'fields' => [
          'ne_syohin_syohin_code' => \PDO::PARAM_STR
        , 'daihyo_syohin_code'    => \PDO::PARAM_STR
        , 'stock'                 => \PDO::PARAM_INT
        , 'order_num'             => \PDO::PARAM_INT
        , 'last_ordered'          => \PDO::PARAM_STR
      ]
      , 'postfix' =>  "ON DUPLICATE KEY UPDATE "
                    . "    stock = VALUES(stock)  "
                    . "  , order_num = VALUES(order_num)  "
                    . "  , last_ordered = CASE WHEN stock <> VALUES(stock) THEN NOW() ELSE last_ordered END "
    ]);

    $commonUtil->multipleInsert($insertBuilder, $db, $list, function($sku) {

      $item = [
          'ne_syohin_syohin_code' => $sku['ne_syohin_syohin_code']
        , 'daihyo_syohin_code'    => $sku['daihyo_syohin_code']
        , 'stock'                 => $sku['stock']
        , 'order_num'             => $sku['order_num']
        , 'last_ordered'          => $sku['last_ordered']
      ];

      return $item;

    }, 'foreach');
  }

  /**
   * 全店舗在庫取得
   */
  public function getAllShopStocks()
  {
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      SELECT
          ps.ne_syohin_syohin_code
        , ps.stock
        , code.id
      FROM tb_real_shop_product_stock ps
      INNER JOIN tb_product_code code ON ps.ne_syohin_syohin_code = code.ne_syohin_syohin_code
EOD;
    $stmt = $dbMain->query($sql);

    /** @var StringUtil $stringUtil */
    $stringUtil = $this->getContainer()->get('misc.util.string');

    $result = [];
    foreach($stmt as $row) {
      $row['product_code'] = $stringUtil->convertNumToJan13($row['id']);
      $result[] = $row;
    }

    return $result;
  }


}
