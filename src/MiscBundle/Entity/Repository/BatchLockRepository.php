<?php
/**
 * この「ロック」は排他処理ではなく、緊急停止的な意味合い。
 * まずは楽天ログイン失敗のために実装
 */

namespace MiscBundle\Entity\Repository;
use MiscBundle\Entity\BatchLock;

/**
 * BatchLockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BatchLockRepository extends BaseRepository
{
  /**
   * コードで取得
   * @param $batchCode
   * @return null|BatchLock
   */
  public function findByBatchCode($batchCode)
  {
    return $this->findOneBy([
      'batch_code' => $batchCode
    ]);
  }

  /**
   * ロックする
   * @param $batchCode
   * @param null $locked
   * @param string $lockKey
   * @param string $info
   * @param int $retryCountMax
   * @return BatchLock
   */
  public function lock($batchCode, $locked = null, $lockKey = '', $info = '', $retryCountMax = 0)
  {
    $em = $this->getEntityManager();
    $lock = $this->findByBatchCode($batchCode);
    if (!$lock) {
      if (!$locked) {
        $locked = new \DateTime();
      }

      $lock = new BatchLock();
      $lock->setBatchCode($batchCode);
      $lock->setLocked($locked);
      $lock->setLockKey($lockKey);
      $lock->setInfo($info);
      $lock->setRetryCountMax($retryCountMax);
      $em->persist($lock);
    }

    $em->flush();

    return $lock;
  }

  /**
   * ロック解除
   */
  public function unlock($batchCode)
  {
    $em = $this->getEntityManager();
    $lock = $this->findByBatchCode($batchCode);
    if ($lock) {
      $em->remove($lock);
    }

    $em->flush();
  }

  /**
   * 全ロック解除
   */
  public function unlockAll()
  {
    $em = $this->getEntityManager();
    $db = $em->getConnection();

    $db->query("TRUNCATE batch_lock");
    return;
  }


}
