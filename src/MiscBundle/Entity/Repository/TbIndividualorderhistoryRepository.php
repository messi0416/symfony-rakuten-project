<?php

namespace MiscBundle\Entity\Repository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\ORM\Query\ResultSetMapping;
use forestlib\Doctrine\ORM\LimitableNativeQuery;
use MiscBundle\Entity\PurchasingAgent;
use MiscBundle\Entity\TbIndividualorderhistory;
use MiscBundle\Entity\Repository\TbMainproductsRepository;
use MiscBundle\MiscBundle;
use MiscBundle\Util\BatchLogger;
use MiscBundle\Util\DbCommonUtil;
use mysql_xdevapi\Result;

/**
 * TbIndividualorderhistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbIndividualorderhistoryRepository extends BaseRepository
{
  // 発注区分
  const SHIPPING_TYPE_AIR = 1; // エア便
  const SHIPPING_TYPE_CONTAINER = 2; // コンテナ便

  // 注残ステータス
  const REMAIN_STATUS_UNTREATED = 'UNTREATED';
  const REMAIN_STATUS_ORDERED = 'ORDERED';
  const REMAIN_STATUS_ARRIVED = 'ARRIVED';
  const REMAIN_STATUS_WAITED = 'WAITED';
  const REMAIN_STATUS_SHIPPED = 'SHIPPED';
  const REMAIN_STATUS_SHORTAGE = 'SHORTAGE';

  const REMAIN_STATUS_DISPLAY_UNTREATED = '未処理';
  const REMAIN_STATUS_DISPLAY_ORDERED = '発注済';
  const REMAIN_STATUS_DISPLAY_ARRIVED = '入荷済';
  const REMAIN_STATUS_DISPLAY_WAITED = '出荷待';
  const REMAIN_STATUS_DISPLAY_SHIPPED = '出荷済';
  const REMAIN_STATUS_DISPLAY_SHORTAGE = '欠品';

  const REMAIN_STATUS_DISPLAY_UNTREATED_CN = '未准备';
  const REMAIN_STATUS_DISPLAY_ORDERED_CN = '已订货';
  const REMAIN_STATUS_DISPLAY_ARRIVED_CN = '已进货';
  const REMAIN_STATUS_DISPLAY_WAITED_CN = '待出货';
  const REMAIN_STATUS_DISPLAY_SHIPPED_CN = '已发货';
  const REMAIN_STATUS_DISPLAY_SHORTAGE_CN = '缺货';

  // 注残ステータスリスト
  const REMAIN_STATUS_LIST = [
    self::REMAIN_STATUS_UNTREATED => self::REMAIN_STATUS_DISPLAY_UNTREATED,
    self::REMAIN_STATUS_ORDERED => self::REMAIN_STATUS_DISPLAY_ORDERED,
    self::REMAIN_STATUS_ARRIVED => self::REMAIN_STATUS_DISPLAY_ARRIVED,
    self::REMAIN_STATUS_WAITED => self::REMAIN_STATUS_DISPLAY_WAITED,
    self::REMAIN_STATUS_SHIPPED => self::REMAIN_STATUS_DISPLAY_SHIPPED,
    self::REMAIN_STATUS_SHORTAGE => self::REMAIN_STATUS_DISPLAY_SHORTAGE,
  ];

  public static $REMAIN_COLUMNS = [
      self::REMAIN_STATUS_ORDERED => 'ordered'
    , self::REMAIN_STATUS_ARRIVED => 'arrived'
    , self::REMAIN_STATUS_WAITED  => 'waiting'
    , self::REMAIN_STATUS_SHIPPED => 'shipping'
  ];

  // 未引当更新制限数
  const LIMITED_NUMBER_UNALLOCATED = 1000;
  /**
   * 注残ステータス 翻訳キー取得
   */
  public static function getRemainStatusTranslationKey($code)
  {
    $keys = [
        self::REMAIN_STATUS_UNTREATED => 'status_untreated'
      , self::REMAIN_STATUS_ORDERED   => 'status_ordered'
      , self::REMAIN_STATUS_ARRIVED   => 'status_arrived'
      , self::REMAIN_STATUS_WAITED   => 'status_waited'
      , self::REMAIN_STATUS_SHIPPED   => 'status_shipped'
      , self::REMAIN_STATUS_SHORTAGE  => 'status_shortage'
    ];

    return isset($keys[$code]) ? $keys[$code] : null;
  }

  /**
   * 注残ステータス一覧取得(インスタンスメソッド)
   * @return array
   */
  public function getRemainStatusListArray()
  {
    return self::getRemainStatusList();
  }

  /**
   * 注残ステータス一覧取得
   * @return array
   */
  public static function getRemainStatusList()
  {
    return [
        self::REMAIN_STATUS_UNTREATED => self::REMAIN_STATUS_DISPLAY_UNTREATED
      , self::REMAIN_STATUS_ORDERED   => self::REMAIN_STATUS_DISPLAY_ORDERED
      , self::REMAIN_STATUS_ARRIVED   => self::REMAIN_STATUS_DISPLAY_ARRIVED
      , self::REMAIN_STATUS_WAITED    => self::REMAIN_STATUS_DISPLAY_WAITED
      , self::REMAIN_STATUS_SHIPPED   => self::REMAIN_STATUS_DISPLAY_SHIPPED
      , self::REMAIN_STATUS_SHORTAGE  => self::REMAIN_STATUS_DISPLAY_SHORTAGE
    ];
  }

  /**
   * 未引当フラグ更新処理
   * @param integer $agentCode
   */
  public function updateUnallocatedFlgByAgentCode($agentCode = null)
  {
    $logger = $this->getLogger();

    $dbMain = $this->getConnection('main');

    //拠点ごと更新の場合
    if (isset($agentCode) && is_int($agentCode)) {
      $whereAgent = "AND I.`依頼先cd` = :agentCode";
    } else {
      $whereAgent = "";
    }

    //未引当フラグがONのものを一度OFF
    $sql = <<<EOD
      UPDATE tb_individualorderhistory AS I
      SET I.unallocated_flg = 0
      WHERE I.unallocated_flg = 1
          {$whereAgent}
EOD;
    $stmt = $dbMain->prepare($sql);
    if (isset($agentCode)) {
      $stmt->bindValue(':agentCode', $agentCode);
    }
    $stmt->execute();

    //伝票より未引当フラグを更新する対象を取得
    $sql = <<<EOD
      SELECT
          a.`商品コード（伝票）` 
         ,SUM(a.`受注数` - a.`引当数`) AS 未引当数 
      FROM tb_sales_detail_analyze a
      WHERE a.`キャンセル区分` = '0' /*0:有効な受注です*/
          AND a.`明細行キャンセル` = '0' /*明細で一部キャンセルをされたものは取得しない*/
          AND a.`受注状態` <> '出荷確定済（完了）'
          AND (a.`受注数` - a.`引当数`) > 0
      GROUP BY a.`商品コード（伝票）`
      ORDER BY a.`商品コード（伝票）`
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->execute();
    $unallocatedFlgs = $stmt->fetchAll(\PDO::FETCH_ASSOC);


    //注残ページの商品ごとの発注数を取得
    $sql = <<<EOD
      SELECT I.id
             ,I.`商品コード`
             ,I.`発注数`
      FROM tb_individualorderhistory I
      WHERE I.`注残計` > 0
          {$whereAgent}
      ORDER BY I.`商品コード`,I.`発注伝票番号`,I.id
EOD;
    $stmt = $dbMain->prepare($sql);
    if (isset($agentCode)) {
      $stmt->bindValue(':agentCode', $agentCode);
    }
    $stmt->execute();
    $orderNums = $stmt->fetchAll(\PDO::FETCH_ASSOC);

    $updateFlgIDs = [];
    $shiftCount = 0;

    foreach ($unallocatedFlgs as $unallocatedFlg) {
      $Num = $unallocatedFlg["未引当数"];
      foreach ($orderNums as $orderNum) {
        if (($unallocatedFlg["商品コード（伝票）"] == $orderNum["商品コード"]) && $Num > 0) {
          $Num -= $orderNum["発注数"];
          array_push($updateFlgIDs, $orderNum["id"]);
          if ($Num <= 0) {
            for ($l = 0; $l < $shiftCount; $l++) {
              array_shift($orderNums);
            }
            break;
          }
        }
        $shiftCount++;
      }
      $shiftCount = 0;
    }

    //更新処理
    $when = [];

    $count = 0;
    sort($updateFlgIDs);
    if (isset($updateFlgIDs) && count($updateFlgIDs) > 0) {
      foreach ($updateFlgIDs as $updateFlgID) {
        $when[] = "WHEN {$updateFlgID} THEN 1 ";
        $updateFlgs[] = $updateFlgID;

        $count++;
        //更新を1000件ずつにして負荷軽減
        if ($count % $this::LIMITED_NUMBER_UNALLOCATED == 0) {
          $whenStr = implode(" ", $when);
          $toDelimitUpdateFlgsByComma = implode(',', $updateFlgs);

          $sql = <<<EOD
            UPDATE tb_individualorderhistory AS I
            SET I.unallocated_flg =
                case I.id
                  {$whenStr}
                END
              ,I.unallocated_flg_updated = CURRENT_TIMESTAMP
            WHERE I.id IN ({$toDelimitUpdateFlgsByComma})
            {$whereAgent}
EOD;
          $stmt = $dbMain->prepare($sql);
          if (isset($agentCode)) {
            $stmt->bindValue(':agentCode', $agentCode);
          }
          $stmt->execute();

          $logger->info(sprintf("未引当フラグ更新：　%s has been updated!", count($updateFlgs)));

          $when = [];
          $updateFlgs = [];
        }
      }

      //1000件以下の更新分
      $whenStr = implode(" ", $when);
      $toDelimitUpdateFlgIDsByComma = implode(',', $updateFlgs);

      $logger->info(sprintf("未引当フラグ更新：　%s has been updated!", count($updateFlgs)));

      $sql = <<<EOD
        UPDATE tb_individualorderhistory AS I
        SET I.unallocated_flg =
          case I.id
            {$whenStr}
          END
          ,I.unallocated_flg_updated = CURRENT_TIMESTAMP
        WHERE I.id IN({$toDelimitUpdateFlgIDsByComma})
          {$whereAgent}
EOD;
      $stmt = $dbMain->prepare($sql);
      if (isset($agentCode)) {
        $stmt->bindValue(':agentCode', $agentCode);
      }
      $stmt->execute();
    }
  }

  /**
   * 最終更新日時取得
   * @return \DateTimeImmutable|null
   * @throws \Exception
   */
  public function getLastUpdated($agentCode)
  {
    $qb = $this->createQueryBuilder('I');
    $qb->select('MAX(I.unallocated_flg_updated) AS last_updated')
       ->andWhere("I.agent_code = :agentCode")->setParameter(':agentCode', $agentCode);;
    $result = $qb->getQuery()->getResult();

    return isset($result[0]['last_updated']) ? new \DateTimeImmutable($result[0]['last_updated']) : null;
  }

  /**
   * 依頼先別 注残一覧取得
   * @param $agentCode
   * @param array $conditions　検索条件の配列
   *   ・syohin_code: SKUコード（前方一致）
   *   ・order_date_from: 発注日From
   *   ・order_date_to: 発注日To
   *   ・id: tb_individualorderhistory のID。伝票分割時に使用する。
   *   ・voucher_number:　発注伝票番号（完全一致）
   *   ・status: 出荷ステータス
   *   ・unallocated: 未引当有り（空文字・nullなら検索対象外、それ以外は未引当有を検索）
   *   ・shipping_type: 発送種別
   *   ・shipping_number: 発送伝票番号
   *   
   * @param bool $fetchNoRemain 注残0を取得するか
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getListByAgentCode($agentCode, $conditions = [], $fetchNoRemain = false)
  {
    $dbMain = $this->getConnection('main');

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    // 検索条件
    if (!is_array($conditions)) {
      $conditions = [];
    }

    $wheres = [];
    $params = [];
    
    // 依頼先コード
    if ($agentCode > -1) {
      $wheres[] = ' i.`依頼先cd` = :agentCode ';
      $params[':agentCode'] = $agentCode;
    }

    // 検索条件を構築
    $this->buildConditionsWhere($conditions, $wheres, $params, $fetchNoRemain);

    $wheresStr = '';
    if ($wheres) {
      $wheresStr = ' AND ' . implode(' AND ', $wheres);
    }

    $sql = <<<EOD
      SELECT
          i.id
        , i.`発注伝票番号` AS voucher_number
        , i.`明細行` AS line_number
        , i.shipping_type
        , i.`商品コード` AS  syohin_code
        , i.`発注数` AS  order_num
        , i.`注残計` AS remain_num
        , i.`予定納期` AS scheduled_date
        , i.`備考` AS comment
        , i.`仕入先cd` AS sire_code
        , i.`依頼先cd` AS agent_code
        , i.`発行日` AS  order_date
        , i.remain_status
        , i.remain_ordered_date
        , i.remain_arrived_date
        , i.remain_waiting_date
        , i.remain_shipping_date
        , i.remain_stockout_date
        , i.remain_ordered_person
        , i.remain_arrived_person
        , i.remain_waiting_person
        , i.remain_shipping_person
        , i.remain_stockout_person
        , i.shipping_number AS shipping_number
        , i.shipping_operation_number AS shipping_operation_number
        , i.receive_order_number AS receive_order_number
        , i.warehousing_number AS warehousing_number
        , pci.colname
        , pci.rowname
        , CASE
            WHEN pci.support_colname <> '' THEN pci.support_colname
            ELSE pci.colname
           END AS support_colname
        , CASE
            WHEN pci.support_rowname <> '' THEN pci.support_rowname
            ELSE pci.rowname
           END AS support_rowname
         , LEFT(i.vendor_comment, 50) AS vendor_comment
         , i.vendor_comment_updated
         , i.vendor_comment_processed
         , m.daihyo_syohin_code AS daihyo_syohin_code
         , m.picnameP1 AS image_name
         , m.picfolderP1 AS image_dir
         , m.sire_code AS current_sire_code
         , m.仕入備考 AS order_comment
         , m.genka_tnk AS cost
         , REPLACE(d.rakutencategories_1, '\\\\', '/') AS category
         , CASE
             WHEN T.商品コード IS NULL THEN 1
             ELSE 0
           END AS stocked_flag
         , cal.quality_level
         , i.unallocated_flg
      FROM tb_individualorderhistory i
      LEFT JOIN tb_productchoiceitems pci ON i.`商品コード` = pci.ne_syohin_syohin_code
      LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
      LEFT JOIN tb_mainproducts_cal cal ON pci.daihyo_syohin_code = cal.daihyo_syohin_code
      LEFT JOIN tb_plusnaoproductdirectory d ON m.`NEディレクトリID` = d.`NEディレクトリID`
      LEFT JOIN (
        SELECT
           i.`商品コード`
          , SUM(i.regular) AS regular_sum
        FROM tb_individualorderhistory i
        GROUP BY i.`商品コード`
        HAVING regular_sum = 0
      ) T ON i.商品コード = T.商品コード
      WHERE 1
        {$wheresStr}
      ORDER BY i.`発注伝票番号`
             , i.`仕入先cd`
             , i.`商品コード`
EOD;
    $stmt = $dbMain->prepare($sql);
    if ($params) {
      foreach($params as $k => $v) {
        $stmt->bindValue($k, $v, \PDO::PARAM_STR);
      }
    }
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * 依頼先別 注残一覧取得（ページング版）
   * @param $agentCode
   * @param array $conditions　検索条件の配列 内容はbuildConditionsWhereに従う
   * @param bool $fetchNoRemain 注残0を取得するか
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getPageListByAgentCode($agentCode, $conditions = [], $fetchNoRemain = false, $limit = 100, $page = 1)
  {
    /** @var EntityManager $em */
    $em = $this->getEntityManager();
    
    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');
    
    // 検索条件
    if (!is_array($conditions)) {
      $conditions = [];
    }
    
    $wheres = [];
    $params = [];
    
    // 依頼先コード
    if ($agentCode > -1) {
      $wheres[] = ' i.`依頼先cd` = :agentCode ';
      $params[':agentCode'] = $agentCode;
    }
    
    // 検索条件を構築
    $this->buildConditionsWhere($conditions, $wheres, $params, $fetchNoRemain);
    
    $wheresStr = '';
    if ($wheres) {
      $wheresStr = ' AND ' . implode(' AND ', $wheres);
    }
    
    $sqlSelect = <<<EOD
      SELECT
          i.id
        , i.`発注伝票番号` AS voucher_number
        , i.`明細行` AS line_number
        , i.shipping_type
        , i.`商品コード` AS  syohin_code
        , i.`発注数` AS  order_num
        , i.`注残計` AS remain_num
        , i.`予定納期` AS scheduled_date
        , i.`備考` AS comment
        , i.`仕入先cd` AS sire_code
        , i.`依頼先cd` AS agent_code
        , i.`発行日` AS  order_date
        , i.remain_status
        , i.remain_ordered_date
        , i.remain_arrived_date
        , i.remain_waiting_date
        , i.remain_shipping_date
        , i.remain_stockout_date
        , i.remain_ordered_person
        , i.remain_arrived_person
        , i.remain_waiting_person
        , i.remain_shipping_person
        , i.remain_stockout_person
        , i.shipping_number AS shipping_number
        , i.shipping_operation_number AS shipping_operation_number
        , i.receive_order_number AS receive_order_number
        , i.warehousing_number AS warehousing_number
        , pci.colname
        , pci.rowname
        , CASE
            WHEN pci.support_colname <> '' THEN pci.support_colname
            ELSE pci.colname
           END AS support_colname
        , CASE
            WHEN pci.support_rowname <> '' THEN pci.support_rowname
            ELSE pci.rowname
           END AS support_rowname
         , LEFT(i.vendor_comment, 50) AS vendor_comment
         , i.vendor_comment_updated
         , i.vendor_comment_processed
         , m.daihyo_syohin_code AS daihyo_syohin_code
         , m.picnameP1 AS image_name
         , m.picfolderP1 AS image_dir
         , m.sire_code AS current_sire_code
         , m.仕入備考 AS order_comment
         , m.genka_tnk AS cost
         , REPLACE(d.rakutencategories_1, '\\\\', '/') AS category
         , CASE
             WHEN T.商品コード IS NULL THEN 1
             ELSE 0
           END AS stocked_flag
         , cal.quality_level
         , i.unallocated_flg

EOD;
    $sqlBody = <<<EOD
      FROM tb_individualorderhistory i
      LEFT JOIN tb_productchoiceitems pci ON i.`商品コード` = pci.ne_syohin_syohin_code
      LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
      LEFT JOIN tb_mainproducts_cal cal ON pci.daihyo_syohin_code = cal.daihyo_syohin_code
      LEFT JOIN tb_plusnaoproductdirectory d ON m.`NEディレクトリID` = d.`NEディレクトリID`
      LEFT JOIN (
        SELECT
           i.`商品コード`
          , SUM(i.regular) AS regular_sum
        FROM tb_individualorderhistory i
        GROUP BY i.`商品コード`
        HAVING regular_sum = 0
      ) T ON i.商品コード = T.商品コード
      WHERE 1
        {$wheresStr}
EOD;
    $rsm = new ResultSetMapping();
    $rsm->addScalarResult('id', 'id', 'string');
    $rsm->addScalarResult('voucher_number', 'voucher_number', 'string');
    $rsm->addScalarResult('line_number', 'line_number', 'string');
    $rsm->addScalarResult('shipping_type', 'shipping_type', 'integer');
    $rsm->addScalarResult('syohin_code', 'syohin_code', 'string');
    $rsm->addScalarResult('order_num', 'order_num', 'integer');
    $rsm->addScalarResult('remain_num', 'remain_num', 'integer');
    $rsm->addScalarResult('scheduled_date', 'scheduled_date', 'string');
    $rsm->addScalarResult('comment', 'comment', 'string');
    $rsm->addScalarResult('sire_code', 'sire_code', 'string');
    $rsm->addScalarResult('agent_code', 'agent_code', 'string');
    $rsm->addScalarResult('order_date', 'order_date', 'string');
    $rsm->addScalarResult('remain_status', 'remain_status', 'string');
    $rsm->addScalarResult('remain_ordered_date', 'remain_ordered_date', 'string');
    $rsm->addScalarResult('remain_arrived_date', 'remain_arrived_date', 'string');
    $rsm->addScalarResult('remain_waiting_date', 'remain_waiting_date', 'string');
    $rsm->addScalarResult('remain_shipping_date', 'remain_shipping_date', 'string');
    $rsm->addScalarResult('remain_stockout_date', 'remain_stockout_date', 'string');
    $rsm->addScalarResult('remain_ordered_person', 'remain_ordered_person', 'string');
    $rsm->addScalarResult('remain_arrived_person', 'remain_arrived_person', 'string');
    $rsm->addScalarResult('remain_waiting_person', 'remain_waiting_person', 'string');
    $rsm->addScalarResult('remain_shipping_person', 'remain_shipping_person', 'string');
    $rsm->addScalarResult('remain_stockout_person', 'remain_stockout_person', 'string');
    $rsm->addScalarResult('shipping_number', 'shipping_number', 'string');
    $rsm->addScalarResult('shipping_operation_number', 'shipping_operation_number', 'string');
    $rsm->addScalarResult('receive_order_number', 'receive_order_number', 'string');
    $rsm->addScalarResult('warehousing_number', 'warehousing_number', 'string');
    $rsm->addScalarResult('colname', 'colname', 'string');
    $rsm->addScalarResult('rowname', 'rowname', 'string');
    $rsm->addScalarResult('support_colname', 'support_colname', 'string');
    $rsm->addScalarResult('support_rowname', 'support_rowname', 'string');
    $rsm->addScalarResult('vendor_comment', 'vendor_comment', 'string');
    $rsm->addScalarResult('vendor_comment_updated', 'vendor_comment_updated', 'string');
    $rsm->addScalarResult('vendor_comment_processed', 'vendor_comment_processed', 'string');
    $rsm->addScalarResult('daihyo_syohin_code', 'daihyo_syohin_code', 'string');
    $rsm->addScalarResult('image_name', 'image_name', 'string');
    $rsm->addScalarResult('image_dir', 'image_dir', 'string');
    $rsm->addScalarResult('current_sire_code', 'current_sire_code', 'string');
    $rsm->addScalarResult('order_comment', 'order_comment', 'string');
    $rsm->addScalarResult('cost', 'cost', 'string');
    $rsm->addScalarResult('category', 'category', 'string');
    $rsm->addScalarResult('stocked_flag', 'stocked_flag', 'string');
    $rsm->addScalarResult('quality_level', 'quality_level', 'string');
    $rsm->addScalarResult('unallocated_flg', 'unallocated_flg', 'string');
    
    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    if ($params) {
      foreach($params as $k => $v) {
        $query->setParameter($k, $v);
      }
    }
    $resultOrders = [];
    
    /** @var BatchLogger $logger */
    $logger = $this->getLogger();
    
    if (isset($conditions['sortKey']) && $conditions['sortKey'] != '') {
      $sortKey = '';
      switch ($conditions['sortKey']) {
        case 'voucherNumber':
          $sortKey = 'voucher_number';
          break;
        case 'orderDate':
          $sortKey = 'order_date';
          break;
        case 'syohinCode':
          $sortKey = 'syohin_code';
          break;
        case 'category':
          $sortKey = 'category';
          break;
        case 'supportColName':
          $sortKey = 'support_colname';
          break;
        case 'supportRowName':
          $sortKey = 'support_rowname';
          break;
        case 'cost':
          $sortKey = 'cost';
          break;
        case 'orderNum':
          $sortKey = 'order_num';
          break;
        case 'remainNum':
          $sortKey = 'remain_num';
          break;
        case 'unallocatedFlg':
          $sortKey = 'unallocated_flg';
          break;
        case 'remainOrderedDate':
          $sortKey = 'remain_ordered_date';
          break;
        case 'remainArrivedDate':
          $sortKey = 'remain_arrived_date';
          break;
        case 'remainWaitingDate':
          $sortKey = 'remain_waiting_date';
          break;
        case 'remainShippingDate':
          $sortKey = 'remain_shipping_date';
          break;
        case 'remainStockOutDate':
          $sortKey = 'remain_stockout_date';
          break;
        case 'shippingNumber':
          $sortKey = 'shipping_number';
          break;
      }
      $sortOrder = $conditions['sortOrder'] == -1 ? 'DESC' : 'ASC';
      
      $resultOrders = [$sortKey => $sortOrder];
    }
    $defaultOrders = [
      'voucher_number' => 'ASC'
      , 'agent_code' => 'ASC'
      , 'syohin_code' => 'ASC'
    ];
    $query->setOrders($resultOrders + $defaultOrders); // 連想配列の足し算は、異なるキーであれば後ろにつき、同一キーならば前の要素優先
    
    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
      $query /* query NOT result */
      , $page
      , $limit
    );
    return $pagination;
  }
  
  /**
   * 依頼先別 注残一覧取得（ラベル用・全件）
   * @param $agentCode
   * @param array $conditions　検索条件の配列 内容はbuildConditionsWhereに従う
   * @param bool $fetchNoRemain 注残0を取得するか
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getListForLabelByAgentCode($agentCode, $conditions = [], $fetchNoRemain = false)
  {
    /** @var EntityManager $em */
    $em = $this->getEntityManager();
    
    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');
    $dbMain = $this->getConnection('main');
    
    // 検索条件
    if (!is_array($conditions)) {
      $conditions = [];
    }
    
    $wheres = [];
    $params = [];
    
    // 依頼先コード
    if ($agentCode > -1) {
      $wheres[] = ' i.`依頼先cd` = :agentCode ';
      $params[':agentCode'] = $agentCode;
    }
    
    // 検索条件を構築
    $this->buildConditionsWhere($conditions, $wheres, $params);
    
    $wheresStr = '';
    if ($wheres) {
      $wheresStr = ' AND ' . implode(' AND ', $wheres);
    }
    $sorts = [
      'i.発注伝票番号' => 'ASC'
      , 'i.依頼先cd' => 'ASC'
      , 'syohin_code' => 'ASC'
    ];
    if (isset($conditions['sortKey']) && $conditions['sortKey'] != '') {
      $sortKey = '';
      switch ($conditions['sortKey']) {
        case 'voucherNumber':
          $sortKey = 'i.発注伝票番号';
          break;
        case 'orderDate':
          $sortKey = 'i.発行日';
          break;
        case 'syohinCode':
          $sortKey = 'syohin_code';
          break;
        case 'category':
          $sortKey = 'category';
          break;
        case 'supportColName':
          $sortKey = 'support_colname';
          break;
        case 'supportRowName':
          $sortKey = 'support_rowname';
          break;
        case 'cost':
          $sortKey = 'm.genka_tnk';
          break;
        case 'orderNum':
          $sortKey = 'order_num';
          break;
        case 'remainNum':
          $sortKey = 'remain_num';
          break;
        case 'unallocatedFlg':
          $sortKey = 'unallocated_flg';
          break;
        case 'remainOrderedDate':
          $sortKey = 'remain_ordered_date';
          break;
        case 'remainArrivedDate':
          $sortKey = 'remain_arrived_date';
          break;
        case 'remainWaitingDate':
          $sortKey = 'remain_waiting_date';
          break;
        case 'remainShippingDate':
          $sortKey = 'remain_shipping_date';
          break;
        case 'remainStockOutDate':
          $sortKey = 'remain_stockout_date';
          break;
        case 'shippingNumber':
          $sortKey = 'shipping_number';
          break;
      }
      $sortOrder = $conditions['sortOrder'] == -1 ? 'DESC' : 'ASC';
      
      $resultOrders = [$sortKey => $sortOrder];
      // 連想配列の足し算は、異なるキーであれば後ろにつき、同一キーならば前の要素優先
      $sorts = $resultOrders + $sorts;
    }
    $orderBys = [];
    foreach ($sorts as $sortKey => $sortOrder) {
      $orderBys[] = $sortKey . ' ' . $sortOrder;
    }
    $orderBysStr = implode(', ', $orderBys);
    
    $sql = <<<EOD
      SELECT
          REPLACE(d.rakutencategories_1, '\\\\', '/') AS category
        , i.`商品コード` AS  syohin_code
        , i.`発注数` AS  order_num
        , i.`注残計` AS remain_num
        , pci.colname
        , pci.rowname
        , CASE
            WHEN pci.support_colname <> '' THEN pci.support_colname
            ELSE pci.colname
           END AS support_colname
        , CASE
            WHEN pci.support_rowname <> '' THEN pci.support_rowname
            ELSE pci.rowname
           END AS support_rowname
      FROM tb_individualorderhistory i
      LEFT JOIN tb_productchoiceitems pci ON i.`商品コード` = pci.ne_syohin_syohin_code
      LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
      LEFT JOIN tb_mainproducts_cal cal ON pci.daihyo_syohin_code = cal.daihyo_syohin_code
      LEFT JOIN tb_plusnaoproductdirectory d ON m.`NEディレクトリID` = d.`NEディレクトリID`
      LEFT JOIN (
        SELECT
           i.`商品コード`
          , SUM(i.regular) AS regular_sum
        FROM tb_individualorderhistory i
        GROUP BY i.`商品コード`
        HAVING regular_sum = 0
      ) T ON i.商品コード = T.商品コード
      WHERE 1
        {$wheresStr}
      ORDER BY
        {$orderBysStr}
EOD;
    $stmt = $dbMain->prepare($sql);
    if ($params) {
      foreach($params as $k => $v) {
        $stmt->bindValue($k, $v, \PDO::PARAM_STR);
      }
    }
    $stmt->execute();
    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }
  
  /**
   * 依頼先別 注残の統計情報を取得する（注残0は含まない）
   * ・record_count 現在の検索条件に一致するレコード数
   * ・remain_sum 注残個数合計
   * ・remain_cost_sum 注残金額合計
   * ・untreated_count 未引当レコード数
   * ・ordered_count 発注済レコード数
   * ・arrived_count 入荷済レコード数
   * ・waited_count 出荷待レコード数
   * ・shipped_count 出荷済レコード数
   * ・shortage_count 不足レコード数
   * ・empty_shipping_number 発注伝票番号がないレコード数
   * ・
   * ・注残ステータスごとの件数
   * ・出荷伝票番号がないデータの件数
   * ・サイズ・重量未設定SKUの件数
   * @return array ['record_count' => 総行数, 'remain_sum' => 注残数合計, 'remain_cost_sum' => '注残金額JPY合計', 'sku_num' => SKU種類数]
   * @throws \Doctrine\DBAL\DBALException
   */
  public function findSummaryByAgentCode($agentCode, $conditions = []) {
    $dbMain = $this->getConnection('main');
    
    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');
    
    $wheres = [];
    $params = [];
    $addFrom = ''; // 検索条件があるときだけFrom句にJOINを追加
    
    // 依頼先コード
    if ($agentCode > -1) {
      $wheres[] = ' i.`依頼先cd` = :agentCode ';
      $params[':agentCode'] = $agentCode;
    }
    
    // 検索条件を構築
    $this->buildConditionsWhere($conditions, $wheres, $params);
    if ($conditions) {
      $addFrom = <<<EOD
        LEFT JOIN tb_mainproducts_cal cal ON pci.daihyo_syohin_code = cal.daihyo_syohin_code
        LEFT JOIN tb_plusnaoproductdirectory d ON m.`NEディレクトリID` = d.`NEディレクトリID`
        LEFT JOIN (
          SELECT
             i.`商品コード`
            , SUM(i.regular) AS regular_sum
          FROM tb_individualorderhistory i
          GROUP BY i.`商品コード`
          HAVING regular_sum = 0
        ) T ON i.商品コード = T.商品コード
EOD;
    }
    
    $wheresStr = '';
    if ($wheres) {
      $wheresStr = ' AND ' . implode(' AND ', $wheres);
    }
    
    $sql = <<<EOD
      SELECT
        count(*) record_count
        , IFNULL(SUM(i.注残計), 0) remain_sum
        , IFNULL(SUM(m.genka_tnk * i.注残計), 0) remain_cost_sum
        , count(distinct i.`商品コード`) sku_count
        , SUM(CASE remain_status WHEN :remainStatusUntreated THEN 1 ELSE 0 END) as untreated_count
        , SUM(CASE remain_status WHEN :remainStatusOrdered THEN 1 ELSE 0 END) as ordered_count
        , SUM(CASE remain_status WHEN :remainStatusArrived THEN 1 ELSE 0 END) as arrived_count
        , SUM(CASE remain_status WHEN :remainStatusWaited THEN 1 ELSE 0 END) as waited_count
        , SUM(CASE remain_status WHEN :remainStatusShipped THEN 1 ELSE 0 END) as shipped_count
        , SUM(CASE remain_status WHEN :remainStatusShortage THEN 1 ELSE 0 END) as shortage_count
        , SUM(CASE WHEN pci.ne_syohin_syohin_code IS NULL THEN 1 ELSE 0 END) as empty_sku_count
        , SUM(CASE WHEN (i.shipping_number IS NULL OR i.shipping_number = '') THEN 1 ELSE 0 END) as empty_shipping_number_count
        , SUM(CASE WHEN (pci.weight <= 0 OR pci.`depth` = 0 OR pci.height = 0 OR pci.width = 0 
                           OR pci.description_en IS NULL OR pci.description_en = ''
                           OR pci.description_en IS NULL OR pci.description_cn = ''
                           OR pci.hint_ja IS NULL OR pci.hint_ja = ''
                           OR pci.hint_cn IS NULL OR pci.hint_cn = '') THEN 1 ELSE 0 END) as incomplete_sku_count
      FROM tb_individualorderhistory i
      LEFT JOIN tb_productchoiceitems pci ON i.`商品コード` = pci.ne_syohin_syohin_code
      LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        {$addFrom}
      WHERE 1
        {$wheresStr}
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':remainStatusUntreated', self::REMAIN_STATUS_UNTREATED, \PDO::PARAM_STR);
    $stmt->bindValue(':remainStatusOrdered', self::REMAIN_STATUS_ORDERED, \PDO::PARAM_STR);
    $stmt->bindValue(':remainStatusArrived', self::REMAIN_STATUS_ARRIVED, \PDO::PARAM_STR);
    $stmt->bindValue(':remainStatusWaited', self::REMAIN_STATUS_WAITED, \PDO::PARAM_STR);
    $stmt->bindValue(':remainStatusShipped', self::REMAIN_STATUS_SHIPPED, \PDO::PARAM_STR);
    $stmt->bindValue(':remainStatusShortage', self::REMAIN_STATUS_SHORTAGE, \PDO::PARAM_STR);
    if ($params) {
      foreach($params as $k => $v) {
        $stmt->bindValue($k, $v, \PDO::PARAM_STR);
      }
    }
    $stmt->execute();
    return $stmt->fetch(\PDO::FETCH_ASSOC);
  }
  
  /**
   * 依頼先別 注残一覧 CSVダウンロード用データ取得
   * @param $agentCode
   * @param array $conditions
   * @return \Doctrine\DBAL\Statement
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getCsvDownloadDataByAgentCode($agentCode, $conditions = [])
  {
    $dbMain = $this->getConnection('main');

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    // 検索条件
    if (!is_array($conditions)) {
      $conditions = [];
    }

    // 依頼先がおタオバオの場合のみ項目を追加
    $tnekoSelect = '';
    if ($agentCode == PurchasingAgent::AGENT_ID_TNEKO) {
      $tnekoSelect = <<<EOD
      , pci.weight AS weight
      , pci.depth AS depth
      , pci.width AS width
      , pci.height AS height
      , pci.description_en AS description_en
      , pci.hint_ja AS hint_ja
EOD;
    }

    $wheres = [];
    $params = [];

    // 依頼先コード
    if ($agentCode > -1) {
      $wheres[] = '  i.`依頼先cd` = :agentCode ';
      $params[':agentCode'] = $agentCode;
    }
    // 商品コード
    if (isset($conditions['syohin_code']) && strlen($conditions['syohin_code'])) {
      $wheres[] = ' 商品コード LIKE :syohinCode ';
      $params[':syohinCode'] = '%' . $commonUtil->escapeLikeString($conditions['syohin_code']) . '%';
    }
    // ステータス
    if (isset($conditions['status']) && strlen($conditions['status'])) {
      $wheres[] = ' i.remain_status = :remainStatus ';
      $params[':remainStatus'] = $conditions['status'];
    }
    // 発注伝票番号
    if (isset($conditions['voucher_number']) && strlen($conditions['voucher_number'])) {
      $wheres[] = ' 発注伝票番号 LIKE :voucherNumber ';
      $params[':voucherNumber'] = '%' . $commonUtil->escapeLikeString($conditions['voucher_number']) . '%';
    }
    // 発送伝票番号
    if (isset($conditions['shipping_number']) && strlen($conditions['shipping_number'])) {
      $wheres[] = ' shipping_number LIKE :shippingNumber ';
      $params[':shippingNumber'] = $commonUtil->escapeLikeString($conditions['shipping_number']) . '%';
    }
    // 受注番号
    if (isset($conditions['receive_order_number']) && strlen($conditions['receive_order_number'])) {
      $wheres[] = ' receive_order_number LIKE :receiveOrderNumber ';
      $params[':receiveOrderNumber'] = $commonUtil->escapeLikeString($conditions['receive_order_number']) . '%';
    }

    // 発注日 FROM
    if (isset($conditions['order_date_from']) && preg_match('/^\d{1,4}-\d{1,2}-\d{1,2}$/', $conditions['order_date_from'])) {
      $wheres[] = ' 発行日 >= :orderDateFrom ';
      $params[':orderDateFrom'] = $conditions['order_date_from'];
    }
    // 発注日 TO
    if (isset($conditions['order_date_to']) && preg_match('/^\d{1,4}-\d{1,2}-\d{1,2}$/', $conditions['order_date_to'])) {
      $wheres[] = ' 発行日 <= :orderDateTo ';
      $params[':orderDateTo'] = $conditions['order_date_to'];
    }
    // 絞り込み
    if (!isset($conditions['check'])) {
      $wheres[] = ' 注残計 > 0 ';
    }
    $wheresStr = '';
    if ($wheres) {
      $wheresStr = ' AND ' . implode(' AND ', $wheres);
    }

    $sql = <<<EOD
      SELECT
          i.id
        , i.`発注伝票番号` AS voucher_number
        , i.`明細行` AS line_number
        , i.`商品コード` AS  syohin_code
        , i.`仕入先cd` AS sire_code
        , i.`依頼先cd` AS agent_code
        , i.`発行日` AS  order_date
        , i.`予定納期` AS scheduled_date
        , i.`備考` AS comment

        , i.`発注数`  AS order_num
        , i.regular
        , i.defective
        , i.shortage
        , i.`注残計` AS remain_num

        , i.remain_status
        , i.remain_ordered_date
        , i.remain_arrived_date
        , i.remain_waiting_date
        , i.remain_shipping_date
        , i.remain_stockout_date
        
        , i.remain_ordered_person
        , i.remain_arrived_person
        , i.remain_waiting_person
        , i.remain_shipping_person
        , i.remain_stockout_person
        
        , i.shipping_number AS shipping_number
        , i.receive_order_number AS receive_order_number

        , pci.colname
        , pci.support_colname
        , pci.rowname
        , pci.support_rowname

        , i.vendor_comment
        , i.vendor_comment_updated
        , i.vendor_comment_processed
        , m.daihyo_syohin_code AS daihyo_syohin_code
        , cal.daihyo_syohin_label AS daihyo_syohin_label

        , m.picnameP1 AS image_name
        , m.picfolderP1 AS image_dir
        , m.sire_code AS current_sire_code
        , m.仕入備考 AS order_comment
        , m.genka_tnk AS cost

        , v.sire_name AS sire_name
        
        , va.sire_adress AS sire_adress
        , '' AS image_url
        , pc.barcode AS barcode

        , m.picnameP1 AS image_name
        , m.picfolderP1 AS image_dir
        {$tnekoSelect}

      FROM tb_individualorderhistory i
      LEFT JOIN tb_productchoiceitems pci ON i.`商品コード` = pci.ne_syohin_syohin_code
      LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
      LEFT JOIN tb_mainproducts_cal cal ON pci.daihyo_syohin_code = cal.daihyo_syohin_code
      LEFT JOIN tb_vendormasterdata v ON i.仕入先cd = v.sire_code
      LEFT JOIN (
        SELECT
            va.sire_code
          , va.daihyo_syohin_code
          , GROUP_CONCAT(va.sire_adress) AS sire_adress
        FROM tb_vendoraddress va
        INNER JOIN tb_mainproducts m ON va.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE va.stop = 0
        GROUP BY va.sire_code, va.daihyo_syohin_code
      ) va ON m.sire_code = va.sire_code AND m.daihyo_syohin_code = va.daihyo_syohin_code
      LEFT JOIN tb_product_code pc ON i.`商品コード` = pc.ne_syohin_syohin_code 
      WHERE 1
        {$wheresStr}
      ORDER BY i.`発注伝票番号`
             , i.`仕入先cd`
             , i.`商品コード`
EOD;

    $stmt = $dbMain->prepare($sql);
    if ($params) {
      foreach($params as $k => $v) {
        $stmt->bindValue($k, $v, \PDO::PARAM_STR);
      }
    }
    $stmt->execute();

    return $stmt;
  }
  
  /**
   * パラメータで渡された検索条件を元に、Where句とパラメータの配列を構築する。
   * パラメータで、 $where と $params を参照渡しで受け取り、直接要素を追加する。
   * 
   * このメソッドで構築するWhere句は、以下の条件で結合する注残情報に対応する。
   * 呼び出しもとで、この名称と条件でJOINすること。
   *  FROM tb_individualorderhistory i
   *  LEFT JOIN tb_productchoiceitems pci ON i.`商品コード` = pci.ne_syohin_syohin_code
   *  LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
   *  LEFT JOIN tb_mainproducts_cal cal ON pci.daihyo_syohin_code = cal.daihyo_syohin_code
   *  LEFT JOIN tb_plusnaoproductdirectory d ON m.`NEディレクトリID` = d.`NEディレクトリID`
   *  
   * @param unknown $conditions
   * @param unknown $where $where条件を
   * @param unknown $params
   * @param boolean $fetchNoRemain 注残0を含める場合は true
   */
  private function buildConditionsWhere($conditions, &$wheres, &$params, $fetchNoRemain = false) {
    /** @var BatchLogger $logger */
    $logger = $this->getLogger();
    
    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');
    
    // 注残0を含まない
    if (! $fetchNoRemain) {
      $wheres[] = ' i.`注残計` > 0 ';
    }

    // ID
    if (isset($conditions['id']) && strlen($conditions['id'])) {
      $wheres[] = ' i.id = :id ';
      $params[':id'] = $conditions['id'];
    }
    
    // 商品コード
    if (isset($conditions['syohin_code']) && strlen($conditions['syohin_code'])) {
      $wheres[] = ' i.商品コード LIKE :syohinCode ';
      $params[':syohinCode'] = '%' . $commonUtil->escapeLikeString($conditions['syohin_code']) . '%';
    }
    
    // 発注日 FROM
    if (isset($conditions['order_date_from']) && preg_match('/^\d{1,4}-\d{1,2}-\d{1,2}$/', $conditions['order_date_from'])) {
      $wheres[] = ' i.発行日 >= :orderDateFrom ';
      $params[':orderDateFrom'] = $conditions['order_date_from'];
    }
    // 発注日 TO
    if (isset($conditions['order_date_to']) && preg_match('/^\d{1,4}-\d{1,2}-\d{1,2}$/', $conditions['order_date_to'])) {
      $wheres[] = ' i.発行日 <= :orderDateTo ';
      $params[':orderDateTo'] = $conditions['order_date_to'];
    }
    
    // 発注伝票番号
    if (isset($conditions['voucher_number']) && strlen($conditions['voucher_number'])) {
      $wheres[] = ' i.発注伝票番号 = :voucherNumber ';
      $params[':voucherNumber'] = $conditions['voucher_number'];
    }
    
    // 出荷ステータス
    if (isset($conditions['status']) &&  strlen($conditions['status'])) {
      $wheres[] = ' i.remain_status = :remainStatus ';
      $params[':remainStatus'] = $conditions['status'];
    }
    
    // 連絡事項有無
    if (isset($conditions['vendor_comment']) &&  strlen($conditions['vendor_comment']) &&  $conditions['vendor_comment'] == '1') {
      $wheres[] = " i.vendor_comment IS NOT NULL AND i.vendor_comment <> ''";
    }
    
    // 未引当の有無
    if (isset($conditions['unallocated']) &&  strlen($conditions['unallocated'])) {
      $wheres[] = ' i.unallocated_flg = :unallocatedFlg ';
      $params[':unallocatedFlg'] = $conditions['unallocated'];
    }
    
    // 発送種別
    if (isset($conditions['shipping_type']) && strlen($conditions['shipping_type'])) {
      $wheres[] = ' shipping_type = :shippingType ';
      $params[':shippingType'] = $conditions['shipping_type'];
    }
    
    // 発送伝票番号
    if (isset($conditions['shipping_number']) && strlen($conditions['shipping_number'])) {
      $wheres[] = ' i.shipping_number LIKE :shippingNumber ';
      $params[':shippingNumber'] = '%' .$commonUtil->escapeLikeString($conditions['shipping_number']) . '%';
    }
    if (isset($conditions['is_empty_shipping_number']) && strlen($conditions['is_empty_shipping_number']) && $conditions['is_empty_shipping_number'] == 0) {
      $wheres[] = " i.shipping_number != '' ";
      $wheres[] = " pci.description_en != '' ";
      $wheres[] = " pci.description_cn != '' ";
      $wheres[] = " pci.hint_ja != '' ";
      $wheres[] = " pci.hint_cn != '' ";
      $wheres[] = " pci.weight != '' ";
      $wheres[] = " pci.depth != '' ";
      $wheres[] = " pci.width != '' ";
      $wheres[] = " pci.height != '' ";
    }
    
    // 受注番号
    if (isset($conditions['receive_order_number']) && strlen($conditions['receive_order_number'])) {
      $wheres[] = ' i.receive_order_number LIKE :receiveOrderNumber ';
      $params[':receiveOrderNumber'] = '%' .$commonUtil->escapeLikeString($conditions['receive_order_number']) . '%';
    }
    
    // 入庫番号
    if (isset($conditions['warehousing_number']) &&  strlen($conditions['warehousing_number'])) {
      $wheres[] = ' i.warehousing_number LIKE :warehousingNumber ';
      $params[':warehousingNumber'] = '%' . $commonUtil->escapeLikeString($conditions['warehousing_number']) . '%';
    }
    
    // 出庫番号
    if (isset($conditions['shipping_operation_number']) &&  strlen($conditions['shipping_operation_number'])) {
      $wheres[] = ' i.shipping_operation_number LIKE :shippingOperationNumber ';
      $params[':shippingOperationNumber'] = '%' . $commonUtil->escapeLikeString($conditions['shipping_operation_number']) . '%';
    }
    
    // 担当者
    if (isset($conditions['person']) && strlen($conditions['person'])) {
      $wheres[] = ' (i.remain_ordered_person LIKE :person OR i.remain_arrived_person LIKE :person OR i.remain_waiting_person LIKE :person OR i.remain_shipping_person LIKE :person OR i.remain_stockout_person LIKE :person)';
      
      $params[':person'] = '%'. $commonUtil->escapeLikeString($conditions['person']) . '%';
    }
    
    // 絞込：警告・注意あり
    if (isset($conditions['alert']) && strlen($conditions['alert'])) {
      $regularNoneWhere = 'T.regular_sum = 0';
      $unsetWeightSizeWhere = '(pci.weight = 0 or pci.depth = 0 or pci.width = 0 or pci.height = 0)';
      $unsetMaterialDescriptionWhere = <<<EOD
        (pci.description_en IS NULL or pci.description_en = ''
        or pci.description_cn IS NULL or pci.description_cn = ''
        or pci.hint_ja IS NULL or pci.hint_ja = ''
        or pci.hint_cn IS NULL or pci.hint_cn = '')
EOD;
      if ($conditions['alert'] === 'ALL') {
        $wheres[] = "($regularNoneWhere or $unsetWeightSizeWhere or $unsetMaterialDescriptionWhere)";
      } else if ($conditions['alert'] === 'REGULAR_NONE') {
        $wheres[] = $regularNoneWhere;
      } else if ($conditions['alert'] === 'UNSET_WEIGHT_SIZE') {
        $wheres[] = $unsetWeightSizeWhere;
      } else if ($conditions['alert'] === 'UNSET_MATERIAL_DESCRIPTION') {
        $wheres[] = $unsetMaterialDescriptionWhere;
      }
    }
  }
  
  public function csvUploadUpdateTbProductchoiceitems($tmpTableName) {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      UPDATE tb_productchoiceitems p
        INNER JOIN {$tmpTableName} t
          ON (p.ne_syohin_syohin_code = t.商品コード)
        LEFT JOIN tb_sku_descriptions sd1
          ON (
            sd1.description_delete_flg != 1
            AND sd1.id = t.description
          )
        LEFT JOIN tb_sku_descriptions sd2
          ON (sd2.hint_delete_flg != 1 AND sd2.id = t.材質商品説明)
      SET
        p.weight = (
          CASE
            WHEN p.weight = 0
              THEN t.重量
            ELSE p.weight
            END
        )
        , p.depth = (
          CASE
            WHEN p.depth = 0
              THEN t.縦
            ELSE p.depth
            END
        )
        , p.width = (
          CASE
            WHEN p.width = 0
              THEN t.横
            ELSE p.width
            END
        )
        , p.height = (
          CASE
            WHEN p.height = 0
              THEN t.高
            ELSE p.height
            END
        )
        , p.description_en = (
          CASE
            WHEN (p.description_en IS NULL OR p.description_en = '')
              THEN sd1.description_en
            ELSE p.description_en
            END
        )
        , p.description_cn = (
          CASE
            WHEN (p.description_cn IS NULL OR p.description_cn = '')
              THEN sd1.description_cn
            ELSE p.description_cn
            END
        )
        , p.hint_ja = (
          CASE
            WHEN (p.hint_ja IS NULL OR p.hint_ja = '')
              THEN sd2.hint_ja
            ELSE p.hint_ja
            END
        )
        , p.hint_cn = (
          CASE
            WHEN (p.hint_cn IS NULL OR p.hint_cn = '')
              THEN sd2.hint_cn
            ELSE p.hint_cn
            END
        )
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->execute();
  }

  /**
   * DESCRIPTIONマスタCSVダウンロード用データ取得
   * @return array
   */
  public function getDescriptionListCsvDownloadData()
  {
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      SELECT
        sd.id
        , sd.description_en
        , sd.description_cn
      FROM tb_sku_descriptions sd
      WHERE sd.description_delete_flg != 1
      ORDER BY sd.description_en ASC
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(\PDO::FETCH_ASSOC);
    return $result;
  }

  /**
   * 材質商品説明マスタCSVダウンロード用データ取得
   * @return array
   */
  public function getHintListCsvDownloadData()
  {
    $dbMain = $this->getConnection('main');
    
    $sql = <<<EOD
      SELECT
        sd.id
        , sd.hint_ja
        , sd.hint_cn
      FROM tb_sku_descriptions sd
      WHERE sd.hint_delete_flg != 1
      ORDER BY sd.hint_ja ASC
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(\PDO::FETCH_ASSOC);
    return $result;
  }

  /**
   * 輸出書類出力
   * @param $agentCode
   * @param array $conditions
   * @return \Doctrine\DBAL\Statement
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getDataExportToExcelByAgentCode($agentCode, $conditions = [])
  {
    $dbMain = $this->getConnection('main');

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    // 検索条件
    if (!is_array($conditions)) {
      $conditions = [];
    }

    $wheres = [];
    $params = [];

    // 依頼先コード
    if ($agentCode > -1) {
      $wheres[] = '  i.`依頼先cd` = :agentCode ';
      $params[':agentCode'] = $agentCode;
    }
    // 商品コード
    if (isset($conditions['syohin_code']) && strlen($conditions['syohin_code'])) {
      $wheres[] = ' i.商品コード LIKE :syohinCode ';
      $params[':syohinCode'] = '%' . $commonUtil->escapeLikeString($conditions['syohin_code']) . '%';
    }

    // 発注日 FROM
    if (isset($conditions['order_date_from']) && preg_match('/^\d{1,4}-\d{1,2}-\d{1,2}$/', $conditions['order_date_from'])) {
      $wheres[] = ' i.発行日 >= :orderDateFrom ';
      $params[':orderDateFrom'] = $conditions['order_date_from'];
    }
    // 発注日 TO
    if (isset($conditions['order_date_to']) && preg_match('/^\d{1,4}-\d{1,2}-\d{1,2}$/', $conditions['order_date_to'])) {
      $wheres[] = ' i.発行日 <= :orderDateTo ';
      $params[':orderDateTo'] = $conditions['order_date_to'];
    }

    // 発注伝票番号
    if (isset($conditions['voucher_number']) && strlen($conditions['voucher_number'])) {
      $wheres[] = ' i.発注伝票番号 = :voucherNumber ';
      $params[':voucherNumber'] = $conditions['voucher_number'];
    }

    // 出荷ステータス
    if (isset($conditions['status']) &&  strlen($conditions['status'])) {
      $wheres[] = ' i.remain_status = :remain_status ';
      $params[':remain_status'] = $conditions['status'];
    }

    // 連絡事項有無
    if (isset($conditions['vendor_comment']) &&  strlen($conditions['vendor_comment']) &&  $conditions['vendor_comment'] == '1') {
      $wheres[] = " i.vendor_comment IS NOT NULL AND i.vendor_comment <> ''";
    }

    // 未引当の有無
    if (isset($conditions['unallocated']) &&  strlen($conditions['unallocated'])) {
      $wheres[] = ' i.unallocated_flg = :unallocatedFlg ';
      $params[':unallocatedFlg'] = $conditions['unallocated'];
    }

    // 発送種別
    if (isset($conditions['shipping_type']) && strlen($conditions['shipping_type'])) {
      $wheres[] = ' shipping_type = :shipping_type ';
      $params[':shipping_type'] = $conditions['shipping_type'];
    }
    
    // 発送伝票番号
    if (isset($conditions['shipping_number']) && strlen($conditions['shipping_number'])) {
      $wheres[] = ' i.shipping_number LIKE :shippingNumber ';
      $params[':shippingNumber'] = '%' .$commonUtil->escapeLikeString($conditions['shipping_number']) . '%';
    }
    if (isset($conditions['is_empty_shipping_number']) && strlen($conditions['is_empty_shipping_number']) && $conditions['is_empty_shipping_number'] == 0) {
      $wheres[] = " i.shipping_number != '' ";
      $wheres[] = " pci.description_en != '' ";
      $wheres[] = " pci.description_cn != '' ";
      $wheres[] = " pci.hint_ja != '' ";
      $wheres[] = " pci.hint_cn != '' ";
      $wheres[] = " pci.weight != '' ";
      $wheres[] = " pci.depth != '' ";
      $wheres[] = " pci.width != '' ";
      $wheres[] = " pci.height != '' ";
    }

    // 受注番号
    if (isset($conditions['receive_order_number']) && strlen($conditions['receive_order_number'])) {
      $wheres[] = ' i.receive_order_number LIKE :receiveOrderNumber ';
      $params[':receiveOrderNumber'] = '%' .$commonUtil->escapeLikeString($conditions['receive_order_number']) . '%';
    }

    // 入庫番号
    if (isset($conditions['warehousing_number']) &&  strlen($conditions['warehousing_number'])) {
      $wheres[] = ' i.warehousing_number LIKE :warehousing_number ';
      $params[':warehousing_number'] = '%' . $commonUtil->escapeLikeString($conditions['warehousing_number']) . '%';
    }

    // 出庫番号
    if (isset($conditions['shipping_operation_number']) &&  strlen($conditions['shipping_operation_number'])) {
      $wheres[] = ' i.shipping_operation_number LIKE :shipping_operation_number ';
      $params[':shipping_operation_number'] = '%' . $commonUtil->escapeLikeString($conditions['shipping_operation_number']) . '%';
    }

    // 担当者
    if (isset($conditions['person']) && strlen($conditions['person'])) {
      $wheres[] = ' (i.remain_ordered_person LIKE :person OR i.remain_arrived_person LIKE :person OR i.remain_waiting_person LIKE :person OR i.remain_shipping_person LIKE :person OR i.remain_stockout_person LIKE :person)';

      $params[':person'] = '%'. $commonUtil->escapeLikeString($conditions['person']) . '%';
    }


    // 絞込：警告・注意あり
    if (isset($conditions['alert']) && strlen($conditions['alert'])) {
      $regularNoneWhere = 'T.regular_sum = 0';
      $unsetWeightSizeWhere = '(pci.weight = 0 or pci.depth = 0 or pci.width = 0 or pci.height = 0)';
      $unsetMaterialDescriptionWhere = <<<EOD
        (pci.description_en IS NULL or pci.description_en = ''
        or pci.description_cn IS NULL or pci.description_cn = ''
        or pci.hint_ja IS NULL or pci.hint_ja = ''
        or pci.hint_cn IS NULL or pci.hint_cn = '')
EOD;
      if ($conditions['alert'] === 'ALL') {
        $wheres[] = "($regularNoneWhere or $unsetWeightSizeWhere or $unsetMaterialDescriptionWhere)";
      } else if ($conditions['alert'] === 'REGULAR_NONE') {
        $wheres[] = $regularNoneWhere;
      } else if ($conditions['alert'] === 'UNSET_WEIGHT_SIZE') {
        $wheres[] = $unsetWeightSizeWhere;
      } else if ($conditions['alert'] === 'UNSET_MATERIAL_DESCRIPTION') {
        $wheres[] = $unsetMaterialDescriptionWhere;
      }
    }

    $wheresStr = '';
    if ($wheres) {
      $wheresStr = ' AND ' . implode(' AND ', $wheres);
    }
    $wheresStr .= " AND i.`注残計` > 0 ";

    $listSort = [
      'voucherNumber'      => 'i.`発注伝票番号`',
      'orderDate'          => 'i.`発行日`',
      'syohinCode'         => 'i.`商品コード`',
      'category'           => 'd.rakutencategories_1',
      'supportColName'     => 'pci.support_colname',
      'supportRowName'     => 'pci.support_rowname',
      'cost'               => 'm.genka_tnk',
      'remainNum'          => 'i.`注残計`',
      'orderNum'           => 'i.`発注数`',
      'remainOrderedDate'  => 'i.remain_ordered_date',
      'remainArrivedDate'  => 'i.remain_arrived_date',
      'remainWaitingDate'  => 'i.remain_waiting_date',
      'remainShippingDate' => 'i.remain_shipping_date',
      'remainStockOutDate' => 'i.remain_stockout_date',
      'shippingNumber'     => 'i.shipping_number'
    ];
    $orderBy = 'i.`発注伝票番号`, i.`仕入先cd`, i.`商品コード`';
    if (isset($conditions['sortBy']) && in_array($conditions['sortBy'], $listSort)) {
      $orderBy = $listSort[$conditions['sortBy']];
      if (isset($conditions['direction']) && $conditions['direction'] == 1) {
        $orderBy .= ' ASC';
      } else {
        $orderBy .= ' DESC';
      }
    }

    $sql = <<<EOD
      SELECT
          i.id
        , i.`発注伝票番号` AS voucher_number
        , i.`明細行` AS line_number
        , i.`商品コード` AS  syohin_code
        , i.`仕入先cd` AS sire_code
        , i.`依頼先cd` AS agent_code
        , i.`発行日` AS  order_date
        , i.`予定納期` AS scheduled_date
        , i.`備考` AS comment

        , i.`発注数`  AS order_num
        , i.regular
        , i.defective
        , i.shortage
        , i.`注残計` AS remain_num

        , i.remain_status
        , i.remain_ordered_date
        , i.remain_arrived_date
        , i.remain_waiting_date
        , i.remain_shipping_date
        , i.remain_stockout_date
        
        , i.remain_ordered_person
        , i.remain_arrived_person
        , i.remain_waiting_person
        , i.remain_shipping_person
        , i.remain_stockout_person
        
        , i.shipping_number AS shipping_number
        , i.receive_order_number AS receive_order_number
        , i.warehousing_number AS warehousing_number
        
        , IFNULL(i.checklist_nw,-1) AS checklist_nw
        , IFNULL(i.checklist_meas,-1) AS checklist_meas

        , pci.colname
        , pci.support_colname
        , pci.rowname
        , pci.support_rowname
        , pci.description_en
        , pci.description_cn
        , pci.hint_ja
        , pci.hint_cn
        , pci.weight
        , pci.depth
        , pci.width
        , pci.height
        , piv.filename
        , CASE WHEN (piv.filename IS NOT NULL AND piv.filename <> '') THEN piv.filename
               WHEN (piv.filename IS NULL OR piv.filename = '') THEN m.picnameP1
               ELSE ''
          END AS fileimage
        , CASE WHEN (piv.filename IS NOT NULL AND piv.filename <> '') THEN piv.directory
               WHEN (piv.filename IS NULL OR piv.filename = '') THEN m.picfolderP1
               ELSE ''
          END AS folder
        , m.商品画像P1Adress AS image_url

        , i.vendor_comment
        , i.vendor_comment_updated
        , i.vendor_comment_processed
        , m.daihyo_syohin_code AS daihyo_syohin_code
        , cal.daihyo_syohin_label AS daihyo_syohin_label

        , m.picnameP1 AS image_name
        , m.picfolderP1 AS image_dir
        , m.sire_code AS current_sire_code
        , m.仕入備考 AS order_comment
        , m.genka_tnk AS cost

        , v.sire_name AS sire_name
        , REPLACE(d.rakutencategories_1, '\\\\', '/') AS category

        , imp.note

      FROM tb_individualorderhistory i
      LEFT JOIN tb_productchoiceitems pci ON i.`商品コード` = pci.ne_syohin_syohin_code
      LEFT JOIN product_images_variation piv ON piv.`color_image_id` = pci.color_image_id
      LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
      LEFT JOIN tb_mainproducts_cal cal ON pci.daihyo_syohin_code = cal.daihyo_syohin_code
      LEFT JOIN tb_vendormasterdata v ON i.仕入先cd = v.sire_code
      LEFT JOIN tb_plusnaoproductdirectory d ON m.`NEディレクトリID` = d.`NEディレクトリID`
      LEFT JOIN tb_mainproducts_importability imp ON pci.daihyo_syohin_code = imp.daihyo_syohin_code
      LEFT JOIN 
        (
          SELECT
            i.`商品コード`
            , SUM(i.regular) AS regular_sum
          FROM tb_individualorderhistory i
          GROUP BY i.`商品コード`
          HAVING regular_sum = 0
        ) T ON i.商品コード = T.商品コード
      WHERE 1
        {$wheresStr}
      ORDER BY {$orderBy}
EOD;
    $stmt = $dbMain->prepare($sql);
    if ($params) {
      foreach($params as $k => $v) {
        $stmt->bindValue($k, $v, \PDO::PARAM_STR);
      }
    }
    $stmt->execute();

    return $stmt;
  }

  /**
   * 商品諸元取得
   * @param array $codeList 商品コードリスト
   * @return array
   */
  public function getProductSpecList($codeList)
  {
    $db = $this->getConnection('main');

    if (!$codeList) {
      return [];
    }

    foreach ($codeList as $i => $code) {
      $codeList[$i] = $db->quote($code);
    }

    $codeStrings = implode(", ", $codeList);

    $sql = <<<EOD
      SELECT
          pci.ne_syohin_syohin_code
        , m.daihyo_syohin_code
        , cal.weight_check_need_flg
        , pci.weight
        , pci.depth
        , pci.width
        , pci.height
        , pci.description_en
        , pci.description_cn
        , pci.hint_ja
        , pci.hint_cn
      FROM tb_productchoiceitems pci 
      INNER JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
      INNER JOIN tb_mainproducts_cal cal ON m.daihyo_syohin_code = cal.daihyo_syohin_code
      WHERE pci.ne_syohin_syohin_code IN ( {$codeStrings} )
EOD;
    $stmt = $db->query($sql);
    $data = $stmt->fetchAll(\PDO::FETCH_ASSOC);
    
    // レビュー情報を追加: 1年間のレビューを取得する
    $daihyoSyohinCodeList = array_unique(array_column($data, 'daihyo_syohin_code'));
    $now = new \DateTimeImmutable();
    $from = $now->modify('-1 year');
    $condition = [
      'date_from' => $from
      , 'daihyo_syohin_code_list' => $daihyoSyohinCodeList
    ];
    /** @var TbProductReviewsRepository $reviewRepo */
    $reviewRepo = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbProductReviews');
    $reviewSummary = $reviewRepo->findProductReviewSummaryByCondition($condition);

    $result = [];
    foreach ($data as $row) {
      if (isset($reviewSummary[$row['daihyo_syohin_code']])) {
        $review = $reviewSummary[$row['daihyo_syohin_code']];
        $row['review_point_ave'] = $review['review_point_ave'];
        $row['review_point_num'] = $review['review_point_num'];
      } else {
        $row['review_point_ave'] = '';
        $row['review_point_num'] = 0;
      }
      $result[$row['ne_syohin_syohin_code']] = $row;
    }
    return $result;
  }


  /**
   * 発注伝票分割
   * @param TbIndividualorderhistory $parentOrder
   * @param int $moveNum
   * @return TbIndividualorderhistory
   */
  public function splitOrder($parentOrder, $moveNum)
  {
    // 数量チェック
    if (!$moveNum) {
      throw new \RuntimeException('分割数が指定されていません。');
    }
    if ($parentOrder->getRemainNum() < $moveNum) {
      throw new \RuntimeException('分割できるのは注残数までです。');
    }
    if ($parentOrder->getOrderNum() <= $moveNum) {
      throw new \RuntimeException('発注数が0になる分割はできません。');
    }

    $em = $this->getEntityManager();
    $em->beginTransaction();

    $db = $em->getConnection();

    // 元発注明細
    $parentOrder->setOrderNum($parentOrder->getOrderNum() - $moveNum);
    // $parentOrder->recalculateRemainNum(); // generated column 実装により削除予定
    if ($parentOrder->getRegularNum() < 0) {
      throw new \RuntimeException('注残がマイナスになる分割はできません。 [' . $parentOrder->getId() . '][' . $parentOrder->getRegularNum() . ']');
    }

    $em->flush();

    // 新規発注明細コピー作成
    // 明細行のために SQL で作成
    $sql = <<<EOD
      INSERT INTO tb_individualorderhistory (
          `発注伝票番号`
        , `明細行`
        , shipping_type
        , `商品コード`
        , `発注数`
        /* , `注残計`   -- generated column実装により更新不可 */
        , `予定納期`
        , `備考`
        , `商品区分`
        , `受注伝票番号`
        , `仕入先cd`
        , `依頼先cd`
        , `商品区分値`
        , `発行日`
        , `option`
        , `regular`
        , `defective`
        , `shortage`
        , `quantity_price`
        , `remain_status`
        , `remain_ordered_date`
        , `remain_arrived_date`
        , `remain_waiting_date`
        , `remain_shipping_date`
        , `remain_stockout_date`
        , `remain_ordered_person`
        , `remain_arrived_person`
        , `remain_waiting_person`
        , `remain_shipping_person`
        , `remain_stockout_person`
        , `shipping_number`
        , `receive_order_number`
        , `support_colname`
        , `support_rowname`
        , `vendor_comment`
        , `vendor_comment_updated`
        , `vendor_comment_processed`
      )
      SELECT
          i.`発注伝票番号`
        , COALESCE(MAX(T.最大明細行), 0) + 1 AS 明細行
        , shipping_type
        , `商品コード`
        , :orderNum AS 発注数
        /* , :remainNum AS 注残数  -- generated column実装により更新不可 */
        , `予定納期`
        , `備考`
        , `商品区分`
        , `受注伝票番号`
        , `仕入先cd`
        , `依頼先cd`
        , `商品区分値`
        , `発行日`  /* 伝票番号プルダウンにまとめる関係上、同値とする（プルダウンを最小値に改修すればこれは実際の日付が望ましい？） */
        , `option`
        , 0 AS `regular`
        , 0 AS `defective`
        , 0 AS `shortage`
        , `quantity_price`
        , :remainStatus AS `remain_status` /* 未処理 */
        , NULL AS `remain_ordered_date`
        , NULL AS `remain_arrived_date`
        , NULL AS `remain_waiting_date`
        , NULL AS `remain_shipping_date`
        , NULL AS `remain_stockout_date`
        , NULL AS `remain_ordered_person`
        , NULL AS `remain_arrived_person`
        , NULL AS `remain_waiting_person`
        , NULL AS `remain_shipping_person`
        , NULL AS `remain_stockout_person`
        , NULL AS `shipping_number`
        , NULL AS `receive_order_number`
        , `support_colname`
        , `support_rowname`
        , NULL AS `vendor_comment`
        , NULL AS `vendor_comment_updated`
        , NULL AS `vendor_comment_processed`
      FROM tb_individualorderhistory i
      LEFT JOIN (
        SELECT
            発注伝票番号
          , MAX(明細行) AS 最大明細行
        FROM tb_individualorderhistory
        WHERE 発注伝票番号 = :voucherNumber
        GROUP BY 発注伝票番号
      ) T ON i.発注伝票番号 = T.発注伝票番号
      WHERE i.id = :voucherId
EOD;

    $stmt = $db->prepare($sql);
    $stmt->bindValue(':orderNum', intval($moveNum), \PDO::PARAM_INT);
    // $stmt->bindValue(':remainNum', intval($moveNum), \PDO::PARAM_INT); // 「分割できるのは注残数までです」の縛りにより、発注数（移動数）と同じ。 // generated column の実装により不要
    $stmt->bindValue(':remainStatus', self::REMAIN_STATUS_UNTREATED, \PDO::PARAM_STR);
    $stmt->bindValue(':voucherNumber', $parentOrder->getVoucherNumber(), \PDO::PARAM_INT);
    $stmt->bindValue(':voucherId', $parentOrder->getId(), \PDO::PARAM_INT);
    $stmt->execute();

    $newId = $db->query('SELECT last_insert_id()')->fetchColumn(0);
    $newOrder = $this->find($newId);

    if (!$newOrder) {
      throw new \RuntimeException('新規発注明細の作成に失敗しました。');
    }

    $em->commit();

    return $newOrder;
  }


  /**
   * 注残ステータス設定日 集計データ取得
   * @param string $agentCode
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getRemainDateTotalCountList($conditions = null)
  {
    $dbMain = $this->getConnection('main');
    
    $agentCode = $conditions['agentCode'];
    $dateStart = $conditions['dateStart'];
    $dateEnd = $conditions['dateEnd'];

    $agentCondition = " AND  o.依頼先cd <> -1 ";
    if ($agentCode > 0) {
      $agentCondition .= " AND o.依頼先cd = :agentCode ";
    }

    $agentCondition2 = " AND  vm.id <> -1 ";
    if ($agentCode > 0) {
      $agentCondition2 .= " AND vm.id = :agentCode ";
    }
    $sql = <<<EOD
      SELECT
          c.date
        , agent.agent_code
        , agent.agent_name
        , COALESCE(ro.row_num, 0)           AS ordered_row_num
        , COALESCE(ro.sku_num, 0)           AS ordered_sku_num
        , COALESCE(ro.order_num, 0)         AS ordered_order_num
        , COALESCE(ro.price, 0)              AS ordered_price
        , COALESCE(ra.row_num, 0)           AS arrived_row_num
        , COALESCE(ra.sku_num, 0)           AS arrived_sku_num
        , COALESCE(ra.order_num, 0)         AS arrived_order_num
        , COALESCE(ra.price, 0)              AS arrived_price
        , COALESCE(rw.row_num, 0)           AS waiting_row_num
        , COALESCE(rw.sku_num, 0)           AS waiting_sku_num
        , COALESCE(rw.order_num, 0)         AS waiting_order_num
        , COALESCE(rw.price, 0)              AS waiting_price
        , COALESCE(rs.row_num, 0)           AS shipping_row_num
        , COALESCE(rs.sku_num, 0)           AS shipping_sku_num
        , COALESCE(rs.order_num, 0)         AS shipping_order_num
        , COALESCE(rs.price, 0)              AS shipping_price
        , COALESCE(rso.row_num, 0)          AS stockout_row_num
        , COALESCE(rso.sku_num, 0)          AS stockout_sku_num
        , COALESCE(rso.order_num, 0)        AS stockout_order_num
        , COALESCE(rso.price, 0)             AS stockout_price
      FROM
      (
        SELECT
          c.date
        FROM calendar c
        WHERE c.date >= :dateStart
          AND c.date <= :dateEnd
      ) c
      INNER JOIN (
        SELECT
            vm.id AS agent_code
          , vm.name AS agent_name
        FROM purchasing_agent vm
        WHERE 1
          {$agentCondition2}
      ) agent
      LEFT JOIN (
        SELECT
            DATE_FORMAT(o.remain_ordered_date, '%Y-%m-%d') AS `date`
          , o.依頼先cd AS agent_code
          , COUNT(*) AS row_num
          , COUNT(DISTINCT o.商品コード) AS sku_num
          , SUM(o.`発注数`) AS order_num
          , SUM(COALESCE(m.genka_tnk, 0) * o.`発注数`) AS price
        FROM tb_individualorderhistory o
        LEFT JOIN tb_productchoiceitems pci ON o.`商品コード` = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE o.remain_ordered_date IS NOT NULL
          {$agentCondition}
        GROUP BY DATE_FORMAT(o.remain_ordered_date, '%Y-%m-%d')
               , o.依頼先cd
      ) ro ON c.date = ro.date AND agent.agent_code = ro.agent_code
      LEFT JOIN (
        SELECT
            DATE_FORMAT(o.remain_arrived_date, '%Y-%m-%d') AS `date`
          , o.依頼先cd AS agent_code
          , COUNT(*) AS row_num
          , COUNT(DISTINCT o.商品コード) AS sku_num
          , SUM(o.`発注数`) AS order_num
          , SUM(COALESCE(m.genka_tnk, 0) * o.`発注数`) AS price
        FROM tb_individualorderhistory o
        LEFT JOIN tb_productchoiceitems pci ON o.`商品コード` = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE o.remain_arrived_date IS NOT NULL
          {$agentCondition}
        GROUP BY DATE_FORMAT(o.remain_arrived_date, '%Y-%m-%d')
               , o.依頼先cd
      ) ra ON c.date = ra.date AND agent.agent_code = ra.agent_code
      LEFT JOIN (
        SELECT
            DATE_FORMAT(o.remain_waiting_date, '%Y-%m-%d') AS `date`
          , o.依頼先cd AS agent_code
          , COUNT(*) AS row_num
          , COUNT(DISTINCT o.商品コード) AS sku_num
          , SUM(o.`発注数`) AS order_num
          , SUM(COALESCE(m.genka_tnk, 0) * o.`発注数`) AS price
        FROM tb_individualorderhistory o
        LEFT JOIN tb_productchoiceitems pci ON o.`商品コード` = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE o.remain_waiting_date IS NOT NULL
          {$agentCondition}
        GROUP BY DATE_FORMAT(o.remain_waiting_date, '%Y-%m-%d')
               , o.依頼先cd
      ) rw ON c.date = rw.date AND agent.agent_code = rw.agent_code
      LEFT JOIN (
        SELECT
            DATE_FORMAT(o.remain_shipping_date, '%Y-%m-%d') AS `date`
          , o.依頼先cd AS agent_code
          , COUNT(*) AS row_num
          , COUNT(DISTINCT o.商品コード) AS sku_num
          , SUM(o.`発注数`) AS order_num
          , SUM(COALESCE(m.genka_tnk, 0) * o.`発注数`) AS price
        FROM tb_individualorderhistory o
        LEFT JOIN tb_productchoiceitems pci ON o.`商品コード` = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE o.remain_shipping_date IS NOT NULL
          {$agentCondition}
        GROUP BY DATE_FORMAT(o.remain_shipping_date, '%Y-%m-%d')
               , o.依頼先cd
      ) rs ON c.date = rs.date AND agent.agent_code = rs.agent_code
      LEFT JOIN (
        SELECT
            DATE_FORMAT(o.remain_stockout_date, '%Y-%m-%d') AS `date`
          , o.依頼先cd AS agent_code
          , COUNT(*) AS row_num
          , COUNT(DISTINCT o.商品コード) AS sku_num
          , SUM(o.`発注数`) AS order_num
          , SUM(COALESCE(m.genka_tnk, 0) * o.`発注数`) AS price
        FROM tb_individualorderhistory o
        LEFT JOIN tb_productchoiceitems pci ON o.`商品コード` = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE o.remain_stockout_date IS NOT NULL
          {$agentCondition}
        GROUP BY DATE_FORMAT(o.remain_stockout_date, '%Y-%m-%d')
               , o.依頼先cd
      ) rso ON c.date = rso.date AND agent.agent_code = rso.agent_code
      ORDER BY c.date DESC, agent.agent_code
EOD;
    $stmt = $dbMain->prepare($sql);
      $stmt->bindValue(':dateStart', $dateStart);
      $stmt->bindValue(':dateEnd', $dateEnd);
    if ($agentCode > 0) {
      $stmt->bindValue(':agentCode', $agentCode);
    }
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * 注残ステータス設定日 集計データ取得
   * @param $agentCode
   * @param \DateTimeInterface $date
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getRemainDateTotalCountListByPerson($agentCode, \DateTimeInterface $date = null, \DateTimeInterface $dateFrom = null, \DateTimeInterface $dateTo = null)
  {
    $dbMain = $this->getConnection('main');

    $dateString = $date ? $date->format('Y-m-d') : '';

    $param = [];
    $ordered = [];
    $arrived = [];
    $waiting = [];
    $shipping = [];
    $stockout = [];
    
    $ordered[] = "o.依頼先cd <> -1";
    $arrived[] = "o.依頼先cd <> -1";
    $waiting[] = "o.依頼先cd <> -1";
    $shipping[] = "o.依頼先cd <> -1";
    $stockout[] = "o.依頼先cd <> -1";
    
    if ($agentCode > 0) {
      $ordered[] = "o.依頼先cd = :agentCode";
      $arrived[] = "o.依頼先cd = :agentCode";
      $waiting[] = "o.依頼先cd = :agentCode";
      $shipping[] = "o.依頼先cd = :agentCode";
      $stockout[] = "o.依頼先cd = :agentCode";
      
      $param['agentCode'] = $agentCode;
    }

    if ($date) {
      $ordered[] = "o.remain_ordered_date BETWEEN :dateBegin AND :dateEnd";
      $arrived[] = "o.remain_arrived_date BETWEEN :dateBegin AND :dateEnd";
      $waiting[] = "o.remain_waiting_date BETWEEN :dateBegin AND :dateEnd";
      $shipping[] = "o.remain_shipping_date BETWEEN :dateBegin AND :dateEnd";
      $stockout[] = "o.remain_stockout_date BETWEEN :dateBegin AND :dateEnd";

      $param['dateBegin'] = $date->format('Y-m-d 00:00:00');
      $param['dateEnd'] = $date->format('Y-m-d 23:59:59');

    } else {
      if ($dateFrom) {
        $ordered[] = "o.remain_ordered_date >= :dateRangeBegin";
        $arrived[] = "o.remain_arrived_date >= :dateRangeBegin";
        $waiting[] = "o.remain_waiting_date >= :dateRangeBegin";
        $shipping[] = "o.remain_shipping_date >= :dateRangeBegin";
        $stockout[] = "o.remain_stockout_date >= :dateRangeBegin";

        $param['dateRangeBegin'] = $dateFrom->format('Y-m-d 00:00:00');
      }

      if ($dateTo) {
        $ordered[] = "o.remain_ordered_date <= :dateRangeEnd";
        $arrived[] = "o.remain_arrived_date <= :dateRangeEnd";
        $waiting[] = "o.remain_waiting_date <= :dateRangeEnd";
        $shipping[] = "o.remain_shipping_date <= :dateRangeEnd";
        $stockout[] = "o.remain_stockout_date <= :dateRangeEnd";

        $param['dateRangeEnd'] = $dateTo->format('Y-m-d 23:59:59');
      }
    }
    $orderedDateCondition = $ordered ? sprintf(' AND ( %s )', implode(' AND ', $ordered)) : '';
    $arrivedDateCondition = $arrived ? sprintf(' AND ( %s )', implode(' AND ', $arrived)) : '';
    $waitingDateCondition = $waiting ? sprintf(' AND ( %s )', implode(' AND ', $waiting)) : '';
    $shippingDateCondition = $shipping ? sprintf(' AND ( %s )', implode(' AND ', $shipping)) : '';
    $stockoutDateCondition = $stockout ? sprintf(' AND ( %s )', implode(' AND ', $stockout)) : '';

    $sql = <<<EOD
      SELECT
          :date AS `date`
        , p.person
        , COALESCE(ro.row_num, 0)    AS ordered_row_num
        , COALESCE(ro.sku_num, 0)    AS ordered_sku_num
        , COALESCE(ro.order_num, 0)  AS ordered_order_num
        , COALESCE(ro.price, 0)      AS ordered_price

        , COALESCE(ra.row_num, 0)    AS arrived_row_num
        , COALESCE(ra.sku_num, 0)    AS arrived_sku_num
        , COALESCE(ra.order_num, 0)  AS arrived_order_num
        , COALESCE(ra.price, 0)      AS arrived_price

        , COALESCE(rw.row_num, 0)    AS waiting_row_num
        , COALESCE(rw.sku_num, 0)    AS waiting_sku_num
        , COALESCE(rw.order_num, 0)  AS waiting_order_num
        , COALESCE(rw.price, 0)      AS waiting_price

        , COALESCE(rs.row_num, 0)    AS shipping_row_num
        , COALESCE(rs.sku_num, 0)    AS shipping_sku_num
        , COALESCE(rs.order_num, 0)  AS shipping_order_num
        , COALESCE(rs.price, 0)      AS shipping_price

        , COALESCE(rso.row_num, 0)   AS stockout_row_num
        , COALESCE(rso.sku_num, 0)   AS stockout_sku_num
        , COALESCE(rso.order_num, 0) AS stockout_order_num
        , COALESCE(rso.price, 0)     AS stockout_price

      FROM
      (
        SELECT
           DISTINCT o.remain_ordered_person AS person
        FROM tb_individualorderhistory o
        WHERE 1
              {$orderedDateCondition}
        UNION
        SELECT
           DISTINCT o.remain_arrived_person AS person
        FROM tb_individualorderhistory o
        WHERE 1
              {$arrivedDateCondition}
        UNION
        SELECT
           DISTINCT o.remain_waiting_person AS person
        FROM tb_individualorderhistory o
        WHERE 1
              {$waitingDateCondition}
        UNION
        SELECT
           DISTINCT o.remain_shipping_person AS person
        FROM tb_individualorderhistory o
        WHERE 1
              {$shippingDateCondition}
        UNION
        SELECT
           DISTINCT o.remain_stockout_person AS person
        FROM tb_individualorderhistory o
        WHERE 1
              {$stockoutDateCondition}
      ) p
      LEFT JOIN (
        SELECT
            o.remain_ordered_person AS person
          , COUNT(*) AS row_num
          , COUNT(DISTINCT o.商品コード) AS sku_num
          , SUM(o.`発注数`) AS order_num
          , SUM(COALESCE(m.genka_tnk, 0) * o.`発注数`) AS price
        FROM tb_individualorderhistory o
        LEFT JOIN tb_productchoiceitems pci ON o.`商品コード` = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE o.remain_ordered_date IS NOT NULL
              {$orderedDateCondition}
        GROUP BY o.remain_ordered_person
      ) ro ON p.person = ro.person
      LEFT JOIN (
        SELECT
            o.remain_arrived_person AS person
          , COUNT(*) AS row_num
          , COUNT(DISTINCT o.商品コード) AS sku_num
          , SUM(o.`発注数`) AS order_num
          , SUM(COALESCE(m.genka_tnk, 0) * o.`発注数`) AS price
        FROM tb_individualorderhistory o
        LEFT JOIN tb_productchoiceitems pci ON o.`商品コード` = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE o.remain_arrived_date IS NOT NULL
              {$arrivedDateCondition}
        GROUP BY o.remain_arrived_person
      ) ra ON p.person = ra.person
      LEFT JOIN (
        SELECT
            o.remain_waiting_person AS person
          , COUNT(*) AS row_num
          , COUNT(DISTINCT o.商品コード) AS sku_num
          , SUM(o.`発注数`) AS order_num
          , SUM(COALESCE(m.genka_tnk, 0) * o.`発注数`) AS price
        FROM tb_individualorderhistory o
        LEFT JOIN tb_productchoiceitems pci ON o.`商品コード` = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE o.remain_waiting_date IS NOT NULL
              {$waitingDateCondition}
        GROUP BY o.remain_waiting_person
      ) rw ON p.person = rw.person
      LEFT JOIN (
        SELECT
            o.remain_shipping_person AS person
          , COUNT(*) AS row_num
          , COUNT(DISTINCT o.商品コード) AS sku_num
          , SUM(o.`発注数`) AS order_num
          , SUM(COALESCE(m.genka_tnk, 0) * o.`発注数`) AS price
        FROM tb_individualorderhistory o
        LEFT JOIN tb_productchoiceitems pci ON o.`商品コード` = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE o.remain_shipping_date IS NOT NULL
              {$shippingDateCondition}
        GROUP BY o.remain_shipping_person
      ) rs ON p.person = rs.person
      LEFT JOIN (
        SELECT
            o.remain_stockout_person AS person
          , COUNT(*) AS row_num
          , COUNT(DISTINCT o.商品コード) AS sku_num
          , SUM(o.`発注数`) AS order_num
          , SUM(COALESCE(m.genka_tnk, 0) * o.`発注数`) AS price
        FROM tb_individualorderhistory o
        LEFT JOIN tb_productchoiceitems pci ON o.`商品コード` = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        WHERE o.remain_stockout_date IS NOT NULL
              {$stockoutDateCondition}
        GROUP BY o.remain_stockout_person
      ) rso ON p.person = rso.person
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':date', $dateString, \PDO::PARAM_STR);
    foreach($param as $k => $v) {
      $stmt->bindValue($k, $v, \PDO::PARAM_STR);
    }

    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }



  /**
   * 仕入・注残一覧画面（管理側） データ取得
   * @param array $conditions
   * @param array $orders
   * @param int $page
   * @param int $limit
   * @param string $resultType 'pagination'|'stmt'
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  public function findIndividualOrders($conditions = [], $orders = [], $page = 1, $limit = 100, $resultType = 'pagination')
  {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    $dbMain = $this->getConnection('main');
    /** @var DBCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    $addWheres = [];
    $params = [];

    // 絞込：発注伝票番号
    if (isset($conditions['orderNumber']) && strlen($conditions['orderNumber'])) {
      $addWheres[] = 'i.発注伝票番号 = :orderNumber';
      $params[':orderNumber'] = $conditions['orderNumber'];
    }
    // 絞込：発送番号
    if (isset($conditions['shippingNumber']) && strlen($conditions['shippingNumber'])) {
      if (isset($conditions['shippingNumberMode']) && $conditions['shippingNumberMode'] == 'complete') {
        $addWheres[] = 'i.shipping_number = :shippingNumber'; // MySQLの VARCHAR '=' は空白を無視する。が、それでよい。完全一致でも空白の差は一致として許容。
        $params[':shippingNumber'] = $conditions['shippingNumber'];
      } else {
        $addWheres[] =  sprintf('i.shipping_number LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString(trim($conditions['shippingNumber'])) . '%'));
      }
    }
    // 絞込：商品コード
    if (isset($conditions['syohinCode']) && strlen($conditions['syohinCode'])) {
      $addWheres[] = sprintf('i.商品コード LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString($conditions['syohinCode']) . '%'));
    }
    // 絞込：仕入先
    if (isset($conditions['sireCode']) && strlen($conditions['sireCode'])) {
      $addWheres[] = 'i.仕入先cd = :sireCode';
      $params[':sireCode'] = $conditions['sireCode'];
    }
    // 絞込：依頼先
    if (isset($conditions['agentCode']) && strlen($conditions['agentCode'])) {
      $addWheres[] = 'i.依頼先cd = :agentCode';
      $params[':agentCode'] = $conditions['agentCode'];
    }
    // 絞込：依頼先状態
    if (isset($conditions['agentStatus']) && strlen($conditions['agentStatus'])) {
      $addWheres[] = 'i.remain_status = :agentStatus';
      $params[':agentStatus'] = $conditions['agentStatus'];
    }
    // 絞込：発送種別
    if (isset($conditions['shippingType']) && strlen($conditions['shippingType'])) {
      $addWheres[] = 'i.shipping_type = :shippingType';
      $params[':shippingType'] = $conditions['shippingType'];
    }

    // 絞込：備考
    if (isset($conditions['comment']) && strlen($conditions['comment'])) {
      $addWheres[] = sprintf('i.備考 LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString($conditions['comment']) . '%'));
    }

    if ($addWheres) {
      foreach($addWheres as $i => $where) {
        $addWheres[$i] = sprintf('( %s )', $where);
      }
    }
    $addWhereSql = $addWheres ? (' AND ' . sprintf('( %s )', implode(' AND ', $addWheres))) : '';


    $sqlSelect = <<<EOD
      SELECT
          i.id
        , i.発行日
        , i.予定納期
        , i.発注伝票番号
        , i.明細行
        , i.発注数
        , i.商品コード
        , m.daihyo_syohin_code
        , i.仕入先cd
        , v1.sire_name AS 仕入先名
        , i.備考
        , i.注残計
        , i.regular
        , i.defective
        , i.shortage
        , i.quantity_price
        , i.依頼先cd
        , a.name AS 依頼先名
        , i.remain_status
        , i.remain_ordered_date
        , i.remain_waiting_date
        , i.remain_shipping_date
        , i.remain_stockout_date
        , i.shipping_type
        , i.shipping_number
        , i.support_colname
        , i.support_rowname
        , CASE i.remain_status
            WHEN 'UNTREATED' THEN '未処理'
            WHEN 'ORDERED' THEN '発注済'
            WHEN 'ARRIVED' THEN '入荷済'
            WHEN 'WAITED' THEN '出荷待'
            WHEN 'SHIPPED' THEN '出荷済'
            WHEN 'SHORTAGE' THEN '欠品'
            ELSE ''
          END AS 依頼先状態
        , CASE i.remain_status
            WHEN 'UNTREATED' THEN 1
            WHEN 'ORDERED' THEN 2
            WHEN 'ARRIVED' THEN 3
            WHEN 'WAITED' THEN 4
            WHEN 'SHIPPED' THEN 5
            WHEN 'SHORTAGE' THEN 6
            ELSE 99
          END AS 依頼先状態ORDER
        , i.vendor_comment

        , pci.colname
        , pci.rowname
        , image.directory AS image_directory
        , image.filename AS image_filename
        , a.urls
EOD;
    $sqlBody = <<<EOD
      FROM tb_individualorderhistory AS i
      LEFT JOIN tb_vendormasterdata v1 ON i.仕入先cd = v1.sire_code
      LEFT JOIN purchasing_agent a ON i.依頼先cd = a.id
      LEFT JOIN (
        tb_productchoiceitems pci
        INNER JOIN tb_mainproducts       m ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        INNER JOIN tb_mainproducts_cal cal ON pci.daihyo_syohin_code = cal.daihyo_syohin_code
        LEFT JOIN product_images     image ON pci.daihyo_syohin_code = image.daihyo_syohin_code
                                          AND image.code = 'p001'

      ) ON i.商品コード = pci.ne_syohin_syohin_code
      LEFT JOIN (
        SELECT
            va.daihyo_syohin_code
          , GROUP_CONCAT(va.sire_adress ORDER BY va.vendoraddress_CD SEPARATOR ' ') AS urls
        FROM tb_vendoraddress va
        WHERE va.stop = 0
        GROUP BY va.daihyo_syohin_code
      ) a ON pci.daihyo_syohin_code = a.daihyo_syohin_code
      WHERE 1
        AND i.注残計 >= :remainNum
        {$addWhereSql}
EOD;
    $params[':remainNum'] = $conditions['remainNum'];


    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('id', 'id', 'integer');
    $rsm->addScalarResult('発行日', '発行日', 'string');
    $rsm->addScalarResult('予定納期', '予定納期', 'string');
    $rsm->addScalarResult('発注伝票番号', '発注伝票番号', 'string');
    $rsm->addScalarResult('明細行', '明細行', 'integer');
    $rsm->addScalarResult('発注数', '発注数', 'integer');
    $rsm->addScalarResult('商品コード', '商品コード', 'string');
    $rsm->addScalarResult('daihyo_syohin_code', 'daihyo_syohin_code', 'string');
    $rsm->addScalarResult('仕入先cd', '仕入先cd', 'string');
    $rsm->addScalarResult('仕入先名', '仕入先名', 'string');
    $rsm->addScalarResult('備考', '備考', 'string');
    $rsm->addScalarResult('注残計', '注残計', 'integer');
    $rsm->addScalarResult('regular', 'regular', 'integer');
    $rsm->addScalarResult('defective', 'defective', 'integer');
    $rsm->addScalarResult('shortage', 'shortage', 'integer');
    $rsm->addScalarResult('quantity_price', 'quantity_price', 'integer');
    $rsm->addScalarResult('依頼先cd', '依頼先cd', 'string');
    $rsm->addScalarResult('依頼先名', '依頼先名', 'string');
    $rsm->addScalarResult('remain_status', 'remain_status', 'string');
    $rsm->addScalarResult('remain_ordered_date', 'remain_ordered_date', 'string');
    $rsm->addScalarResult('remain_waiting_date', 'remain_waiting_date', 'string');
    $rsm->addScalarResult('remain_shipping_date', 'remain_shipping_date', 'string');
    $rsm->addScalarResult('remain_stockout_date', 'remain_stockout_date', 'string');
    $rsm->addScalarResult('shipping_type', 'shipping_type', 'string');
    $rsm->addScalarResult('shipping_number', 'shipping_number', 'string');
    $rsm->addScalarResult('support_colname', 'support_colname', 'string');
    $rsm->addScalarResult('support_rowname', 'support_rowname', 'string');
    $rsm->addScalarResult('依頼先状態', '依頼先状態', 'string');
    $rsm->addScalarResult('依頼先状態ORDER', '依頼先状態ORDER', 'string');
    $rsm->addScalarResult('vendor_comment', 'vendor_comment', 'string');

    $rsm->addScalarResult('colname', 'colname', 'string');
    $rsm->addScalarResult('rowname', 'rowname', 'string');
    $rsm->addScalarResult('image_directory', 'image_directory', 'string');
    $rsm->addScalarResult('image_filename', 'image_filename', 'string');
    $rsm->addScalarResult('urls', 'urls', 'string');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $resultOrders = [];
    $defaultOrders = [
        'i.予定納期' => 'ASC'
      , 'i.発注伝票番号' => 'ASC'
      , 'i.商品コード' => 'ASC'
      , 'i.明細行' => 'ASC'
    ];

    if ($orders) {
      foreach($orders as $k => $v) {
        switch($k) {
          case 'orderNumber':
            $k = 'i.発注伝票番号';
            break;
          case 'sireName':
            $k = 'v1.sire_name';
            break;
          case 'deliveryDate':
            $k = 'i.予定納期';
            break;
          case 'syohinCode':
            $k = 'i.商品コード';
            break;
          case 'remainNum':
            $k = 'i.注残計';
            break;
        }

        $resultOrders[$k] = $v;
        if (isset($defaultOrders[$k])) {
          unset($defaultOrders[$k]);
        }
      }
    }
    $query->setOrders(array_merge($resultOrders, $defaultOrders));
    // $logger->dump(array_merge($resultOrders, $defaultOrders));

    $result = null;
    if ($resultType === 'stmt') {
      $result = $query->select();

    } else {
      /** @var \Knp\Component\Pager\Paginator $paginator */
      $paginator  = $this->getContainer()->get('knp_paginator');
      /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
      $pagination = $paginator->paginate(
          $query /* query NOT result */
        , $page
        , $limit
      );

      $result = $pagination;
    }

    return $result;
  }
  
  /**
   * 商品フラグ一括更新処理
   * @param Request $request
   * @return JsonResponse
   */
  public function productListBulkUpdateStatus($agentCode, $conditions = [],$updates = [])
  {
    $dbMain = $this->getConnection('main');
    /** @var DBCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');
    
    $status = $updates['status'];
    $date = $updates['date'];
    $person = $updates['person'];
    $addWheres = [];
    $params = [];
    
    // 現ステータス
    switch($status){
      case self::REMAIN_STATUS_ORDERED:
        $addWheres[] = " i.remain_status <> '".self::REMAIN_STATUS_ORDERED."' ";
      case self::REMAIN_STATUS_ARRIVED:
        $addWheres[] = " i.remain_status <> '".self::REMAIN_STATUS_ARRIVED."' ";
      case self::REMAIN_STATUS_WAITED:
        $addWheres[] = " i.remain_status <> '".self::REMAIN_STATUS_WAITED."' ";
      case self::REMAIN_STATUS_SHIPPED:
        $addWheres[] = " i.remain_status <> '".self::REMAIN_STATUS_SHIPPED."' ";
      default:
        break;
    }
    
    // 対象項目名
    $update_column = self::$REMAIN_COLUMNS[$status];
    
    // 依頼先コード
    if ($agentCode > -1) {
      $addWheres[] = ' i.`依頼先cd` = :agentCode ';
      $params[':agentCode'] = array(
          'val' => $agentCode,
          'type' => \PDO::PARAM_INT,
      );
    }

    // 商品コード
    if (isset($conditions['syohin_code']) && strlen($conditions['syohin_code'])) {
      $addWheres[] = ' i.商品コード LIKE :syohinCode ';
      $params[':syohinCode'] = array(
          'val' => '%' . $commonUtil->escapeLikeString($conditions['syohin_code']) . '%',
          'type' => \PDO::PARAM_STR,
      );
    }

    // 発注日 FROM
    if (isset($conditions['order_date_from']) && preg_match('/^\d{1,4}-\d{1,2}-\d{1,2}$/', $conditions['order_date_from'])) {
      $addWheres[] = ' i.発行日 >= :orderDateFrom ';
      $params[':orderDateFrom'] = array(
          'val' => $conditions['order_date_from'],
          'type' => \PDO::PARAM_STR,
      );
    }
    // 発注日 TO
    if (isset($conditions['order_date_to']) && preg_match('/^\d{1,4}-\d{1,2}-\d{1,2}$/', $conditions['order_date_to'])) {
      $addWheres[] = ' i.発行日 <= :orderDateTo ';
      $params[':orderDateTo'] = array(
          'val' => $conditions['order_date_to'],
          'type' => \PDO::PARAM_STR,
      );
    }

    // 絞込：発注伝票番号
    if (isset($conditions['voucher_number']) && strlen($conditions['voucher_number'])) {
      $addWheres[] = 'i.発注伝票番号 = :orderNumber ';
      $params[':orderNumber'] = array(
          'val' => $conditions['voucher_number'],
          'type' => \PDO::PARAM_INT,
      );
    }
    
    // 絞込：依頼先状態
    if (isset($conditions['status']) && strlen($conditions['status'])) {
      $addWheres[] = 'i.remain_status = :agentStatus ';
      $params[':agentStatus'] = array(
          'val' => $conditions['status'],
          'type' => \PDO::PARAM_STR,
      );
    }
    
    // 絞込：依頼先状態
    if (isset($conditions['vendor_comment']) && strlen($conditions['vendor_comment'])) {
      $addWheres[] = "i.vendor_comment IS NOT NULL AND i.vendor_comment <> ''";
    }
    
    // 未引当の有無
    if (isset($conditions['unallocated']) &&  strlen($conditions['unallocated'])) {
      $addWheres[] = ' i.unallocated_flg = :unallocatedFlg ';
      $params[':unallocatedFlg'] = array(
          'val' => $conditions['unallocated'],
          'type' => \PDO::PARAM_STR,
      );
    }

    // 絞込：発送種別
    if (isset($conditions['shipping_type']) && strlen($conditions['shipping_type'])) {
      $addWheres[] = ' i.shipping_type = :shipping_type ';
      $params[':shipping_type'] = array(
          'val' => $conditions['shipping_type'],
          'type' => \PDO::PARAM_INT,
      );
    }

    // 絞込：発送番号
    if (isset($conditions['shipping_number']) && strlen($conditions['shipping_number'])) {
      $addWheres[] =  sprintf('i.shipping_number LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString(trim($conditions['shipping_number'])) . '%'));
    }

    // 絞込：受注番号
    if (isset($conditions['receive_order_number']) && strlen($conditions['receive_order_number'])) {
      $addWheres[] =  sprintf('i.receive_order_number LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString(trim($conditions['receive_order_number'])) . '%'));
    }

    // 絞込：入庫番号
    if (isset($conditions['warehousing_number']) && strlen($conditions['warehousing_number'])) {
      $addWheres[] =  sprintf('i.warehousing_number LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString(trim($conditions['warehousing_number'])) . '%'));
    }

    // 絞込：出庫番号
    if (isset($conditions['shipping_operation_number']) && strlen($conditions['shipping_operation_number'])) {
      $addWheres[] =  sprintf('i.shipping_operation_number LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString(trim($conditions['shipping_operation_number'])) . '%'));
    }
    
    // 絞込：警告・注意あり
    if (isset($conditions['alert']) && strlen($conditions['alert'])) {
      $regularNoneWhere = 'T.regular_sum = 0';
      $unsetWeightSizeWhere = '(pci.weight = 0 or pci.depth = 0 or pci.width = 0 or pci.height = 0)';
      $unsetMaterialDescriptionWhere = <<<EOD
        (pci.description_en IS NULL or pci.description_en = ''
        or pci.description_cn IS NULL or pci.description_cn = ''
        or pci.hint_ja IS NULL or pci.hint_ja = ''
        or pci.hint_cn IS NULL or pci.hint_cn = '')
EOD;
      if ($conditions['alert'] === 'ALL') {
        $addWheres[] = "($regularNoneWhere or $unsetWeightSizeWhere or $unsetMaterialDescriptionWhere)";
      } else if ($conditions['alert'] === 'REGULAR_NONE') {
        $addWheres[] = $regularNoneWhere;
      } else if ($conditions['alert'] === 'UNSET_WEIGHT_SIZE') {
        $addWheres[] = $unsetWeightSizeWhere;
      } else if ($conditions['alert'] === 'UNSET_MATERIAL_DESCRIPTION') {
        $addWheres[] = $unsetMaterialDescriptionWhere;
      }
    }

    $temp = array();

    // 絞込：担当者
    if (isset($conditions['person']) && strlen($conditions['person'])) {
      $temp[] = sprintf('i.remain_ordered_person LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString(trim($conditions['person'])) . '%'));
      $temp[] = sprintf('i.remain_arrived_person LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString(trim($conditions['person'])) . '%'));
      $temp[] = sprintf('i.remain_waiting_person LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString(trim($conditions['person'])) . '%'));
      $temp[] = sprintf('i.remain_shipping_person LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString(trim($conditions['person'])) . '%'));
      $temp[] = sprintf('i.remain_stockout_person LIKE %s', $dbMain->quote('%' . $commonUtil->escapeLikeString(trim($conditions['person'])) . '%'));
    
      $addWheres[] = $temp ? ( sprintf('( %s )', implode(' OR ', $temp))) : '';
    }

    $addWhereSql = $addWheres ? (' AND ' . sprintf('( %s )', implode(' AND ', $addWheres))) : '';
    
    $sql = <<<EOD
      UPDATE
          tb_individualorderhistory i
          LEFT JOIN tb_productchoiceitems pci
              ON i.商品コード = pci.ne_syohin_syohin_code
          LEFT JOIN 
              (
                  SELECT
                      i.`商品コード`
                      , SUM(i.regular) AS regular_sum
                  FROM tb_individualorderhistory i
                  GROUP BY i.`商品コード`
                  HAVING regular_sum = 0
               ) T 
               ON i.商品コード = T.商品コード
      SET
          i.remain_status = :status,
          i.remain_{$update_column}_date = :date,
          i.remain_{$update_column}_person = :person
      WHERE
          1
          {$addWhereSql}
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':status', $updates['status'], \PDO::PARAM_STR);
    $stmt->bindValue(':date', $updates['date'], \PDO::PARAM_STR);
    $stmt->bindValue(':person', $updates['person'], \PDO::PARAM_STR);
    foreach($params as $k => $v) {
      $stmt->bindValue($k, $v['val'], $v['type']);
    }
    $stmt->execute();

  }

  public function fetchUnallocatedShippingList($shippingNumbers = array())
  {
    $dbMain = $this->getConnection('main');
    $whereShippingNumQuery = '';
    if (!empty($shippingNumbers)) {
      $whereShippingNumQuery = 'AND I.shipping_number IN(?)';
    }
    
    $sql = <<<EOD
    SELECT I.id,
            I.shipping_number AS shippingSlipNumber,
            I.shipping_operation_number AS shippingOperationNumber,
            DATE_FORMAT(MAX(I.remain_waiting_date),'%Y/%m/%d') AS waitDate, 
            DATE_FORMAT(MAX(I.remain_shipping_date),'%Y/%m/%d') AS shipDate, 
            Agent.name AS requesterName,
            LEFT(I.checklist_comment, 50) AS checkListComment,
            MAX(I.checklist_nw) AS checkListNw,
            MAX(I.checklist_meas) AS checkListMeas,
            MAX(I.unallocated_flg) as unallocatedFlg
    FROM tb_individualorderhistory I
      LEFT JOIN purchasing_agent Agent ON I.依頼先cd = Agent.id 
    WHERE I.shipping_number != ''
      AND I.`注残計` > 0
      AND Agent.name != ''
      AND (DATE_FORMAT(I.remain_shipping_date,'%Y/%m/%d') <> ''  
        OR DATE_FORMAT(I.remain_waiting_date,'%Y/%m/%d') <> ''  )
      ${whereShippingNumQuery}
    GROUP BY 
          I.shipping_number,
          Agent.name
    ORDER BY
          I.shipping_number
EOD;
    if (!empty($shippingNumbers)) {
      $stmt = $dbMain->executeQuery(
          $sql,
          array($shippingNumbers),
          array(\Doctrine\DBAL\Connection::PARAM_STR_ARRAY)
      );
    } else {
      $stmt = $dbMain->executeQuery($sql);
    }
    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * 依頼先の注残情報を取得
   * @return array
   */
  public function fetchRemainOrderList($agent)
  {
    $qb = $this->createQueryBuilder('i');
    $qb->select('i.voucher_number, i.shipping_type, i.agent_code, i.order_date, i.remain_status')
      ->addSelect('pa.login_name')
      ->addSelect('pci.daihyoSyohinCode')
      ->addSelect('m.image_p1_filename AS image_name, m.image_p1_directory AS image_dir')
      ->addSelect('c.note')
      ->addSelect('MIN(i.order_date) AS min_order_date')
      ->addSelect('MIN(i.remain_ordered_date) AS min_remain_ordered_date')
      ->addSelect('MIN(i.remain_arrived_date) AS min_remain_arrived_date')
      ->addSelect('MIN(i.remain_waiting_date) AS min_remain_waiting_date')
      ->addSelect('MIN(i.remain_shipping_date) AS min_remain_shipping_date')
      ->addSelect('MIN(i.remain_stockout_date) AS min_remain_stockout_date')
      ->addSelect('SUM(i.remain_num) AS total_remain_num')
      // 未処理 > 発注済み > 入荷済み > 出荷待ち > 発送済み > 欠品 の順で ORDER BY で利用するためHIDDENで取得
      ->addSelect("( CASE 
          WHEN i.remain_status = 'UNTREATED' THEN 0
          WHEN i.remain_status = 'ORDERED'   THEN 1 
          WHEN i.remain_status = 'ARRIVED'   THEN 2 
          WHEN i.remain_status = 'WAITED'    THEN 3 
          WHEN i.remain_status = 'SHIPPED'   THEN 4
        ELSE 5 END ) AS HIDDEN RemainStatusOrder ")
      // WITHを利用して結合
      ->leftJoin('MiscBundle\Entity\PurchasingAgent', 'pa', 'WITH', 'i.agent_code = pa.id')
      ->leftJoin('MiscBundle\Entity\TbProductchoiceitems', 'pci', 'WITH', 'i.syohin_code = pci.neSyohinSyohinCode')
      ->leftJoin('MiscBundle\Entity\TbMainproducts', 'm', 'WITH', 'pci.daihyoSyohinCode = m.daihyoSyohinCode')
      ->leftJoin('MiscBundle\Entity\TbIndividualorderComment', 'c', 'WITH', 'i.voucher_number = c.order_voucher_number AND i.agent_code = c.agent_id')
      ->where('0 < i.remain_num')
      // 順序を指定のためGroupByのみ分岐内
      ->groupBy('i.voucher_number')
      ->addGroupBy('i.agent_code')
      // ステータスごとに取得する
      ->addGroupBy('i.remain_status')
      // 主な代表商品コード算出用
      ->addGroupBy('pci.daihyoSyohinCode')
      ->orderBy('i.voucher_number', 'ASC')
      ->addOrderBy('RemainStatusOrder', 'ASC');

    if ($agent->getId() !== PurchasingAgent::AGNENT_ID_All) {
      $qb->andWhere('i.agent_code = :agent_code')
        ->setParameter('agent_code', $agent->getId());
    }
    return $qb->getQuery()->getResult();
  }
  
  /**
   * 指定されたSKUリストの注残を取得して返却する。
   *
   * 注残は tb_productchoiceitems ではなく、tb_individualorderhistoryを元に直接取得する。
   * （tb_productchoiceitems の在庫系カラム除去に向けた対応）
   * v_product_stock_total または v_product_stock_order_remain を使用すればそのまま取得できるが、
   * このビューは極めて重いため、同等の処理を直接クエリ発行して実施する。
   *
   * @param array $skuList 注残を取得するSKUの配列
   * @return array SKUコードをキー、注残を値とする連想配列
   */
  public function findOrderRemain($skuList) {
    $skuListStr = "'" . implode("', '", $skuList) . "'";
    $sql = <<<EOD
      SELECT 
        pci.ne_syohin_syohin_code
        , SUM(IFNULL(i.注残計, 0)) as order_remain
      FROM 
        tb_productchoiceitems pci 
        LEFT JOIN tb_individualorderhistory i ON pci.ne_syohin_syohin_code = i.商品コード
      WHERE pci.ne_syohin_syohin_code IN ($skuListStr)
      GROUP BY pci.ne_syohin_syohin_code
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->execute();
      return $stmt->fetchAll(\PDO::FETCH_KEY_PAIR);
  }
}
