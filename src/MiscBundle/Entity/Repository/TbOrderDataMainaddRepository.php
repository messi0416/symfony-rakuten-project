<?php

namespace MiscBundle\Entity\Repository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Query\ResultSetMapping;
use forestlib\Doctrine\ORM\LimitableNativeQuery;
use MiscBundle\Util\BatchLogger;
use MiscBundle\Util\DbCommonUtil;

/**
 * TbOrderDataMainaddRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbOrderDataMainaddRepository extends BaseRepository
{
  /**
   * コンシェルジュ 未入金受注伝票 一覧取得
   * ※実装変更につき未使用。削除するまで privateとしておく
   *
   * ※ tb_order_data_mainadd を利用するが、入金催促日を入れる箱としてのみ利用。
   *    tb_order_data_mainadd が他で更新されることは期待しない。
   * ※ 利用せずに、別テーブルを作成するべきか。
   * @param array $conditions
   * @param array $orders
   * @param int $page
   * @param int $limit
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  private function findUnpaidList($conditions = [], $orders = [], $page = 1, $limit = 100)
  {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    $params = [];

    $sqlIncludeRecentReminder = '';
    if (isset($conditions['include_recent_reminder']) && $conditions['include_recent_reminder']) {
      $sqlIncludeRecentReminder = ' OR o.sun_payment_reminder = CURRENT_DATE ';
    }

    $sqlSelect = <<<EOD
      SELECT
          T.伝票番号   AS voucher_number
        , T.受注日     AS order_date
        , T.支払い方法 AS payment_method
        , T.入金状況   AS payment_type
        , T.受注数合計 AS purchase_quantity
        , o.sun_payment_reminder
        , CASE WHEN o.sun_payment_reminder IS NULL THEN '9999-99-99' ELSE o.sun_payment_reminder END  AS sort_date
EOD;
    $sqlBody = <<<EOD
      FROM (
        SELECT
            a.伝票番号
          , MAX(a.`受注日`) AS 受注日
          , MAX(a.支払方法) AS 支払い方法
          , MAX(a.`入金状況`) AS 入金状況
          , SUM(a.`受注数`) AS 受注数合計
          , SUM(a.`引当数`) AS 引当数合計
        FROM tb_sales_detail_analyze a
        WHERE
              a.`受注日` <= DATE_ADD(CURRENT_DATE, INTERVAL - 6 DAY)
          AND a.支払方法 IN ( '郵便振替', '銀行振込前払い' )
          AND a.`入金状況` = '0' /* 未入金 */
          AND a.`キャンセル区分` = '0'
          AND a.`明細行キャンセル` = '0'
        GROUP BY a.`伝票番号`
        HAVING 受注数合計 > 0
           AND 受注数合計 = 引当数合計
      ) T
      LEFT JOIN tb_order_data_mainadd o ON T.伝票番号 = o.伝票番号
      WHERE (
           o.sun_payment_reminder IS NULL
        OR o.sun_payment_reminder BETWEEN
              DATE_ADD(CURRENT_DATE, INTERVAL - 4 MONTH)
              AND
              DATE_ADD(CURRENT_DATE, INTERVAL - 6 DAY)
        {$sqlIncludeRecentReminder}
      )
EOD;

    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('order_date', 'order_date', 'string');
    $rsm->addScalarResult('voucher_number', 'voucher_number', 'string');
    $rsm->addScalarResult('sun_payment_reminder', 'sun_payment_reminder', 'string');
    $rsm->addScalarResult('payment_method', 'payment_method', 'string');
    $rsm->addScalarResult('payment_type', 'payment_type', 'string');
    $rsm->addScalarResult('purchase_quantity', 'purchase_quantity', 'integer');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $resultOrders = [];
    $defaultOrders = [
        'sort_date'  => 'ASC'
      , 'T.受注日'   => 'ASC'
      , 'T.伝票番号' => 'ASC'
    ];

    if ($orders) {
      foreach($orders as $k => $v) {
        switch($k) {
          case 'daihyo_syohin_code':
//            $k = 'o.' . $k;
            break;
        }

        $resultOrders[$k] = $v;
        if (isset($defaultOrders[$k])) {
          unset($defaultOrders[$k]);
        }
      }
    }
    $query->setOrders(array_merge($resultOrders, $defaultOrders));

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }

  /**
   * 未入金一覧 全件取得
   */
  public function getAllUnpaidList()
  {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    $dbMain = $this->getConnection('main');
    /** @var DbCommonUtil $commonUtil */

    $sql = <<<EOD
      SELECT
          T.伝票番号   AS voucher_number
        , T.受注日     AS order_date
        , T.支払い方法 AS payment_method
        , T.入金状況   AS payment_type
        , T.受注数合計 AS purchase_quantity
        , o.sun_payment_reminder
        , CASE WHEN o.sun_payment_reminder IS NULL THEN '9999-99-99' ELSE o.sun_payment_reminder END  AS sort_date
      FROM (
        SELECT
            a.伝票番号
          , MAX(a.`受注日`) AS 受注日
          , MAX(a.支払方法) AS 支払い方法
          , MAX(a.`入金状況`) AS 入金状況
          , SUM(a.`受注数`) AS 受注数合計
          , SUM(a.`引当数`) AS 引当数合計
        FROM tb_sales_detail_analyze a
        WHERE
              a.`受注日` <= DATE_ADD(CURRENT_DATE, INTERVAL - 4 DAY)
          AND a.支払方法 IN ( '郵便振替', '銀行振込前払い','auPay/auかんたん決済' )
          AND a.`入金状況` = '0' /* 未入金 */
          AND a.`キャンセル区分` = '0'
          AND a.`明細行キャンセル` = '0'
          /* -fk-, -bk- の伝票は除く（「複製」「分割」のNextEngine自動発番） */
          AND a.受注番号 NOT LIKE '%-fk-%'
          AND a.受注番号 NOT LIKE '%-bk-%'
        GROUP BY a.`伝票番号`
        HAVING 受注数合計 > 0
           AND 受注数合計 = 引当数合計
      ) T
      LEFT JOIN tb_order_data_mainadd o ON T.伝票番号 = o.伝票番号
      WHERE (
           o.sun_payment_reminder IS NULL
        OR o.sun_payment_reminder BETWEEN
              DATE_ADD(CURRENT_DATE, INTERVAL - 4 MONTH)
              AND
              DATE_ADD(CURRENT_DATE, INTERVAL - 4 DAY)
        OR o.sun_payment_reminder = CURRENT_DATE
      )
      ORDER BY sort_date ASC
             , T.受注日 ASC
             , T.伝票番号 ASC
EOD;

    $stmt = $dbMain->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(\PDO::FETCH_ASSOC);

    return $result;
  }


  /**
   * 出荷遅延 一覧取得
   * ※内部出荷予定日で対象を判定＆絞り込む式：#14092 追加改修によりいったん不使用。
   *
   * @param array $conditions
   * @param array $orders
   * @param int $page
   * @param int $limit
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  public function findShippingDelayList($conditions = [], $orders = [], $page = 1, $limit = 100)
  {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    $params = [];

    $logger->info(print_r($conditions, true));
    $sqlBorderDate = '';
    if (isset($conditions['border_date']) && strlen($conditions['border_date'])) {
      $sqlBorderDate = ' HAVING 伝票出荷予定年月日 <= :borderDate';
      $params[':borderDate'] = $conditions['border_date'];
    }

    $sqlShopNeIds = '';
    if (isset($conditions['shop_ne_ids']) && is_array($conditions['shop_ne_ids']) && count($conditions['shop_ne_ids'])) {
      $tmp = [];
      foreach($conditions['shop_ne_ids'] as $id) {
        $tmp[] = intval($id);
      }
      $sqlShopNeIds = sprintf(' AND a.店舗コード IN ( %s ) ', implode(', ', $tmp));
    }

    $sqlSelect = <<<EOD
      SELECT
          T.`伝票番号`        AS voucher_number
        , T.伝票出荷予定年月日 AS shipping_date
        , DATEDIFF(CURRENT_DATE, T.伝票出荷予定年月日) AS days_before
        , T.商品コード         AS syohin_codes
        , T.店舗名             AS shop_name
EOD;
    $sqlBody = <<<EOD
      FROM (
        SELECT
            a.`伝票番号`
          , MAX(a.出荷予定年月日) AS 伝票出荷予定年月日
          , MAX(T.商品コード) AS 商品コード
          , MAX(a.店舗名) AS 店舗名
        FROM tb_sales_detail_analyze a
        INNER JOIN (
          SELECT
              a.伝票番号
            , GROUP_CONCAT(a.`商品コード（伝票）` ORDER BY a.`商品コード（伝票）` SEPARATOR ',') AS 商品コード
          FROM tb_sales_detail_analyze AS a
          INNER JOIN tb_mainproducts AS m ON a.daihyo_syohin_code = m.daihyo_syohin_code
          WHERE a.キャンセル区分 = '0'
            AND a.明細行キャンセル= '0'
            AND a.受注数 <> 引当数
            AND a.受注状態 NOT IN ('取込情報不足', '受注メール取込済', '出荷確定済（完了）')
            AND (
                   a.支払方法 IN ('代金引換', 'ポイント全額支払い')
                OR a.入金状況 NOT IN (0, 1)
            )
            {$sqlShopNeIds}
          GROUP BY a.`伝票番号`
        ) T ON a.`伝票番号` = T.伝票番号
        GROUP BY a.`伝票番号`
        {$sqlBorderDate}
      ) AS T
EOD;

    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('voucher_number', 'voucher_number', 'string');
    $rsm->addScalarResult('shipping_date', 'shipping_date', 'string');
    $rsm->addScalarResult('days_before', 'days_before', 'integer');
    $rsm->addScalarResult('syohin_codes', 'syohin_codes', 'string');
    $rsm->addScalarResult('shop_name', 'shop_name', 'string');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $resultOrders = [];
    $defaultOrders = [
        'T.伝票出荷予定年月日' => 'ASC'
      , 'T.伝票番号'   => 'ASC'
    ];

    if ($orders) {
      foreach($orders as $k => $v) {
        switch($k) {
          case 'daihyo_syohin_code':
//            $k = 'o.' . $k;
            break;
        }

        $resultOrders[$k] = $v;
        if (isset($defaultOrders[$k])) {
          unset($defaultOrders[$k]);
        }
      }
    }
    $query->setOrders(array_merge($resultOrders, $defaultOrders));

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }


  /**
   * 出荷遅延 一覧取得
   * ※受注日で対象を判定＆手動出荷予定日で絞り込む式：#14092 追加改修により使用開始。
   *
   * 注文日から2営業日たって・起票済み～・受注数と引当数に差異がある伝票
   * ※即納販売のみの現状に合わせた仕様。取り寄せ販売を再開する場合にはまた修正が必要か
   *
   * @param array $conditions
   * @param array $orders
   * @param int $page
   * @param int $limit
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  public function findShippingDelayByOrderDateList($conditions = [], $orders = [], $page = 1, $limit = 100)
  {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    $params = [];

    $logger->info(print_r($conditions, true));

    // 入力出荷予定日範囲
    $sqlBorderDate = '';
    if (isset($conditions['border_date']) && strlen($conditions['border_date'])) {
      $sqlBorderDate = ' HAVING 入力出荷予定日 <= :borderDate';
      $params[':borderDate'] = $conditions['border_date'];
    }

    // 店舗
    $sqlShopNeIds = '';
    if (isset($conditions['shop_ne_ids']) && is_array($conditions['shop_ne_ids']) && count($conditions['shop_ne_ids'])) {
      $tmp = [];
      foreach($conditions['shop_ne_ids'] as $id) {
        $tmp[] = intval($id);
      }
      $sqlShopNeIds = sprintf(' AND a.店舗コード IN ( %s ) ', implode(', ', $tmp));
    }

    // 入力出荷予定日有無 ※警告判定用の件数取得に利用
    $sqlInputShippingDateExists = '';
    if (isset($conditions['input_shipping_date_exists']) && boolval($conditions['input_shipping_date_exists']) === true) {
      $sqlInputShippingDateExists = ' AND a.出荷予定日 IS NOT NULL ';
    }

    $sqlSelect = <<<EOD
      SELECT
          T.`伝票番号`        AS voucher_number
        , T.受注日            AS order_date
        , CASE WHEN T.入力出荷予定日 = '0000-00-00 00:00:00' THEN '' ELSE T.入力出荷予定日 END AS input_shipping_date
        , T.伝票出荷予定年月日 AS shipping_date
        , DATEDIFF(CURRENT_DATE, T.伝票出荷予定年月日) AS days_before
        , T.商品コード         AS syohin_codes
        , T.店舗名             AS shop_name
EOD;
    $sqlBody = <<<EOD
      FROM (
        SELECT
            a.`伝票番号`
          , MAX(a.受注日)         AS 受注日
          , MAX(a.出荷予定日)     AS 入力出荷予定日
          , MAX(a.出荷予定年月日) AS 伝票出荷予定年月日
          , MAX(T.商品コード) AS 商品コード
          , MAX(a.店舗名) AS 店舗名
        FROM tb_sales_detail_analyze a
        INNER JOIN (
          SELECT
              a.伝票番号
            , GROUP_CONCAT(a.`商品コード（伝票）` ORDER BY a.`商品コード（伝票）` SEPARATOR ',') AS 商品コード
          FROM tb_sales_detail_analyze AS a
          INNER JOIN tb_mainproducts AS m ON a.daihyo_syohin_code = m.daihyo_syohin_code
          WHERE a.キャンセル区分  = '0'
            AND a.明細行キャンセル= '0'
            AND a.受注数 <> 引当数
            AND a.受注状態 NOT IN ('取込情報不足', '受注メール取込済', '出荷確定済（完了）')
            AND (
                   a.支払方法 IN ('代金引換', 'ポイント全額支払い')
                OR a.入金状況 NOT IN (0, 1)
            )
            AND a.受注日 <= :borderOrderDate
            {$sqlShopNeIds}
            {$sqlInputShippingDateExists}
          GROUP BY a.`伝票番号`
        ) T ON a.`伝票番号` = T.伝票番号
        GROUP BY a.`伝票番号`
        {$sqlBorderDate}
      ) AS T
EOD;
    $borderOrderDate = $commonUtil->getWorkingDateBeforeDays(new \DateTime(), 1); // 昨営業日
    $logger->info('border working date: ' . $borderOrderDate->format('Y-m-d'));
    $params[':borderOrderDate'] = $borderOrderDate->format('Y-m-d');


    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('voucher_number', 'voucher_number', 'string');
    $rsm->addScalarResult('order_date', 'order_date', 'string');
    $rsm->addScalarResult('input_shipping_date', 'input_shipping_date', 'string');
    $rsm->addScalarResult('shipping_date', 'shipping_date', 'string');
    $rsm->addScalarResult('days_before', 'days_before', 'integer');
    $rsm->addScalarResult('syohin_codes', 'syohin_codes', 'string');
    $rsm->addScalarResult('shop_name', 'shop_name', 'string');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $resultOrders = [];
    $defaultOrders = [
        'T.受注日' => 'ASC'
      , 'T.入力出荷予定日' => 'ASC'
      , 'T.伝票出荷予定年月日' => 'ASC'
      , 'T.伝票番号'   => 'ASC'
    ];

    if ($orders) {
      foreach($orders as $k => $v) {
        switch($k) {
          case 'daihyo_syohin_code':
//            $k = 'o.' . $k;
            break;
        }

        $resultOrders[$k] = $v;
        if (isset($defaultOrders[$k])) {
          unset($defaultOrders[$k]);
        }
      }
    }
    $query->setOrders(array_merge($resultOrders, $defaultOrders));

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }

  /**
   * Accessにない商品 一覧取得
   * @param array $conditions
   * @param array $orders
   * @param int $page
   * @param int $limit
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  public function findUnknownProductList($conditions = [], $orders = [], $page = 1, $limit = 100)
  {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    $params = [];

    $sqlSelect = <<<EOD
      SELECT
          a.伝票番号          AS voucher_number
        , a.商品コード（伝票） AS ne_syohin_syohin_code
EOD;
    $sqlBody = <<<EOD
      FROM tb_sales_detail_analyze AS a
      LEFT JOIN tb_productchoiceitems AS pci ON a.商品コード（伝票） = pci.ne_syohin_syohin_code
      WHERE pci.ne_syohin_syohin_code IS NULL
        AND a.キャンセル区分 = '0'
        AND a.明細行キャンセル = '0'
        AND a.受注状態 <> '出荷確定済（完了）'
EOD;

    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('voucher_number', 'voucher_number', 'string');
    $rsm->addScalarResult('ne_syohin_syohin_code', 'ne_syohin_syohin_code', 'string');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $resultOrders = [];
    $defaultOrders = [
        'a.伝票番号' => 'ASC'
      , 'a.商品コード（伝票）'   => 'ASC'
    ];

    if ($orders) {
      foreach($orders as $k => $v) {
        switch($k) {
          case 'daihyo_syohin_code':
//            $k = 'o.' . $k;
            break;
        }

        $resultOrders[$k] = $v;
        if (isset($defaultOrders[$k])) {
          unset($defaultOrders[$k]);
        }
      }
    }
    $query->setOrders(array_merge($resultOrders, $defaultOrders));

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }

}
