<?php

namespace MiscBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Query\ResultSetMapping;
use forestlib\Doctrine\ORM\LimitableNativeQuery;

/**
 * ProductNgWordRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductNgWordRepository extends BaseRepository
{

/**
   * 検索された商品Ngワード一覧画面を返す。
   * @param array $conditions 検索条件
   * @param int $limit 1ページに表示する件数
   * @param int $page 現在ページ数
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  public function findKeywordForNgWordList($conditions,$limit, $page)
  {
    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    $wheres = [];
    $params = [];
    // 条件：キーワード
    if ($conditions['keyword']) {
      $wheres[] = "m.content like :keyword";
      $params[':keyword'] = '%' . $conditions['keyword'] . '%';
    }
    $addWheres = '';
    if ($wheres) {
      $addWheres = ' AND ' . implode(' AND ', $wheres);
    }

    $sqlSelect = <<<EOD
      SELECT
        m.id AS id,
        m.content AS content
EOD;

    $sqlBody = <<<EOD
      FROM
        tb_product_ng_word m
      WHERE
        1
        {$addWheres}
EOD;

    $rsm = new ResultSetMapping();
    $rsm->addScalarResult('id', 'id', 'integer');
    $rsm->addScalarResult('content', 'content', 'string');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $orders = [];
    if($conditions['sortKey'] && $conditions['sortVal']) {
      $orders[$conditions['sortKey']] = $conditions['sortVal'];
    } else {
      $orders['id'] = 'DESC';
    }
    $query->setOrders($orders);
    
    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');

    return $paginator->paginate($query, $page, $limit);
  }
}