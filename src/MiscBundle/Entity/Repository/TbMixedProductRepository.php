<?php

namespace MiscBundle\Entity\Repository;
use Doctrine\ORM\EntityManager;
use MiscBundle\Entity\TbMixedProduct;

/**
 * TbMixedProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbMixedProductRepository extends BaseRepository
{
  public function findList($conditions = [])
  {
    $dbMain = $this->getConnection('main');

    $params = [];

    $addSqlMallCode = '';
    if (isset($conditions['mall_code'])) {
      $addSqlMallCode = ' AND mix.mall_code = :mallCode ';
      $params[':mallCode'] = $conditions['mall_code'];
    }

    $addSqlParent = '';
    if (isset($conditions['parent']) && strlen($conditions['parent'])) {
      $addSqlParent = ' AND mix.parent = :parent ';
      $params[':parent'] = $conditions['parent'];
    }

    $sql = <<<EOD
      SELECT
          mix.display_order
        , m_p.daihyo_syohin_code  AS parent
        , m_p.picfolderP1         AS parent_image_directory
        , m_p.picnameP1           AS parent_image_filename
        , m_c.daihyo_syohin_code  AS child
        , m_c.picfolderP1         AS child_image_directory
        , m_c.picnameP1           AS child_image_filename
      FROM tb_mixed_product mix
      INNER JOIN tb_mainproducts m_p ON mix.parent = m_p.daihyo_syohin_code
      INNER JOIN tb_mainproducts m_c ON mix.daihyo_syohin_code = m_c.daihyo_syohin_code
      WHERE 1
      {$addSqlMallCode}
      {$addSqlParent}
      ORDER BY mix.parent
             , mix.display_order
EOD;
    $stmt = $dbMain->prepare($sql);
    foreach($params as $k => $v) {
      $stmt->bindValue($k, $v, \PDO::PARAM_STR);
    }
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * 保存処理
   * @param string $mallCode
   * @param string $parent
   * @param array $list
   */
  public function saveList($mallCode, $parent, $list)
  {
    // $logger = $this->getLogger();
    $dbMain = $this->getConnection('main');

    // 重複チェック
    $duplicateCheck = [];
    foreach($list as $child) {
      if (isset($duplicateCheck[$child['child']])) {
        throw new \RuntimeException('商品コードが重複しています。');
      }
      $duplicateCheck[$child['child']] = true;
    }

    // 登録済みSKU内訳一覧取得
    /** @var EntityManager $em */
    $em = $this->getContainer()->get('doctrine')->getManager('main');

    $em->beginTransaction(); // ------------------------------- トランザクション

    // 全て削除
    $sql = <<<EOD
      DELETE mp
      FROM tb_mixed_product mp
      WHERE mp.mall_code = :mallCode
        AND mp.parent = :parent
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':mallCode', $mallCode);
    $stmt->bindValue(':parent', $parent);
    $stmt->execute();

    // 全て挿入
    $order = 1;
    foreach($list as $child) {
      // parent と同じは不可。
      if ($child['child'] == $parent) {
        throw new \RuntimeException('invalid child.');
      }

      $mixed = new TbMixedProduct();
      $mixed->setMallCode($mallCode);
      $mixed->setParent($parent);
      $mixed->setDaihyoSyohinCode($child['child']);
      $mixed->setDisplayOrder($order++);

      $em->persist($mixed);
    }

    $em->flush();
    $em->commit(); // ------------------------------- トランザクション
  }

}
