<?php

namespace MiscBundle\Entity\Repository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\Expr\Join;
use Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination;
use MiscBundle\Entity\TbLocation;
use MiscBundle\Entity\TbProductLocation;
use MiscBundle\Entity\TbProductchoiceitems;
use MiscBundle\Entity\TbWarehouse;
use MiscBundle\Util\BatchLogger;
use MiscBundle\Util\DbCommonUtil;
use forestlib\Doctrine\ORM\LimitableNativeQuery;

/**
 * TbLocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbLocationRepository extends BaseRepository
{
  const LOG_TYPE_LOCATION = 'location';
  const LOG_TYPE_PRODUCT = 'product';
  const LOG_TYPE_AUTO_RECORD = 'record';

  const LOG_OPERATION_SIRE = '仕入入力確定';
  const LOG_OPERATION_REFRESH_LOCATION = 'ロケーション更新';
  const LOG_OPERATION_WEB_LOCATION_DETAIL = 'ロケーション移動';
  const LOG_OPERATION_WEB_LOCATION_DETAIL_DELETE = 'ロケーション削除';

  const LOG_OPERATION_WEB_PRODUCT_DETAIL = '商品ロケーション詳細更新';
  const LOG_OPERATION_WEB_LOCATION_WAREHOUSE_MOVE = 'ロケーション倉庫移動';
  const LOG_OPERATION_WEB_LOCATION_MERGE = 'ロケーション統合';
  const LOG_OPERATION_WEB_LOCATION_CHANGE_RACK = 'ロケーション棚番号一括変更';
  const LOG_OPERATION_WEB_LOCATION_REMOVE_RACK_CODE = 'ロケーション棚番号・位置コード一括削除';
  const LOG_OPERATION_WEB_LOCATION_MOVE_EMPTY_RACK = '空き棚箱移動';

  const LOG_OPERATION_FBA_MULTI_UPDATE_LOCATION = 'Amazon FBAマルチチャネル 在庫数更新';
  const LOG_OPERATION_YABUYOSHI_UPDATE_LOCATION = '藪吉倉庫 在庫数更新';
  const LOG_OPERATION_RSL_UPDATE_LOCATION = '楽天スーパーロジ倉庫 在庫数更新';
  const LOG_OPERATION_SHOPLIST_UPDATE_LOCATION = 'SHOPLIST倉庫 在庫数更新';

  const LOG_OPERATION_WEB_LOCATION_STORE_IMPORT = '箱振り';

  const LOG_OPERATION_WEB_PICKING = 'ピッキング';
  const LOG_OPERATION_WAREHOUSE_TO_PICKING = '倉庫へピッキング';
  const LOG_OPERATION_REAL_SHOP_PICKING = '実店舗ピッキング';
  const LOG_OPERATION_SET_PRODUCT_PICKING = 'セット商品ピッキング';
  const LOG_OPERATION_WAREHOUSE_STOCK_MOVE_PICKING = '倉庫在庫ピッキング';
  const LOG_OPERATION_WAREHOUSE_STOCK_MOVE_PICKING_CREATE = '倉庫在庫ロケーション作成';

  const LOG_OPERATION_PICKING_UPDATE_STOCK = 'ピッキング時在庫修正';


  const LOG_OPERATION_LOCATION_SORT_ORDER = '商品ロケーション自動並べ替え';
  const LOG_OPERATION_LOCATION_SORT_ORDER_BY_DELIVERY_STATEMENT_DETAILS = '納品書印刷待ち一覧 ブロック集計用ロケーション並べ替え';

  const LOG_OPERATION_IMPORT_STOCK_IN_OUT_RETURN = '入出庫データ取込（返送品処理・出荷確定戻し）';
  const LOG_OPERATION_IMPORT_REAL_SHOP_RETURN = '実店舗返品処理';

  const LOG_OPERATION_DELETE_EMPTY_LOCATION = '空ロケーション削除';

  const LOG_OPERATION_CREATE_SET_PRODUCT_ALL = 'セット商品作成一括確定';

  const LOG_OPERATION_STOCK_TRANSPORT_COMPLETE = '移動伝票完了処理';

  /**
   * 1件取得
   * @param integer $warehouseId
   * @param string $locationCode
   * @param bool $removeEmptyLocation ユニークチェック等で、削除済みロケーションが出てきて困る場合に、事前に削除する。
   * @return TbLocation|null
   */
  public function getByLocationCode($warehouseId, $locationCode, $removeEmptyLocation = false)
  {
    if ($removeEmptyLocation) {
      $dbMain = $this->getEntityManager()->getConnection();

      // ロケーションを物理削除
      $sql = <<<EOD
      DELETE l
      FROM tb_location l
      LEFT JOIN (
       SELECT
           pl.location_id
        FROM tb_product_location pl
        WHERE pl.position >= 0
        GROUP BY pl.location_id
      ) T ON l.id = T.location_id
      WHERE l.warehouse_id = :warehouseId
        AND l.location_code = :locationCode
        AND T.location_id IS NULL
EOD;
      $stmt = $dbMain->prepare($sql);
      $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
      $stmt->bindValue(':locationCode', $locationCode, \PDO::PARAM_STR);
      $stmt->execute();
    }

    $conditions = [
        'warehouse_id' => $warehouseId
      , 'location_code' => $locationCode
    ];

    return $this->findOneBy($conditions);
  }

  /**
   * IDで一括取得
   * 削除フラグは見ない
   * @param array $ids
   * @return TbLocation[]
   */
  public function findByIds($ids)
  {
    $qb = $this->createQueryBuilder('l');
    $qb->andWhere($qb->expr()->in('l.id', $ids));

    $qb->orderBy('l.created', 'ASC');

    return $qb->getQuery()->getResult();
  }


  /**
   * 複数件取得
   * @param integer $warehouseId
   * @param array $locationCodeList
   * @param bool $removeEmptyLocation ユニークチェック等で、削除済みロケーションが出てきて困る場合に、事前に削除する。
   * @return TbLocation[]
   */
  public function getByLocationCodeList($warehouseId, $locationCodeList, $removeEmptyLocation = false)
  {
    if ($removeEmptyLocation) {
      $dbMain = $this->getEntityManager()->getConnection();

      $codesWhere = '';
      if ($locationCodeList) {
        $codes = [];
        foreach($locationCodeList as $code) {
          $codes[] = $dbMain->quote($this->fixLocationCode($code), \PDO::PARAM_STR);
        }
        $codesWhere = sprintf(' AND l.location_code IN ( %s ) ', implode(', ', $codes));
      }

      // ロケーションを物理削除
      $sql = <<<EOD
      DELETE l
      FROM tb_location l
      LEFT JOIN (
       SELECT
           pl.location_id
        FROM tb_product_location pl
        WHERE pl.position >= 0
        GROUP BY pl.location_id
      ) T ON l.id = T.location_id
      WHERE l.warehouse_id = :warehouseId
        AND T.location_id IS NULL
        {$codesWhere}
EOD;
      $stmt = $dbMain->prepare($sql);
      $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
      $stmt->execute();
    }

    $conditions = [
        'warehouse_id' => $warehouseId
      , 'location_code' => $locationCodeList
    ];

    return $this->findBy($conditions);
  }


  /**
   * 自動ロケーション作成処理
   * @param string $type
   * @param string $prefix
   * @param TbWarehouse $warehouse
   * @return TbLocation|null
   * @throws \Doctrine\DBAL\DBALException
   */
  public function createAutoLocation($type, $prefix, $warehouse)
  {
    $dbMain = $this->getEntityManager()->getConnection();

    $sql = <<<EOD
     INSERT INTO tb_location (
         warehouse_id
       , location_code
       , `type`
       , auto_location_date
       , auto_location_number
     )
     SELECT
         :warehouseId
       , CONCAT(
             :prefix
           , DATE_FORMAT(CURRENT_DATE, '%y%m%d')
           , '_'
           , LPAD(T.new_number, 3, '0')
         )
       , :type
       , CURRENT_DATE
       , T.new_number
     FROM (
       SELECT
         COALESCE(T.num, 0) + 1 AS new_number
       FROM tb_calendar c
       LEFT JOIN (
         SELECT
             CURRENT_DATE AS today
           , MAX(l.auto_location_number) AS num
         FROM tb_location l
         WHERE l.auto_location_date = CURRENT_DATE
         GROUP BY l.auto_location_date
       ) AS T ON c.calendar_date = T.today
       WHERE c.calendar_date = CURRENT_DATE
     ) T
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':type', $type, \PDO::PARAM_STR);
    $stmt->bindValue(':prefix', $prefix, \PDO::PARAM_STR);
    $stmt->bindValue(':warehouseId', $warehouse->getId(), \PDO::PARAM_INT);
    $stmt->execute();

    $result = null;
    $id = $dbMain->query("SELECT id AS location_id, location_code FROM tb_location WHERE id = LAST_INSERT_ID()")->fetchColumn(0);
    if ($id) {
      $result = $this->find($id);
    }

    return $result;
  }


  /// ロケーションコードからIDを一括取得する
  /**
   * @param int $warehouseId
   * @param array $codes
   * @return array
   */
  public function findIdsByLocationCodes($warehouseId, $codes)
  {
    $ids = [];

    if ($codes) {
      $qb = $this->createQueryBuilder('l');
      $qb->andWhere('l.warehouse_id = :warehouseId')->setParameter(':warehouseId', $warehouseId, \PDO::PARAM_INT);
      $qb->andWhere($qb->expr()->in('l.location_code', $codes));

      /** @var TbLocation $location */
      foreach ($qb->getQuery()->getResult() as $location) {
        $ids[$location->getLocationCode()] = $location->getId();
      }
    }

    return $ids;
  }

  /// ロケーションコードでLIKE検索
  /**
   * @param array $conditions
   * @param array $orders
   * @param string $likeMode
   * @param int $page
   * @param int $limit
   * @return SlidingPagination
   */
  public function searchLocationListByLocationCode($conditions = [], $orders = [], $likeMode = 'full', $page = 1, $limit = 100)
  {
    $logger = $this->getLogger();

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    $params = [];

    // 絞込：ロケーションコード
    $sqlLocationCode = '';
    if (isset($conditions['location_code']) && strlen($conditions['location_code'])) {

      $wheres = [];
      $params = [];
      $locationCodes = explode(' ', trim(str_replace('　', ' ', $conditions['location_code'])));
      foreach($locationCodes as $i => $locationCode) {

        switch ($likeMode) {
          // 完全一致
          case 'equal':
            break;

          // 部分一致
          case 'full':
            $locationCode = $commonUtil->escapeLikeString($locationCode);
            $locationCode = sprintf('%%%s%%', $locationCode);
            break;

          // 前方一致
          case 'forward':
            $locationCode = $commonUtil->escapeLikeString($locationCode);
            $locationCode = sprintf('%s%%', $locationCode);
            break;
          default:
            throw new \InvalidArgumentException('invalid like mode');
        }

        $key = sprintf(':locationCode%03d', $i);
        $wheres[] = sprintf('l.location_code LIKE %s', $key);
        $params[$key] = $locationCode;
      }

      if (count($wheres)) {
        $sqlLocationCode = sprintf(' AND ( %s ) ', implode(' OR ', $wheres));
      }
    }

    // 絞込：倉庫
    $sqlWarehouse = '';
    if (isset($conditions['warehouse_id']) && strlen($conditions['warehouse_id'])) {
      $sqlWarehouse = ' AND w.id = :warehouseId';
      $params[':warehouseId'] = intval($conditions['warehouse_id']);
    }

    // 絞込：在庫数（最小）
    $sqlStockMin = '';
    if (isset($conditions['stock_min']) && strlen($conditions['stock_min'])) {
      $sqlStockMin = ' AND T.stock_total >= :stockMin';
      $params[':stockMin'] = intval($conditions['stock_min']);
    }
    $sqlStockMax = '';
    if (isset($conditions['stock_max']) && strlen($conditions['stock_max'])) {
      $sqlStockMax = ' AND T.stock_total <= :stockMax';
      $params[':stockMax'] = intval($conditions['stock_max']);
    }


    $sqlSelect = <<<EOD
      SELECT
          T.id
        , T.warehouseId     AS warehouseId
        , T.warehouseName   AS warehouseName
        , T.warehouseSymbol AS warehouseSymbol
        , T.locationCode    AS locationCode
        , T.`type`          AS type
        , T.productNum      AS productNum
        , T.stockTotal      AS stockTotal
EOD;
    $sqlBody = <<<EOD
      FROM (
        SELECT
            l.id
          , l.warehouse_id  AS warehouseId
          , w.name          AS warehouseName
          , w.symbol        AS warehouseSymbol
          , w.display_order AS warehouseDisplayOrder
          , l.location_code AS locationCode
          , l.`type`        AS type
          , T.product_num   AS productNum
          , T.stock_total   AS stockTotal
        FROM tb_location l
        INNER JOIN tb_warehouse w ON l.warehouse_id = w.id
        INNER JOIN (
          SELECT
              pl.location_id
            , COUNT(pl.ne_syohin_syohin_code) AS product_num
            , SUM(pl.stock) AS stock_total
          FROM tb_product_location pl
          WHERE pl.position >= 0
          GROUP BY pl.location_id
        ) AS T ON l.id = T.location_id
        WHERE 1
          {$sqlWarehouse}
          {$sqlLocationCode}
          {$sqlStockMin}
          {$sqlStockMax}
      ) AS T
EOD;

    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('id', 'id', 'integer');
    $rsm->addScalarResult('warehouseId', 'warehouseId', 'integer');
    $rsm->addScalarResult('warehouseName', 'warehouseName', 'string');
    $rsm->addScalarResult('warehouseSymbol', 'warehouseSymbol', 'string');
    $rsm->addScalarResult('locationCode', 'locationCode', 'string');
    $rsm->addScalarResult('type', 'type', 'string');
    $rsm->addScalarResult('productNum', 'productNum', 'integer');
    $rsm->addScalarResult('stockTotal', 'stockTotal', 'integer');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $resultOrders = [];
    $defaultOrders = [ 'T.locationCode' => 'ASC' ];

    foreach($orders as $k => $v) {
      $v = strtoupper($v);
      if (!in_array($v, ['ASC', 'DESC'])) {
        continue;
      }

      switch ($k) {
        case 'locationCode':
          $key = 'T.locationCode';
          $resultOrders[$key] = $v;
          unset($defaultOrders[$key]);
          break;
        case 'warehouse':
          $key = 'T.warehouseDisplayOrder';
          $resultOrders[$key] = $v;
          unset($defaultOrders[$key]);
          break;
        case 'stock':
          $key = 'T.stockTotal';
          $resultOrders[$key] = $v;
          unset($defaultOrders[$key]);
          break;
      }
    }

    $logger->info(print_r(array_merge($defaultOrders, $resultOrders), true));
    $query->setOrders(array_merge($resultOrders, $defaultOrders));

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }

    /// ロケーションコードでLIKE検索
    /**
     * @param array $conditions
     * @param array $orders
     * @param string $likeMode
     * @param int $page
     * @param int $limit
     * @return SlidingPagination
     */
    public function searchLocationMoveListByLocationCode($conditions = [], $orders = [], $likeMode = 'full', $page = 1, $limit = 100)
    {
        $logger = $this->getLogger();

        /** @var DbCommonUtil $commonUtil */
        $commonUtil = $this->getContainer()->get('misc.util.db_common');

        /** @var EntityManager $em */
        $em = $this->getEntityManager();

        $params = [];

        // 絞込：ロケーションコード
        $sqlLocationCode = '';
        if (isset($conditions['location_code']) && strlen($conditions['location_code'])) {

            $wheres = [];
            $params = [];
            $locationCodes = explode(' ', trim(str_replace('　', ' ', $conditions['location_code'])));
            foreach($locationCodes as $i => $locationCode) {

                switch ($likeMode) {
                    // 完全一致
                    case 'equal':
                        break;

                    // 部分一致
                    case 'full':
                        $locationCode = $commonUtil->escapeLikeString($locationCode);
                        $locationCode = sprintf('%%%s%%', $locationCode);
                        break;

                    // 前方一致
                    case 'forward':
                        $locationCode = $commonUtil->escapeLikeString($locationCode);
                        $locationCode = sprintf('%s%%', $locationCode);
                        break;
                    default:
                        throw new \InvalidArgumentException('invalid like mode');
                }

                $key = sprintf(':locationCode%03d', $i);
                $wheres[] = sprintf('l.location_code LIKE %s', $key);
                $params[$key] = $locationCode;
            }

            if (count($wheres)) {
                $sqlLocationCode = sprintf(' AND ( %s ) ', implode(' OR ', $wheres));
            }
        }

        // 絞込：倉庫
        $sqlWarehouse = '';
        if (isset($conditions['warehouse_id']) && strlen($conditions['warehouse_id'])) {
            $sqlWarehouse = ' AND w.id = :warehouseId';
            $params[':warehouseId'] = intval($conditions['warehouse_id']);
        }

        // 絞込：在庫数（最小）
        $sqlStockMin = '';
        if (isset($conditions['stock_min']) && strlen($conditions['stock_min'])) {
            $sqlStockMin = ' AND T.stock_total >= :stockMin';
            $params[':stockMin'] = intval($conditions['stock_min']);
        }
        $sqlStockMax = '';
        if (isset($conditions['stock_max']) && strlen($conditions['stock_max'])) {
            $sqlStockMax = ' AND T.stock_total <= :stockMax';
            $params[':stockMax'] = intval($conditions['stock_max']);
        }
        $sqlMoveFuruichiWarehouseFlg = '';
        if (isset($conditions['move_furuichi_warehouse_flg']) && strlen($conditions['move_furuichi_warehouse_flg'])) {
            $sqlMoveFuruichiWarehouseFlg = ' AND l.move_furuichi_warehouse_flg = :move_furuichi_warehouse_flg';
            $params[':move_furuichi_warehouse_flg'] = intval($conditions['move_furuichi_warehouse_flg']);
        }

        $sqlSelect = <<<EOD
      SELECT
          T.id
        , T.warehouseId     AS warehouseId
        , T.warehouseName   AS warehouseName
        , T.warehouseSymbol AS warehouseSymbol
        , T.locationCode    AS locationCode
        , T.`type`          AS type
        , T.productNum      AS productNum
        , T.stockTotal      AS stockTotal
        , T.moveFuruichiWarehouseFlg      AS moveFuruichiWarehouseFlg
EOD;
        $sqlBody = <<<EOD
      FROM (
        SELECT
            l.id
          , l.warehouse_id  AS warehouseId
          , w.name          AS warehouseName
          , w.symbol        AS warehouseSymbol
          , w.display_order AS warehouseDisplayOrder
          , l.location_code AS locationCode
          , l.`type`        AS type
          , T.product_num   AS productNum
          , T.stock_total   AS stockTotal
          , l.move_furuichi_warehouse_flg  AS moveFuruichiWarehouseFlg
        FROM tb_location l
        INNER JOIN tb_warehouse w ON l.warehouse_id = w.id
        INNER JOIN (
          SELECT
              pl.location_id
            , COUNT(pl.ne_syohin_syohin_code) AS product_num
            , SUM(pl.stock) AS stock_total
          FROM tb_product_location pl
          WHERE pl.position >= 0
          GROUP BY pl.location_id
        ) AS T ON l.id = T.location_id
        WHERE 1
          {$sqlWarehouse}
          {$sqlLocationCode}
          {$sqlStockMin}
          {$sqlStockMax}
          {$sqlMoveFuruichiWarehouseFlg}
      ) AS T
EOD;

        $rsm =  new ResultSetMapping();
        $rsm->addScalarResult('id', 'id', 'integer');
        $rsm->addScalarResult('warehouseId', 'warehouseId', 'integer');
        $rsm->addScalarResult('warehouseName', 'warehouseName', 'string');
        $rsm->addScalarResult('warehouseSymbol', 'warehouseSymbol', 'string');
        $rsm->addScalarResult('locationCode', 'locationCode', 'string');
        $rsm->addScalarResult('type', 'type', 'string');
        $rsm->addScalarResult('productNum', 'productNum', 'integer');
        $rsm->addScalarResult('stockTotal', 'stockTotal', 'integer');
        $rsm->addScalarResult('moveFuruichiWarehouseFlg', 'moveFuruichiWarehouseFlg', 'integer');

        $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
        foreach($params as $k => $v) {
            $query->setParameter($k, $v);
        }

        $resultOrders = [];
        $defaultOrders = [ 'T.locationCode' => 'ASC' ];

        foreach($orders as $k => $v) {
            $v = strtoupper($v);
            if (!in_array($v, ['ASC', 'DESC'])) {
                continue;
            }

            switch ($k) {
                case 'locationCode':
                    $key = 'T.locationCode';
                    $resultOrders[$key] = $v;
                    unset($defaultOrders[$key]);
                    break;
                case 'warehouse':
                    $key = 'T.warehouseDisplayOrder';
                    $resultOrders[$key] = $v;
                    unset($defaultOrders[$key]);
                    break;
                case 'stock':
                    $key = 'T.stockTotal';
                    $resultOrders[$key] = $v;
                    unset($defaultOrders[$key]);
                    break;
            }
        }

        $logger->info(print_r(array_merge($defaultOrders, $resultOrders), true));
        $query->setOrders(array_merge($resultOrders, $defaultOrders));

        /** @var \Knp\Component\Pager\Paginator $paginator */
        $paginator  = $this->getContainer()->get('knp_paginator');
        /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
        $pagination = $paginator->paginate(
            $query /* query NOT result */
            , $page
            , $limit
        );

        return $pagination;
    }

  /**
   * ロケーション 新規作成
   * @param string $locationCode
   * @param int $warehouseId
   * @param string $type
   * @return TbLocation
   */
  public function createNewLocation($warehouseId, $locationCode, $type = '')
  {
    $location = new TbLocation();
    $location->setWarehouseId($warehouseId);
    $location->setLocationCode($locationCode);
    $location->setType($type);

    $em = $this->getEntityManager();
    $em->persist($location);
    $em->flush();

    return $location;
  }

  /**
   * 移動対象外倉庫の古市倉庫移動フラグをnullに一括更新
   */
  public function updateMoveFuruichiWarehouseFlgNull()
  {
      $qb = $this->createQueryBuilder('l');
      $qb->update(TbLocation::class, 'l')
      ->set('l.move_furuichi_warehouse_flg', ':nvl')->setParameter('nvl', null)
      ->andWhere('l.warehouse_id IN(SELECT w.id FROM MiscBundle:TbWarehouse w WHERE w.id != :id AND w.transport_priority = 0)')
      ->setParameter(":id", TbWarehouseRepository::FURUICHI_WAREHOUSE_ID);
      $qb->getQuery()->execute();
  }

  /**
   * 移動対象倉庫の古市倉庫移動フラグを0で一括初期化
   */
  public function updateMoveFuruichiWarehouseFlgDisable()
  {
      $qb = $this->createQueryBuilder('l');
      $qb->update(TbLocation::class, "l")
      ->set('l.move_furuichi_warehouse_flg', ':disable')->setParameter('disable', 0)
      ->andWhere('l.warehouse_id IN(SELECT w.id FROM MiscBundle:TbWarehouse w WHERE w.id = :id OR w.transport_priority > 0)')
      ->setParameter(":id", TbWarehouseRepository::FURUICHI_WAREHOUSE_ID);
      $qb->getQuery()->execute();
  }

  /**
   * ロケーション情報の古市倉庫移動フラグを1に一括更新
   * @param array $locationIds ロケーションID配列
   */
  public function updateMoveFuruichiWarehouseFlgByLocations(array $locationIds)
  {
      if (count($locationIds) <= 0) {
          return ;
      }
      $qb = $this->createQueryBuilder('l');
      $qb->update(TbLocation::class, "l")
      ->set('l.move_furuichi_warehouse_flg', ':enable')->setParameter('enable', 1)
      ->andWhere($qb->expr()->in('l.id', $locationIds))
      ->getQuery()
      ->execute();
  }

  /**
   * 商品が紐付いていないロケーションの一括削除
   * @param string|null $syohinCode デッドロック回避のため、商品を限定できる場合は限定する
   * @param array $locationIds
   * @throws \Doctrine\DBAL\DBALException
   */
  public function deleteEmptyLocation($syohinCode = null, $locationIds = [])
  {
    $dbMain = $this->getEntityManager()->getConnection();

    $locationIdList = null;
    if ($locationIds) {
      $tmp = [];
      foreach($locationIds as $id) {
        $tmp[] = intval($id);
      }
      $locationIdList = implode(', ', $tmp);
    }

    // ロケーションを物理削除
    $sql = <<<EOD
      DELETE l
      FROM tb_location l
      LEFT JOIN (
       SELECT
           pl.location_id
        FROM tb_product_location pl
        WHERE pl.position >= 0
        GROUP BY pl.location_id
      ) T ON l.id = T.location_id
      WHERE T.location_id IS NULL
EOD;
    if ($locationIdList) {
      $sql .= " AND l.id IN ({$locationIdList}) ";
    }
    $dbMain->query($sql);

    // 削除済みロケーションに紐づく商品ロケーションレコードを一括削除
    $sql = <<<EOD
      DELETE pl
      FROM tb_product_location pl
      LEFT JOIN tb_location l ON pl.location_id = l.id
      WHERE l.id IS NULL
EOD;
    if ($syohinCode) {
      $sql .= " AND pl.ne_syohin_syohin_code = :syohinCode ";
    }
    if ($locationIdList) {
      $sql .= " AND l.id IN ({$locationIdList}) ";
    }

    $stmt = $dbMain->prepare($sql);

    if ($syohinCode) {
      $stmt->bindValue(':syohinCode', $syohinCode, \PDO::PARAM_STR);
    }
    $stmt->execute();
  }

  /**
   * 商品のロケーション優先順位を振り直す（0 から 1 刻みに整える）
   * @param $syohinCode
   */
  public function renumberPositions($syohinCode)
  {
    $container = $this->getContainer();
    $doctrine = $container->get('doctrine');

    /** @var BaseRepository $choiceItemRepo */
    $choiceItemRepo = $doctrine->getRepository('MiscBundle:TbProductchoiceitems');

    /** @var TbProductchoiceitems $choiceItem */
    $choiceItem = $choiceItemRepo->find($syohinCode);

    $this->renumberPositionsByChoiceItem($choiceItem);
  }

  /**
   * 商品のロケーション優先順位を振り直す（0 から 1 刻みに整える）
   * UNIQUE は削除したが、ここで倉庫ID順に設定し直す。（重複の影響がどこかに出る可能性があるため。）
   * @param TbProductchoiceitems $choiceItem
   */
  public function renumberPositionsByChoiceItem($choiceItem)
  {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    if (!$choiceItem) {
      throw new \RuntimeException('no choice item');
    }
    $em = $this->getEntityManager();
    $em->refresh($choiceItem);

    // UNIQUE制約は無くなったので、単純に振り直す。
    $locations = $choiceItem->getActiveLocations()->toArray(); // 全倉庫分

    // Doctrine2 の融通の利かないキャッシュのため、いちいち再取得が必要。てか、この土台は相当に危なっかしい印象
    // キャッシュを無効にする設定が必要ではないか。
    /** @var TbProductLocation $location */
    foreach($locations as $location) {
      $em->refresh($location);
    }

    // 倉庫毎に連番に直す
    $locationList = [];
    foreach($locations as $location) {
      $warehouseId = $location->getLocation()->getWarehouseId();
      $locationList[$warehouseId][] = $location;
    }

    foreach($locationList AS $warehouseId => $warehouseLocations) {
      $position = 0; // 倉庫毎に連番リセット

      usort($warehouseLocations, function($a, $b) {
        /** @var TbProductLocation $a */
        /** @var TbProductLocation $b */
        if ($a->getPosition() == $b->getPosition()) {
          return 0;
        }

        return $a->getPosition() < $b->getPosition() ? -1 : 1;
      });

      /** @var TbProductLocation $productLocation */
      foreach ($warehouseLocations as $productLocation) {
        // pci ロケーション更新
        if ($position == 0) {
          $choiceItem->updateCurrentLocation($productLocation->getLocation()->getLocationCode());
        }

        /** @var TbProductLocation $productLocation */
        $productLocation->setPosition($position++);
      }

      $locationList[$warehouseId] = $warehouseLocations; // 今は使っていない。一応。
    }

    $this->getEntityManager()->flush();
  }

  /**
   * ロケーション並べ替え処理
   */
  public function sortLocationOrder()
  {
    $logger = $this->getLogger();

    $dbMain = $this->getConnection('main');

    $temporaryWord = ' TEMPORARY ';
    // $temporaryWord = ''; // FOR DEBUG

    // 一時テーブルに新しいロケーション並び順を作成
    $dbMain->query("DROP {$temporaryWord} TABLE IF EXISTS tmp_work_product_location_new_sort_order;");

    $sql = <<<EOD
      CREATE {$temporaryWord} TABLE tmp_work_product_location_new_sort_order (
          ne_syohin_syohin_code VARCHAR(50) NOT NULL
        , location_id INTEGER NOT NULL
        , new_position INTEGER NOT NULL DEFAULT 0
        , PRIMARY KEY (`ne_syohin_syohin_code`, `location_id`)
      ) ENGINE=InnoDB DEFAULT CHARACTER SET utf8
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->execute();

    $sql = <<<EOD
      INSERT INTO tmp_work_product_location_new_sort_order (
          ne_syohin_syohin_code
        , location_id
        , new_position
      )
      SELECT
          pl.ne_syohin_syohin_code
        , pl.location_id
        , (
          SELECT
            COUNT(*)
          FROM tb_product_location pl2
          INNER JOIN tb_location l2 ON pl2.location_id = l2.id
          WHERE pl.ne_syohin_syohin_code = pl2.ne_syohin_syohin_code
            AND l.warehouse_id = l2.warehouse_id
            AND l.location_code >= l2.location_code
        ) - 1 AS num
      FROM tb_product_location pl
      INNER JOIN tb_location l ON pl.location_id = l.id
      WHERE pl.stock > 0
      ORDER BY pl.ne_syohin_syohin_code
          , l.warehouse_id
          , l.location_code
EOD;
    $dbMain->exec($sql);

    // 新しい並び順でpositionを更新
    $sql = <<<EOD
      UPDATE
      tb_product_location pl
      INNER JOIN tmp_work_product_location_new_sort_order o
          ON pl.ne_syohin_syohin_code = o.ne_syohin_syohin_code
          AND pl.location_id = o.location_id
      SET pl.position = o.new_position
EOD;
    $dbMain->exec($sql);
  }


  /**
   * ロケーション変更履歴保存用（新） アクションキー設定処理
   * MySQLのローカル変数としてトリガで利用されるaction_keyをセットする
   * @param \Doctrine\DBAL\Connection $db
   * @return string $actionKey
   */
  public function setLocationLogActionKey($db)
  {
    $actionKey = uniqid('b', true); // 1アクション識別用キー (Batchのb)

    $stmt = $db->prepare("SET @action_key = :actionKey");
    $stmt->bindValue(':actionKey', $actionKey);
    $stmt->execute();

    return $actionKey;
  }


  /**
   * ロケーション変更履歴保存用 現状保存処理（処理前、処理後に呼び出し）
   * @param \Doctrine\DBAL\Connection $db
   * @param string $postfix
   */
  public function saveCurrentLocationInfoForChangeLog($db, $postfix)
  {
    $tableNameLocation = sprintf('tmp_product_location_log_location_%s', $postfix);
    $tableNameProduct  = sprintf('tmp_product_location_log_product_%s', $postfix);

    $db->query("SET group_concat_max_len = 10000000");

    // ロケーションベース
    $db->query("DROP TEMPORARY TABLE IF EXISTS {$tableNameLocation}");
    $sql = <<<EOD
      CREATE TEMPORARY TABLE {$tableNameLocation} (
          location_id INTEGER NOT NULL PRIMARY KEY
        , info MEDIUMTEXT NOT NULL
        , hash VARCHAR(40)  NOT NULL
        , INDEX index_hash (hash)
      ) ENGINE=InnoDB DEFAULT CHARSET utf8
      SELECT
          id AS location_id
        , info
        , SHA1(info) AS hash
      FROM (
        SELECT
            l.id
          , GROUP_CONCAT(
            CONCAT(
                pl.ne_syohin_syohin_code
              , ':'
              , pl.stock
              , ':'
              , pl.position
            )
            ORDER BY pl.ne_syohin_syohin_code
            SEPARATOR '/'
          ) AS info
        FROM tb_location l
        INNER JOIN tb_product_location pl ON l.id = pl.location_id
        GROUP BY l.id
      ) T
EOD;
    $db->query($sql);

    // 商品ベース
    $db->query("DROP TEMPORARY TABLE IF EXISTS {$tableNameProduct}");
    $sql = <<<EOD
      CREATE TEMPORARY TABLE {$tableNameProduct} (
          ne_syohin_syohin_code VARCHAR(50) NOT NULL PRIMARY KEY
        , info MEDIUMTEXT NOT NULL
        , hash VARCHAR(40)  NOT NULL
        , INDEX index_hash (hash)
      ) ENGINE=InnoDB DEFAULT CHARSET utf8
      SELECT
          ne_syohin_syohin_code
        , info
        , SHA1(info) AS hash
      FROM (
        SELECT
            pl.ne_syohin_syohin_code
          , GROUP_CONCAT(
            CONCAT(
                pl.location_id
              , ':'
              , pl.stock
              , ':'
              , pl.position
            )
            ORDER BY pl.position
            SEPARATOR '/'
          ) AS info
        FROM tb_product_location pl
        INNER JOIN tb_location l ON pl.location_id = l.id
        GROUP BY pl.ne_syohin_syohin_code
      ) T
EOD;
    $db->query($sql);
  }

  /**
   * ロケーション変更履歴 保存処理
   * ※前提として、 saveCurrentLocationInfoForChangeLog() により
   *   処理前(pre)、処理後(post)の計 4テーブルが作成されている必要がある。
   * @param \Doctrine\DBAL\Connection $db
   * @param \Doctrine\DBAL\Connection $dbLog ※こちらはログDB名の取得にのみ利用する。トランザクション処理のため、更新には利用しない。
   * @param string $operation
   * @param string $account
   * @param \DateTimeInterface $created
   * @return string 1アクション識別用キー
   * @throws \Doctrine\DBAL\DBALException
   */
  public function saveLocationChangeLog($db, $dbLog, $operation = '', $account = '', $created = null)
  {
    // 前提4テーブルの有無を確認したいが、TEMPORARY TABLEの一覧を取得する方法が不明なためなし。

    $logDbName = $dbLog->getDatabase();
    $actionKey = uniqid(true); // 1アクション識別用キー
    if (!$created) {
      $created = new \DateTimeImmutable();
    }

    // ロケーション単位
    // 前後双方のIDを抽出するテーブル
    $db->query("DROP TEMPORARY TABLE IF EXISTS tmp_product_location_log_location_id_list");

    $sql = <<<EOD
      CREATE TEMPORARY TABLE tmp_product_location_log_location_id_list (
        location_id VARCHAR(50) NOT NULL PRIMARY KEY
      ) ENGINE=InnoDB DEFAULT CHARSET utf8
      SELECT
        location_id
      FROM  tmp_product_location_log_location_pre
      UNION
      SELECT
        location_id
      FROM  tmp_product_location_log_location_post
EOD;
    $db->query($sql);

    // データ保存
    $sql = <<<EOD
      INSERT INTO `{$logDbName}`.tb_product_location_log (
          account
        , operation
        , type
        , action_key
        , location_id
        , location_code
        , pre_info
        , post_info
        , created
      )
      SELECT
          :account
        , :operation
        , :type
        , :actionKey
        , COALESCE(PRE.location_id, POST.location_id)
        , COALESCE(l1.location_code, l2.location_code)
        , PRE.info AS pre_info
        , POST.info AS post_info
        , :created
      FROM tmp_product_location_log_location_id_list T
      LEFT JOIN tmp_product_location_log_location_pre PRE ON T.location_id = PRE.location_id
      LEFT JOIN tb_location l1 ON PRE.location_id = l1.id
      LEFT JOIN tmp_product_location_log_location_post POST ON T.location_id = POST.location_id
      LEFT JOIN tb_location l2 ON POST.location_id = l2.id
      WHERE PRE.location_id IS NULL
         OR POST.location_id IS NULL
         OR PRE.hash <> POST.hash
EOD;
    $stmt = $db->prepare($sql);
    $stmt->bindValue(':account', $account);
    $stmt->bindValue(':operation', $operation);
    $stmt->bindValue(':type', self::LOG_TYPE_LOCATION);
    $stmt->bindValue(':actionKey', $actionKey);
    $stmt->bindValue(':created', $created->format('Y-m-d H:i:s'));
    $stmt->execute();


    // 商品単位単位
    // 前後双方のIDを抽出するテーブル
    $db->query("DROP TEMPORARY TABLE IF EXISTS tmp_product_location_log_product_code_list");

    $sql = <<<EOD
      CREATE TEMPORARY TABLE tmp_product_location_log_product_code_list (
        ne_syohin_syohin_code VARCHAR(50) NOT NULL PRIMARY KEY
      ) ENGINE=InnoDB DEFAULT CHARSET utf8
      SELECT
        ne_syohin_syohin_code
      FROM  tmp_product_location_log_product_pre
      UNION
      SELECT
        ne_syohin_syohin_code
      FROM  tmp_product_location_log_product_post
EOD;
    $db->query($sql);

    // データ保存
    $sql = <<<EOD
      INSERT INTO `{$logDbName}`.tb_product_location_log (
          account
        , operation
        , type
        , action_key
        , ne_syohin_syohin_code
        , pre_info
        , post_info
        , created
      )
      SELECT
          :account
        , :operation
        , :type
        , :actionKey
        , COALESCE(PRE.ne_syohin_syohin_code, POST.ne_syohin_syohin_code)
        , PRE.info AS pre_info
        , POST.info AS post_info
        , :created
      FROM tmp_product_location_log_product_code_list T
      LEFT JOIN tmp_product_location_log_product_pre PRE ON T.ne_syohin_syohin_code = PRE.ne_syohin_syohin_code
      LEFT JOIN tmp_product_location_log_product_post POST ON T.ne_syohin_syohin_code = POST.ne_syohin_syohin_code
      WHERE PRE.ne_syohin_syohin_code IS NULL
         OR POST.ne_syohin_syohin_code IS NULL
         OR PRE.hash <> POST.hash
EOD;
    $stmt = $db->prepare($sql);
    $stmt->bindValue(':account', $account);
    $stmt->bindValue(':operation', $operation);
    $stmt->bindValue(':type', self::LOG_TYPE_PRODUCT);
    $stmt->bindValue(':actionKey', $actionKey);
    $stmt->bindValue(':created', $created->format('Y-m-d H:i:s'));
    $stmt->execute();

    return $actionKey;
  }


  /**
   * ロケーション変更履歴 自動版 保存処理
   * 処理アカウントと処理名を保存するくらい。また、ログコメントとの紐付けも。
   *
   * @param \Doctrine\DBAL\Connection $db
   * @param \Doctrine\DBAL\Connection $dbLog ※こちらはログDB名の取得にのみ利用する。トランザクション処理のため、更新には利用しない。
   * @param string $operation
   * @param string $account
   * @param string|null $actionKey
   * @return string 1アクション識別用キー
   * @throws \Doctrine\DBAL\DBALException
   */
  public function saveLocationChangeLogSummary($db, $dbLog, $operation = '', $account = '', $actionKey = '')
  {
    $logDbName = $dbLog->getDatabase();
    $created = new \DateTimeImmutable();

    // データ保存
    $sql = <<<EOD
      INSERT INTO `{$logDbName}`.tb_product_location_log (
          account
        , operation
        , type
        , action_key
        , created
      ) VALUES (
          :account
        , :operation
        , :type
        , :actionKey
        , :created
      )

EOD;
    $stmt = $db->prepare($sql);
    $stmt->bindValue(':account', $account);
    $stmt->bindValue(':operation', $operation);
    $stmt->bindValue(':type', self::LOG_TYPE_AUTO_RECORD);
    $stmt->bindValue(':actionKey', $actionKey);
    $stmt->bindValue(':created', $created->format('Y-m-d H:i:s'));
    $stmt->execute();

    return $actionKey;
  }

  /**
   * ロケーションIDから、箱番号のみを取得
   * ※ロケーション 棚番号・位置コード一括削除用
   * @param int $warehouseId
   * @param array $targetIds
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function findCodeListByLocationIds($warehouseId, $targetIds = [])
  {
    $dbMain = $this->getConnection('main');

    $addSql = '';
    if ($targetIds) {
      $ids = [];
      foreach($targetIds as $id) {
        $ids[] = $dbMain->quote($id, \PDO::PARAM_INT);
      }
      $addSql = " AND v.id IN ( " . implode(',', $ids) . " ) ";
    }

    $sql = <<<EOD
      SELECT
          v.id
        , v.location_code
        , v.rack_code
        , v.place_code
        , v.box_code
      FROM v_location_rack v
      WHERE v.warehouse_id = :warehouseId
      {$addSql}
      ORDER BY v.location_code
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }


  /**
   * 棚番号でコード一覧取得
   * @param int $warehouseId
   * @param string $rackCode
   * @param array $targetIds
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function findCodeListByRackCode($warehouseId, $rackCode, $targetIds = [])
  {
    $dbMain = $this->getConnection('main');

    $addSql = '';
    if ($targetIds) {
      $ids = [];
      foreach($targetIds as $id) {
        $ids[] = $dbMain->quote($id, \PDO::PARAM_INT);
      }
      $addSql = " AND v.id IN ( " . implode(',', $ids) . " ) ";
    }

    $sql = <<<EOD
      SELECT
          v.id
        , v.location_code
        , v.rack_code
        , v.place_code
      FROM v_location_rack v
      WHERE v.warehouse_id = :warehouseId
        AND v.rack_code = :rackCode
      {$addSql}
      ORDER BY v.location_code
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->bindValue(':rackCode', $rackCode, \PDO::PARAM_STR);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * 棚番号一括変換
   * SQL一発では、先頭の棚番号だけを正確に変換することが困難（回りくどい）ため、一つずつ処理する。
   * @param int $warehouseId
   * @param string $fromRackCode
   * @param string $toRackCode
   * @param array $targetIds
   * @throws \Doctrine\DBAL\DBALException
   */
  public function changeRackCode($warehouseId, $fromRackCode, $toRackCode, $targetIds = [])
  {
    $logger = $this->getLogger();
    $dbMain = $this->getConnection('main');

    $targetList = $this->findCodeListByRackCode($warehouseId, $fromRackCode, $targetIds);

    $sql = <<<EOD
      UPDATE
      tb_location l
      SET l.location_code = :newLocation
      WHERE l.id = :id
EOD;
    $stmt = $dbMain->prepare($sql);

    foreach($targetList as $location) {
      $newLocation = preg_replace('/^' . preg_quote($fromRackCode) . '(-|$)/', $toRackCode . '${1}', $location['location_code']);

      $logger->info(sprintf('change rack code : %s => %s', $location['location_code'], $newLocation));

      $stmt->bindValue(':newLocation', $newLocation);
      $stmt->bindValue(':id', $location['id']);
      $stmt->execute();
    }

    return;
  }


  /**
   * 倉庫内件数取得（倉庫削除チェック）
   * @param int $warehouseId
   * @return integer
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getWarehouseLocationCount($warehouseId)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
        COUNT(*)
      FROM tb_location l
      WHERE l.warehouse_id = :warehouseId
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->execute();

    return intval($stmt->fetchColumn(0));
  }

  /**
   * 倉庫移動時、移動先ロケーション重複チェック
   * @param integer[] $locationIds 移動ロケーションID配列
   * @param TbWarehouse $warehouse 移動先倉庫
   * @return array 移動先に重複するロケーションコード
   */
  public function getDuplicatedWarehouseMoveLocations($locationIds, $warehouse)
  {
    $dbMain = $this->getConnection('main');

    $ids = [];
    foreach($locationIds as $id) {
      $ids[] = intval($id);
    }
    if (!$ids) {
      throw new \RuntimeException('no ids.');
    }
    $idsStr = implode(', ', $ids);

    $sql = <<<EOD
      SELECT
          l.id
        , l.location_code
      FROM tb_location l
      INNER JOIN tb_product_location pl ON l.id = pl.location_id
      INNER JOIN (
         SELECT
            l_move.location_code
         FROM tb_location l_move
         WHERE l_move.id IN (
            {$idsStr}
         )
      ) T ON l.location_code = T.location_code
      WHERE l.warehouse_id = :warehouseId
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouse->getId());
    $stmt->execute();

    $result = [];
    foreach($stmt as $row) {
      $result[] = $row;
    }

    return $result;
  }
  
  /**
   * 棚番号の最初の2文字ごとに、空棚数を集計した一覧を取得。
   * 棚リスト tb_location_rack_place_code はAccessから登録される。
   * @return array 棚数一覧
   */
  public function countExistRacks()
	{
    $dbMain = $this->getConnection('main');
    // VIEWとの連結が（主にVIEWの頑張り処理（小細工）のせいで）重いので、VIEWを一時テーブルへ移す
    $dbMain->query("DROP TEMPORARY TABLE IF EXISTS tmp_work_location_rack");
    $sql = <<<EOD
      CREATE TEMPORARY TABLE tmp_work_location_rack (
          warehouse_id INTEGER NOT NULL
        , rack_code VARCHAR(20) NOT NULL DEFAULT ''
        , place_code VARCHAR(20) NOT NULL DEFAULT ''
        , PRIMARY KEY (`warehouse_id`, `rack_code`, `place_code`)
      ) ENGINE=InnoDB DEFAULT CHARACTER SET utf8
EOD;
    $dbMain->query($sql);

    $sql = <<<EOD
      INSERT INTO tmp_work_location_rack (
          warehouse_id
        , rack_code
        , place_code
      )
      SELECT
          v.warehouse_id
        , v.rack_code
        , v.place_code
      FROM v_location_rack v
      GROUP BY v.warehouse_id, v.rack_code, v.place_code
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->execute();

    $sql = <<<EOD
      SELECT
          w.id as warehouseId
        , CONCAT(w.symbol, SUBSTR(c.rack_code,1,1)) AS RackNo
        , SUM(
            CASE 
              WHEN v.rack_code IS NULL THEN 1
              ELSE 0
            END) AS RackCo
      FROM tb_location_rack_place_code c
      JOIN tb_warehouse w ON c.warehouse_id = w.id
      LEFT JOIN tmp_work_location_rack v ON c.warehouse_id = v.warehouse_id
          AND c.rack_code    = v.rack_code
          AND c.place_code   = v.place_code
      GROUP BY RackNo
      ORDER BY warehouseId
EOD;

    $stmt = $dbMain->prepare($sql);
    $stmt->execute();
    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }


  /**
   * 全倉庫の空き棚一覧を返却。
   * countというがcountするのではなく一覧返却する。find
   * @return unknown
   */
  public function countExistRacks2()
  {
    $dbMain = $this->getConnection('main');
    // VIEWとの連結が（主にVIEWの頑張り処理（小細工）のせいで）重いので、VIEWを一時テーブルへ移す
    $dbMain->query("DROP TEMPORARY TABLE IF EXISTS tmp_work_location_rack");
    $sql = <<<EOD
      CREATE TEMPORARY TABLE tmp_work_location_rack (
          warehouse_id INTEGER NOT NULL
        , rack_code VARCHAR(20) NOT NULL DEFAULT ''
        , place_code VARCHAR(20) NOT NULL DEFAULT ''
        , PRIMARY KEY (`warehouse_id`, `rack_code`, `place_code`)
      ) ENGINE=InnoDB DEFAULT CHARACTER SET utf8
EOD;
    $dbMain->query($sql);

    $sql = <<<EOD
      INSERT INTO tmp_work_location_rack (
          warehouse_id
        , rack_code
        , place_code
      )
      SELECT
          v.warehouse_id
        , v.rack_code
        , v.place_code
      FROM v_location_rack v
      GROUP BY v.warehouse_id, v.rack_code, v.place_code
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->execute();

    $sql = <<<EOD
			SELECT
          w.id as warehouse_id
        , CONCAT(w.symbol, SUBSTR(c.rack_code,1,1)) AS rack_initial
        , c.rack_code
        , c.place_code
        , c.location_type
      FROM tb_location_rack_place_code c
      JOIN tb_warehouse w ON c.warehouse_id = w.id
      LEFT JOIN tmp_work_location_rack v ON c.warehouse_id = v.warehouse_id
          AND c.rack_code    = v.rack_code
          AND c.place_code   = v.place_code
      WHERE v.rack_code IS NULL
      ORDER BY c.rack_code
             , c.place_code
EOD;

    $stmt = $dbMain->prepare($sql);
    $stmt->execute();
    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
	}

  /**
   * 空の棚場所一覧を取得
   * @param $warehouseId
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function findEmptyRacks($warehouseId)
  {
    $dbMain = $this->getConnection('main');

    // VIEWとの連結が（主にVIEWの頑張り処理（小細工）のせいで）重いので、VIEWを一時テーブルへ移す
    $dbMain->query("DROP TEMPORARY TABLE IF EXISTS tmp_work_location_rack");
    $sql = <<<EOD
      CREATE TEMPORARY TABLE tmp_work_location_rack (
          warehouse_id INTEGER NOT NULL
        , rack_code VARCHAR(20) NOT NULL DEFAULT ''
        , place_code VARCHAR(20) NOT NULL DEFAULT ''
        , PRIMARY KEY (`warehouse_id`, `rack_code`, `place_code`)
      ) ENGINE=InnoDB DEFAULT CHARACTER SET utf8
EOD;
    $dbMain->query($sql);

    $sql = <<<EOD
      INSERT INTO tmp_work_location_rack (
          warehouse_id
        , rack_code
        , place_code
      )
      SELECT
          v.warehouse_id
        , v.rack_code
        , v.place_code
      FROM v_location_rack v
      WHERE v.warehouse_id = :warehouseId
      GROUP BY v.warehouse_id, v.rack_code, v.place_code
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->execute();

    $sql = <<<EOD
      SELECT
          c.rack_code
        , c.place_code
        , c.location_type
      FROM tb_location_rack_place_code c
      LEFT JOIN tmp_work_location_rack v ON c.warehouse_id = v.warehouse_id
                                        AND c.rack_code    = v.rack_code
                                        AND c.place_code   = v.place_code
      WHERE c.warehouse_id = :warehouseId
        AND v.rack_code IS NULL
      ORDER BY c.rack_code
             , c.place_code
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->execute();

    $result = $stmt->fetchAll(\PDO::FETCH_ASSOC);
    return $result;


  }

  /**
   * 空の棚一覧 移動確認用データ取得
   * 箱番号で一致するデータを取得する。
   * @param $boxCode
   * @return array
   */
  public function findLocationsByBoxCode($warehouseId, $boxCode)
  {
    /** @var \Doctrine\DBAL\Connection $dbMain */
    $dbMain = $this->getConnection('main');
    $boxCodeRegexp = '(^|-)' . str_replace('\\', '\\\\', preg_quote($boxCode)) . '$';
    $sql = <<<EOD
        SELECT
          l.*
        FROM tb_location l
        /* 削除予定ロケーションは除外 */
        INNER JOIN (
         SELECT
             pl.location_id
          FROM tb_product_location pl
          WHERE pl.position >= 0
          GROUP BY pl.location_id
        ) T ON l.id = T.location_id
        WHERE l.warehouse_id = :warehouseId
          AND l.location_code REGEXP :boxCodeReg
        ORDER BY l.location_code
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->bindValue(':boxCodeReg', $boxCodeRegexp, \PDO::PARAM_STR);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }
  
  /**
   * 指定された倉庫のロケーションを全て取得する
   * @param int $warehouseId 倉庫ID
   * @return array ロケーション情報の配列
   */
  public function findLocationsByWarehouseId($warehouseId) {
    /** @var \Doctrine\DBAL\Connection $dbMain */
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
        SELECT
          l.*
        FROM tb_location l
        WHERE l.warehouse_id = :warehouseId
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->execute();
    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

    /**
     * 空の棚一覧 移動確認用データ取得
     * 箱番号で一致するデータを取得する。
     * @param $boxCode
     * @return array
     */
    public function findAllLocations()
    {
        /** @var \Doctrine\DBAL\Connection $dbMain */
        $dbMain = $this->getConnection('main');
        $boxCodeRegexp = '([^-]*\\-S|[^-]*\\-C)' ;
        $sql = <<<EOD
        SELECT
          l.location_code
        FROM tb_location l
        /* 削除予定ロケーションは除外 */
        WHERE l.location_code REGEXP :boxCodeReg
        ORDER BY l.location_code
EOD;
        $stmt = $dbMain->prepare($sql);
        $stmt->bindValue(':boxCodeReg', $boxCodeRegexp, \PDO::PARAM_STR);
        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }

    /**
     * 空の棚一覧 移動確認用データ取得
     * 箱番号で一致するデータを取得する。
     * @param $warehouseId
     * @param $boxCode
     * @return array
     */
    public function findLocationsWithBoxCode($boxCode)
    {
        /** @var \Doctrine\DBAL\Connection $dbMain */
        $dbMain = $this->getConnection('main');
        $boxCodeRegexp = '(-)' . str_replace('\\', '\\\\', preg_quote($boxCode)) . '$';
        $sql = <<<EOD
        SELECT
          l.location_code
        FROM tb_location l
        /* 削除予定ロケーションは除外 */
        WHERE l.location_code REGEXP :boxCodeReg
        ORDER BY l.location_code
EOD;
        $stmt = $dbMain->prepare($sql);
        $stmt->bindValue(':boxCodeReg', $boxCodeRegexp, \PDO::PARAM_STR);
        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }

  /**
   * 棚番号、位置番号で取得
   * @param $warehouseId
   * @param $rackCode
   * @param $placeCode
   * @return array
   * @throws \Doctrine\DBAL\DBALException
   */
  public function findByRackPlaceCode($warehouseId, $rackCode, $placeCode)
  {
    /** @var \Doctrine\DBAL\Connection $dbMain */
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
        SELECT
          r.location_code
        FROM v_location_rack r
        WHERE r.warehouse_id = :warehouseId
          AND r.rack_code = :rackCode
          AND r.place_code = :placeCode
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->bindValue(':rackCode', $rackCode, \PDO::PARAM_STR);
    $stmt->bindValue(':placeCode', $placeCode, \PDO::PARAM_STR);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }



  /**
   * ロケーション文字列 入力補助変換
   * @param string $code
   * @return string
   */
  public function fixLocationCode($code)
  {
    if ($code !== '_new') { // _new のみ小文字許容
      $code = trim(strtoupper(mb_convert_kana($code, 'as')));
    }
    return $code;
  }

  /**
   * ロケーション文字列 書式チェック
   * @param string $code
   * @return bool
   */
  public function isValidLocationCode($code)
  {
    return  ($code === '_new')
    || boolval(preg_match('/^[A-Z0-9-_]+$/', $code))
      ;
  }

  /**
   * 現状存在する箱ロケーションの頭2文字の一覧を取得する
   *
   * @return array
   */
  public function findExistsBoxPlaceCodeByWarehouseIds($warehouseIdList)
  {
    $idsStr = implode(',', $warehouseIdList);
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
        w.id AS warehouseId
        , w.symbol
        , SUBSTR(l.location_code,1,1) AS placeInitial
        , SUBSTR(l.location_code,2,1) AS placeNum
      FROM tb_location l
      INNER JOIN tb_warehouse w ON l.warehouse_id = w.id
      INNER JOIN (
        SELECT
          pl.location_id
          , SUM(pl.stock) AS stock_total
        FROM tb_product_location pl
        WHERE pl.position >= 0
        GROUP BY pl.location_id
      ) AS T ON l.id = T.location_id
      WHERE
        w.id IN (
          {$idsStr}
        )
      GROUP BY warehouseId, SUBSTR(l.location_code,1,2)
      ORDER BY warehouseId, SUBSTR(l.location_code,1,2);
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseIdList', $warehouseIdList, $dbMain::PARAM_INT_ARRAY);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  public function countNumOfBoxWithLessThan4InStockByWarehouseIds($warehouseIdList)
  {
    $idsStr = implode(',', $warehouseIdList);
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
        w.id AS warehouseId
        , SUBSTR(l.location_code,1,1) AS placeInitial
        , SUBSTR(l.location_code,2,1) AS placeNum
        , COUNT(SUBSTR(l.location_code,1,2)) AS stockTotal
      FROM tb_location l
      INNER JOIN tb_warehouse w ON l.warehouse_id = w.id
      INNER JOIN (
        SELECT
          pl.location_id
          , SUM(pl.stock) AS stock_total
        FROM tb_product_location pl
        WHERE pl.position >= 0
        GROUP BY pl.location_id
      ) AS T ON l.id = T.location_id
      WHERE
        w.id IN (
          {$idsStr}
        )
        AND T.stock_total <= 4
      GROUP BY warehouseId, SUBSTR(l.location_code,1,2)
      ORDER BY warehouseId, SUBSTR(l.location_code,1,2);
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':warehouseIdList', $warehouseIdList, $dbMain::PARAM_INT_ARRAY);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  public function countMovedBoxBetweenWarehouse()
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
          l.warehouse_id
        , l.move_furuichi_warehouse_flg AS `isMovedFuruichi`
        , COUNT(*) AS stockTotal
        , MAX(l.updated) AS lastUpdate
      FROM tb_location l
      INNER JOIN (
        SELECT
            pl.location_id
          , COUNT(pl.ne_syohin_syohin_code) AS product_num
          , SUM(pl.stock) AS stock_total
        FROM tb_product_location pl
        WHERE pl.position >= 0
        GROUP BY pl.location_id
      ) AS T ON l.id = T.location_id
      WHERE l.move_furuichi_warehouse_flg IS NOT null
      GROUP BY l.warehouse_id, l.move_furuichi_warehouse_flg
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * SKU毎に、指定条件中に手動変更した在庫数の合計値を配列で返却する
   * @param array $conditions
   * @param string $sortKey
   * @param boolean|string|integer $sortDesc
   * @return array 次のキーを持つ連想配列の配列
   * 'ne_syohin_syohin_code' => sku,
   * 'baika_genka' => 売価原価（最新）,
   * 'diff' => 該当SKUの指定条件に一致する操作による在庫変動数の合計
   */
  public function findManualChangeStockNumber($conditions, $sortKey, $sortDesc)
  {
    $wheres = [];
    $params = [];
    $addJoin = '';
    // 条件：対象日From（必須）
    $wheres[] = 'r.log_date >= :targetDateFrom';
    $params[':targetDateFrom'] = $conditions['targetDateFrom'];
    // 条件：対象日To
    if ($conditions['targetDateTo']) {
      $wheres[] = 'r.log_date <= :targetDateTo';
      $params[':targetDateTo'] = $conditions['targetDateTo'];
    }
    // 条件：倉庫ID
    if ($conditions['warehouseId']) {
      $wheres[] = '(r.warehouse_id = :warehouseId OR r.pre_warehouse_id = :warehouseId)';
      $params[':warehouseId'] = $conditions['warehouseId'];
    }
    // 条件：SKU
    if ($conditions['sku']) {
      $wheres[] = 'r.ne_syohin_syohin_code LIKE :sku';
      $params[':sku'] = $conditions['sku'] . '%';
    }
    // 条件：理由
    if ($conditions['reason']) {
      $wheres[] = 'c.comment LIKE :reason';
      $params[':reason'] = '%' . $conditions['reason'] . '%';
    }
    // 条件：除外商品を除く
    if ($conditions['exceptExcludeProducts']) {
      $addJoin = <<<EOD
        LEFT JOIN tb_stock_change_history_exclude_product exclude
          ON pci.daihyo_syohin_code = exclude.daihyo_syohin_code
EOD;
      $wheres[] = 'exclude.daihyo_syohin_code IS NULL';
    }
    $addWheres = '';
    if ($wheres) {
      $addWheres = ' AND ' . implode(' AND ', $wheres);
    }

    // ソート
    $addOrderBy = '';
    switch ($sortKey) {
      case 'sku':
        $addOrderBy = 'ne_syohin_syohin_code';
        break;
      case 'baikaGenka':
        $addOrderBy = 'baika_genka';
        break;
      case 'diff':
        $addOrderBy = 'diff';
        break;
      case 'totalBaikaGenka':
        $addOrderBy = 'baika_genka * SUM(r.stock - r.pre_stock)';
        break;
    }
    $addOrderBy .= $sortDesc ? ' DESC' : ' ASC';

    $logDbName = $this->getConnection('log')->getDataBase();
    $sql = <<<EOD
      SELECT
        r.ne_syohin_syohin_code,
        vp.baika_genka,
        SUM(r.stock - r.pre_stock) as diff
      FROM
        {$logDbName}.tb_product_location_record_log r
        INNER JOIN tb_productchoiceitems pci
          ON r.ne_syohin_syohin_code = pci.ne_syohin_syohin_code
        INNER JOIN v_product_price vp
          ON pci.daihyo_syohin_code = vp.daihyo_syohin_code
        INNER JOIN {$logDbName}.tb_product_location_log l
          ON r.action_key = l.action_key
        LEFT JOIN {$logDbName}.tb_product_location_log_comment c
          ON r.action_key = c.action_key
        {$addJoin}
      WHERE
        l.operation = :operation
        {$addWheres}
      GROUP BY
        r.ne_syohin_syohin_code
      ORDER BY
        {$addOrderBy}
EOD;
    $dbMain = $this->getConnection('main');
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':operation', TbLocationRepository::LOG_OPERATION_WEB_PRODUCT_DETAIL, \PDO::PARAM_STR);
    foreach ($params as $k => $v) {
      $stmt->bindValue($k, $v, \PDO::PARAM_STR);
    }
    $stmt->execute();
    $list = $stmt->fetchAll(\PDO::FETCH_ASSOC);
    // 条件：変化無しを除く(HAVING句で処理すると重かったのでここで。)
    if ($conditions['exceptNoDiff']) {
      // インデックスを詰めておかないと、jsonで配列形式([{}, {}, ...])にならない。
      $list = array_values(array_filter($list, function ($item) {
        return (int)$item['diff'] !== 0; 
      }));
    }
    return $list;
  }

  /**
   * RFID読取ロケーション編集画面 データ取得
   * @param TbLocation $location
   * @return array
   */
  public function findLocationDetailDataForRfid($location)
  {
    $data = [];

    $data['location'] = [
      'id' => $location->getId(),
      'locationCode' => $location->getLocationCode(),
    ];

    // 倉庫情報取得
    $doctrine = $this->getContainer()->get('doctrine');
    /** @var TbWarehouseRepository $repoWarehouse */
    $repoWarehouse = $doctrine->getRepository('MiscBundle:TbWarehouse');
    /** @var TbWarehouse $warehouse */
    $warehouse = $repoWarehouse->find($location->getWarehouseId());
    $data['warehouse'] = $warehouse->toScalarArray();

    $data['productLocations'] = [];
    $productLocations = $location->getProductLocations()->filter(function($productLocation) {
      /** @var TbProductLocation $productLocation */
      return $productLocation->getPosition() >= 0;
    });

    foreach($productLocations as $productLocation) {
      /** @var TbProductLocation $productLocation */
      $loc = $productLocation->toScalarArray('camel');

      $choiceItem = $productLocation->getChoiceItem();
      $loc['image'] = $choiceItem->getProduct()->getImageUrl(
        sprintf('//%s/images/', $this->getContainer()->getParameter('host_plusnao'))
      );

      $data['productLocations'][] = $loc;
    }

    return $data;
  }

  /**
   * 箱コードから、該当するロケーションコードリストを取得して返す。
   * @param string $boxCode 箱コード
   * @param int $warehouseId 倉庫ID
   * @return array
   */
  public function findLocationCodesByBoxCode($boxCode, $warehouseId)
  {
    $sql = <<<EOD
      SELECT
        location_code
      FROM
        tb_location
      WHERE
        location_code LIKE :boxCode
        AND warehouse_id = :warehouseId
EOD;
    $dbMain = $this->getConnection('main');
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':boxCode', '%-' . $boxCode, \PDO::PARAM_STR);
    $stmt->bindValue(':warehouseId', $warehouseId, \PDO::PARAM_INT);
    $stmt->execute();
    return $stmt->fetchAll(\PDO::FETCH_COLUMN);
  }
}
