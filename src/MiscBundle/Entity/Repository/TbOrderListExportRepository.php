<?php

namespace MiscBundle\Entity\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use forestlib\Doctrine\ORM\LimitableNativeQuery;

/**
 * TbOrderListExportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbOrderListExportRepository extends BaseRepository
{

	/**
   * @param array $conditions
   * @param array $orders
   * @param int $page
   * @param int $limit
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
     */
	public function findByVendor($conditions = [], $orders = [], $page = 1, $limit = 100)
  {
    $em = $this->getEntityManager();

    $sqlSelect = <<<EOD
      SELECT
        ole.*, pa.name, COALESCE(su.username, suc.username, suya.username) as username, pa.login_name,
        CASE ole.export_status WHEN 0 THEN '処理開始' WHEN 1 THEN 'データ取得中' WHEN 2 THEN 'Excel Book生成中' WHEN 3 THEN 'Sheet1生成中' WHEN 4 THEN 'Sheet2生成中' WHEN 5 THEN 'Sheet3生成中' WHEN 6 THEN '完了' WHEN 9 THEN 'エラー' END as status_str
EOD;

    $sqlBody = <<<EOD
  	FROM tb_order_list_export ole
    LEFT JOIN purchasing_agent pa ON pa.id = ole.vendor
    LEFT JOIN symfony_users su ON su.id = ole.account and ole.is_forest_staff = 1
    LEFT JOIN symfony_user_client suc ON suc.id = ole.account and ole.is_client = 1
    LEFT JOIN symfony_user_yahoo_agent suya ON suya.id = ole.account and ole.is_yahoo_agent = 1
    ORDER BY ole.created DESC
EOD;
    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('id', 'id', 'integer');
    $rsm->addScalarResult('vendor', 'vendor', 'integer');
    $rsm->addScalarResult('status_str', 'status_str', 'string');
    $rsm->addScalarResult('total_products', 'total_products', 'integer');
    $rsm->addScalarResult('account', 'account', 'integer');
    $rsm->addScalarResult('last_download', 'last_download', 'datetime');
    $rsm->addScalarResult('created', 'created', 'datetime');
    $rsm->addScalarResult('updated', 'updated', 'datetime');
    $rsm->addScalarResult('file', 'file', 'string');
    $rsm->addScalarResult('message', 'message', 'string');
    $rsm->addScalarResult('name', 'name', 'string');
    $rsm->addScalarResult('username', 'username', 'string');
    $rsm->addScalarResult('login_name', 'login_name', 'string');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }
}
