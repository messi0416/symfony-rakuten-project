<?php

namespace MiscBundle\Entity\Repository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use MiscBundle\Entity\TbPlusnaoproductdirectory;
use MiscBundle\Entity\TbSetting;
use MiscBundle\Entity\TbShippingdivision;
use forestlib\Doctrine\ORM\LimitableNativeQuery;
use MiscBundle\Entity\TbProductchoiceitems;
use MiscBundle\Entity\TbProductchoiceitemsShippingdivisionPending;
use MiscBundle\Exception\BusinessException;
use MiscBundle\Util\BatchLogger;

/**
 * TbProductchoiceitemsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbProductchoiceitemsRepository extends BaseRepository
{
  /**
   * 代表商品コードで取得
   * @param string
   * @return TbProductchoiceitems[]|Collection
   */
  public function findByDaihyoSyohinCode($code)
  {
    $db = $this->getConnection('main');

    $qb = $this->createQueryBuilder('pci');

    $qb->andWhere($qb->expr()->eq('pci.daihyoSyohinCode', $db->quote($code, \PDO::PARAM_STR)));
    $qb->addOrderBy('pci.displayOrder');

    return $qb->getQuery()->getResult();
  }
  
  /**
   * 代表商品コード指定で、SKUコードのみを取得する。
   * @param string $daihyoSyohinCode 代表商品コード
   */
  public function findSkuCodeOnlyByDaihyoSyohinCode($daihyoSyohinCode) {
    $sql = <<<EOD
      SELECT ne_syohin_syohin_code
      FROM tb_productchoiceitems 
      WHERE daihyo_syohin_code = :daihyoSyohinCode
      ORDER BY 並び順No
EOD;
    $stmt = $this->getConnection('main')->prepare($sql);
    $stmt->bindValue(':daihyoSyohinCode', $daihyoSyohinCode, \PDO::PARAM_STR);
    $stmt->execute();
    return $stmt->fetchAll(\PDO::FETCH_COLUMN);
  }

  /**
   * 代表商品コードと軸、軸コードで取得する。
   * @param string $daihyoSyohinCode 代表商品コード (not null)
   * @param string $bundleAxis まとめるための軸。rowまたはcolを指定する（not null）
   * @param string $axisCode 指定された軸コード（not null）
   * @return TbProductchoiceitems[]|Collection
   */
  public function findByDaihyoSyohinCodeAndAxis($daihyoSyohinCode, $bundleAxis, $axisCode)
  {
    $db = $this->getConnection('main');
    $qb = $this->createQueryBuilder('pci');
    $qb->andWhere($qb->expr()->eq('pci.daihyoSyohinCode', $db->quote($daihyoSyohinCode, \PDO::PARAM_STR)));
    $qb->andWhere($qb->expr()->eq('pci.' . $bundleAxis . 'code', $db->quote($axisCode, \PDO::PARAM_STR)));
    $qb->addOrderBy('pci.displayOrder');
    return $qb->getQuery()->getResult();
  }


  /**
   * 商品コード一覧で取得
   * @param array $codeList
   * @return TbProductchoiceitems[]|Collection
   */
  public function findBySyohinCodeList($codeList)
  {
    $qb = $this->createQueryBuilder('pci');

    $qb->andWhere($qb->expr()->in('pci.neSyohinSyohinCode', $codeList));

    $qb->addOrderBy('pci.daihyoSyohinCode');
    $qb->addOrderBy('pci.displayOrder');

    return $qb->getQuery()->getResult();
  }

  /**
   * 代表商品コードで横軸項目を取得
   * colcode, colname, support_colname, colname_enでGroup byする
   * @param string $daihyoSyohinCode 代表商品コード
   */
  public function findDistinctColDataByDaihyoSyohinCode($daihyoSyohinCode)
  {
    $sql = <<<EOD
    SELECT 
      t1.daihyo_syohin_code
      , t1.colcode
      , t1.colname
      , t1.support_colname
      , t1.colname_en
      , t1.sku_number
      , @num:=@num+1 AS `並び順No`
    FROM
      (    
        SELECT
          daihyo_syohin_code
          , colcode
          , colname
          , support_colname
          , colname_en
          , sku_number
          , MAX(並び順No) as 並び順No
        FROM
          tb_productchoiceitems
        WHERE
          daihyo_syohin_code = :daihyoSyohinCode
        GROUP BY
          colcode
          , colname
          , support_colname
          , colname_en
        ORDER BY
          並び順No
      ) AS t1,
      (SELECT @num:=0) AS dummy_t;
EOD;
    $stmt = $this->getConnection('main')->prepare($sql);
    $stmt->bindValue(':daihyoSyohinCode', $daihyoSyohinCode);
    $stmt->execute();
    $result = $stmt->fetchAll(\PDO::FETCH_ASSOC);
    if (!$result) {
      return null;
    }

    return $result;
  }

  /**
   * 代表商品コードで縦軸項目を取得
   * rowcode, rowname, support_colname, rowname_enでGroup byする
   * @param string $daihyoSyohinCode 代表商品コード
   */
  public function findDistinctRowDataByDaihyoSyohinCode($daihyoSyohinCode)
  {
    $sql = <<<EOD
    SELECT 
      t1.daihyo_syohin_code
      , t1.rowcode
      , t1.rowname
      , t1.support_rowname
      , t1.rowname_en
      , t1.sku_number
      , @num:=@num+1 AS `並び順No`
    FROM
      (     
        SELECT
          daihyo_syohin_code
          , rowcode
          , rowname
          , support_rowname
          , rowname_en
          , sku_number
          , MAX(並び順No) as 並び順No
        FROM
          tb_productchoiceitems
        WHERE
        daihyo_syohin_code = :daihyoSyohinCode
        GROUP BY
          rowcode
          , rowname
          , support_rowname
          , rowname_en
        ORDER BY
          並び順No
      ) AS t1,
      (SELECT @num:=0) AS dummy_t;
EOD;
    $stmt = $this->getConnection('main')->prepare($sql);
    $stmt->bindValue(':daihyoSyohinCode', $daihyoSyohinCode);
    $stmt->execute();
    $result = $stmt->fetchAll(\PDO::FETCH_ASSOC);
    if (!$result) {
      return null;
    }

    return $result;
  }

  /**
   * 画像ID反映
   * @param array $codeList
   * @return TbProductchoiceitems[]|Collection
   */
  public function setColorImageId($daihyoSyohinCode, $colorAxis)
  {
    $dbMain = $this->getConnection('main');

    $colname = "";
    if($colorAxis == 'row'){
      $colname = 'rowcode';
    } else if($colorAxis == 'col'){
      $colname = 'colcode';
    }

    $sql = <<<EOD
      UPDATE
      tb_productchoiceitems as pci
      SET pci.color_image_id = NULL
      WHERE pci.daihyo_syohin_code = :syohinCode
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':syohinCode', $daihyoSyohinCode, \PDO::PARAM_STR);
    $stmt->execute();

    $sql = <<<EOD
      UPDATE
      product_images_variation as piv, tb_productchoiceitems as pci
      SET pci.color_image_id = piv.color_image_id
      WHERE piv.daihyo_syohin_code = :syohinCode
      AND piv.daihyo_syohin_code = pci.daihyo_syohin_code
      AND piv.variation_code = pci.{$colname}
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':syohinCode', $daihyoSyohinCode, \PDO::PARAM_STR);
    $stmt->execute();

    return;
  }

  /**
   * 欠品商品一覧取得
   * @param array $conditions
   * @param array $orders
   * @param int $page
   * @param int $limit
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  public function findShortageProducts($conditions = [], $orders = [], $page = 1, $limit = 100)
  {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    $params = [];

    $sqlSelect = <<<EOD
      SELECT
          pci.ne_syohin_syohin_code
        , pci.`在庫数` AS stock
        , pci.発注残数 AS order_remain_num
        , v.受注数     AS order_num
        , v.引当数     AS assigned_num
        , v.未引当数   AS unassigned_num
        , v.伝票数     AS voucher_num
        , v.未引当数 - pci.発注残数 AS shortage
        , v.最終受注日 AS last_ordered
EOD;
    $sqlBody = <<<EOD
      FROM tb_productchoiceitems pci
      INNER JOIN v_product_stock_sales v ON pci.ne_syohin_syohin_code = v.ne_syohin_syohin_code
      WHERE pci.`受発注可能フラグ` = 0
        AND v.`未引当数` > 0
        AND pci.発注残数 < v.`未引当数`
EOD;

    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('ne_syohin_syohin_code', 'ne_syohin_syohin_code', 'string');
    $rsm->addScalarResult('order_remain_num', 'order_remain_num', 'integer');
    $rsm->addScalarResult('stock', 'stock', 'integer');
    $rsm->addScalarResult('order_num', 'order_num', 'integer');
    $rsm->addScalarResult('assigned_num', 'assigned_num', 'integer');
    $rsm->addScalarResult('unassigned_num', 'unassigned_num', 'integer');
    $rsm->addScalarResult('voucher_num', 'voucher_num', 'integer');
    $rsm->addScalarResult('shortage', 'shortage', 'integer');
    $rsm->addScalarResult('last_ordered', 'last_ordered', 'string');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $resultOrders = [];
    $defaultOrders = [
        'last_ordered' => 'DESC'
      , 'voucher_num' => 'DESC'
      , 'unassigned_num' => 'DESC'
      , 'ne_syohin_syohin_code' => 'ASC'
    ];

    if ($orders) {
      foreach($orders as $k => $v) {
        switch($k) {
          case 'daihyo_syohin_code':
//            $k = 'o.' . $k;
            break;
        }

        $resultOrders[$k] = $v;
        if (isset($defaultOrders[$k])) {
          unset($defaultOrders[$k]);
        }
      }
    }
    $query->setOrders(array_merge($resultOrders, $defaultOrders));

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;

  }

  /**
   * 欠品商品を含む受注一覧取得
   */
  public function findShortageOrders($conditions = [], $orders = [], $page = 1, $limit = 100)
  {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    $params = [];

    $sqlSelect = <<<EOD
      SELECT
          pci.ne_syohin_syohin_code
        , pci.`在庫数` AS stock
        , pci.発注残数 AS order_remain_num
        , v.受注数     AS order_num
        , v.引当数     AS assigned_num
        , v.未引当数   AS unassigned_num
        , v.伝票数     AS voucher_num
        , v.未引当数 - pci.発注残数 AS shortage
EOD;
    $sqlBody = <<<EOD
      FROM tb_productchoiceitems pci
      INNER JOIN v_product_stock_sales v ON pci.ne_syohin_syohin_code = v.ne_syohin_syohin_code
      WHERE pci.`受発注可能フラグ` = 0
        AND v.`未引当数` > 0
        AND pci.発注残数 < v.`未引当数`
EOD;

    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('ne_syohin_syohin_code', 'ne_syohin_syohin_code', 'string');
    $rsm->addScalarResult('order_remain_num', 'order_remain_num', 'integer');
    $rsm->addScalarResult('stock', 'stock', 'integer');
    $rsm->addScalarResult('order_num', 'order_num', 'integer');
    $rsm->addScalarResult('assigned_num', 'assigned_num', 'integer');
    $rsm->addScalarResult('unassigned_num', 'unassigned_num', 'integer');
    $rsm->addScalarResult('voucher_num', 'voucher_num', 'integer');
    $rsm->addScalarResult('shortage', 'shortage', 'integer');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $resultOrders = [];
    $defaultOrders = [
        'voucher_num' => 'DESC'
      , 'unassigned_num' => 'DESC'
      , 'ne_syohin_syohin_code' => 'ASC'
    ];

    if ($orders) {
      foreach($orders as $k => $v) {
        switch($k) {
          case 'daihyo_syohin_code':
//            $k = 'o.' . $k;
            break;
        }

        $resultOrders[$k] = $v;
        if (isset($defaultOrders[$k])) {
          unset($defaultOrders[$k]);
        }
      }
    }
    $query->setOrders(array_merge($resultOrders, $defaultOrders));

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
      $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }

  /**
   * バーコード用コードで1件取得
   * @param $productCode
   * @return TbProductchoiceitems|null
   */
  public function findByProductCode($productCode)
  {
    /** @var StringUtil $stringUtil */
    $stringUtil = $this->getContainer()->get('misc.util.string');
    $code = $stringUtil->convertJan13ToNum($productCode);
    if (!$code) {
      return null;
    }

    /** @var BaseRepository $repoCode */
    $repoCode = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbProductCode');
    /** @var TbProductCode $productCode */
    $productCode = $repoCode->find($code);
    if (!$productCode) {
      return null;
    }

    /** @var TbProductchoiceitems $choice */
    $choice = $this->find($productCode->getNeSyohinSyohinCode());
    return $choice;
  }

  /**
   * SHOPLISTバーコードで1件取得
   * @param string $barcode
   * @return TbProductchoiceitems|null
   */
  public function findByShoplistBarcode($barcode)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
        *
      FROM tb_shoplist_product_stock s
      WHERE s.`JANコード` = :janCode
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':janCode', $barcode);
    $stmt->execute();

    $stock = $stmt->fetch(\PDO::FETCH_ASSOC);
    if (!$stock) {
      return null;
    }

    $syohinCode = sprintf('%s%s%s', $stock['商品管理番号（商品URL）'], $stock['項目選択肢別在庫用横軸選択肢子番号'], $stock['項目選択肢別在庫用縦軸選択肢子番号']);
    /** @var TbProductchoiceitems $choice */
    $choice = $this->find($syohinCode);
    return $choice;
  }


  /**
   * 1件のSKUの発注未確定の受注数取得
   * @param TbProductchoiceitems $choice
   * @return int
   */
  public function getActiveOrderNum($choice)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
           SUM(a.受注数) AS cnt
      FROM tb_sales_detail_analyze a
      WHERE 1
        AND a.`キャンセル区分` = '0'
        AND a.`明細行キャンセル` = '0'
        AND a.`受注状態` <> '出荷確定済（完了）'
        AND a.`商品コード（伝票）` = :neSyohinSyohinCode
        AND a.`受注数` > 0
      GROUP BY a.`商品コード（伝票）`
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':neSyohinSyohinCode', $choice->getNeSyohinSyohinCode(), \PDO::PARAM_STR);
    $stmt->execute();

    $ret = intval($stmt->fetchColumn(0));
    return $ret;
  }

  /**
   * 指定されたロケーションに存在する全商品を取得
   * @param $locationId
   * @return TbProductchoiceitems[]|Collection
   */
  public function findItemsByLocationId($locationId)
  {
    // 画像一覧取得
    $sql = <<<EOD
      SELECT
        pci.*
      FROM tb_productchoiceitems pci
      INNER JOIN (
        SELECT
          DISTINCT pl.ne_syohin_syohin_code
        FROM tb_product_location pl
        WHERE pl.location_id = :locationId
      ) T ON pci.ne_syohin_syohin_code = T.ne_syohin_syohin_code
EOD;

    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    $rsm = new ResultSetMappingBuilder($em);
    $rsm->addRootEntityFromClassMetadata('MiscBundle:TbProductchoiceitems', 'pci');

    $query = $em->createNativeQuery($sql, $rsm);
    $query->setParameter('locationId', $locationId, \PDO::PARAM_INT);

    return $query->getResult();
  }

  /**
   * 代表商品に紐づくすべてのSKUについて送料設定IDを取得し、ne_syohin_syohin_codeをキー、shippingdivision_idを値とする連想配列で返却する。
   * @param unknown $daihyoSyohinCode
   */
  public function getAllShippingdivisionsWithArray($daihyoSyohinCode) {
    $result = $this->createQueryBuilder('pci')
        ->select('pci.neSyohinSyohinCode, pci.shippingdivisionId')
        ->where("pci.daihyoSyohinCode = :daihyoSyohinCode")
        ->setParameter("daihyoSyohinCode", $daihyoSyohinCode)
        ->getQuery()
        ->getResult();
    return array_column($result, 'shippingdivisionId', 'neSyohinSyohinCode');
  }

  /**
   * NE商品コード1件を引数として受け取り、指定されたSKUにサイズ軸があるかを検索し、あればサイズ軸の軸名（col, row）とコードを連想配列で返却する。
   * 2軸とも「サイズ」が含まれる場合は、サイズ軸の軸名をcol, rowの代わりにbothとする。
   * サイズ軸がない場合はサイズ軸の軸名をcol, rowの代わりにnoneとする。
   * 返り値は以下の形式となる。
   * {
   *   'asix' = 'col',// col, row, both, noneのいずれか
   *   'code' = 'XX', // col, rowの場合のみ
   *
   * まず、サイズ軸があると判定するのは以下の基準である。
   *
   * 1. 項目名に「サイズ」があればそれ（2項目とも「サイズ」が含まれていれば both として終了、コードは返却しない）
   * 2. 項目名に「カラー」があれば、それでない軸
   * 3. typeにsizeがあれば、それ
   *
   * 次に、サイズ軸が本当に軸として機能しているかを確認する。（サイズ軸があっても、実際には1つしか値がない場合がある（フリーサイズなど））
   * その場合はサイズ軸なしとする。
   *
   * その結果、サイズ軸がある場合はcol, rowとその値を設定して返却する。
   *
   * @param TbProductchoiceitems $sku 検索対象のSKU情報 (NotNull)
   */
  public function getSizeAxisAndValue(TbProductchoiceitems $sku) {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    // 返り値に使用する定数定義
    $colStr = 'col';
    $rowStr = 'row';
    $bothStr = 'both';
    $noneStr = 'none';

    $result = array();

    $product = $sku->getProduct();

    $axis = null;
    if (strpos($product->getColTypeName(), 'サイズ') !== FALSE) {
      if (strpos($product->getRowTypeName(), 'サイズ') !== FALSE) {
        $axis = $bothStr;
      } else {
        $axis = $colStr;
      }
    } else if (strpos($product->getRowTypeName(), 'サイズ') !== FALSE) {
      $axis = $rowStr;
    } else if (strpos($product->getColTypeName(), 'カラー') !== FALSE) {
      if (strpos($product->getRowTypeName(), 'カラー') !== FALSE) {
        $axis = $noneStr;
      } else {
        $axis = $rowStr;
      }
    } else if (strpos($product->getRowTypeName(), 'カラー') !== FALSE) {
      $axis = $colStr;
    } else if ($product->getColType() === 'size') {
      $axis = $colStr;
    } else if ($product->getRowType() === 'size') {
      $axis = $rowStr;
    } else {
      $axis = $noneStr;
    }
    $result['axis'] = $axis;

    // both, noneはここで終了
    if ($axis == $bothStr || $axis == $noneStr) {
      return $result;
    }

    // サイズ軸があった場合、サイズ軸に値のバリエーションがあるか確認し、バリエーションがなければサイズ軸はないものとして扱う
    // distinctしたいのでDQLで
    $em = $this->getContainer()->get('doctrine')->getManager('main');
    $query = $em->createQuery(
        'SELECT count(DISTINCT c.' . $axis . "code) AS num FROM MiscBundle:TbProductchoiceitems c WHERE c.daihyoSyohinCode = :daihyoSyohinCode"
        )->setParameter("daihyoSyohinCode", $product->getDaihyoSyohinCode()
    );
    $countResult = $query->getSingleResult();
    if ($countResult['num'] <= 1) {
      $result['axis'] = $noneStr;
      return $result;
    }

   // 軸があったので軸コードを取得
    $axisValueMethodName = "get" . ucfirst($axis) . "Code";
    $result['code'] = $sku->$axisValueMethodName();
    return $result;
  }

  /**
   * NE商品コード1件を引数として受け取り、引数のSKUとサイズ以外の軸が同一のProductchoiceItemsを検索して返却する。
   * （引数のSKUを含む）
   * @param String $neSyohinSyohinCode
   */
  public function findSameAxisItems(String $neSyohinSyohinCode) {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    $sku = $this->find($neSyohinSyohinCode);
    if (is_null($sku)) {
      return null;
    }
    $product = $sku->getProduct();

    // 軸情報を取得
    $sizeAxis = $this->getSizeAxisAndValue($sku);

    // サイズ軸があればサイズ軸が同じ値のSKU、サイズ軸がなければすべてのSKUと親商品を取得して返却する。
    $qb = $this->createQueryBuilder('pci')
        ->where("pci.daihyoSyohinCode = :daihyoSyohinCode")
        ->setParameter("daihyoSyohinCode", $product->getDaihyoSyohinCode());
    if ($sizeAxis['axis'] === 'row' || $sizeAxis['axis'] == 'col') {
      $sizeAxisValueMethodName = "get" . $sizeAxis['axis'] . "Code";
      $qb->andWhere("pci." . $sizeAxis['axis'] . "code = :sizeAxisValue")->setParameter("sizeAxisValue", $sku->$sizeAxisValueMethodName());

    // 両方サイズ軸ならば、指定のSKUのみ
    } else if ($sizeAxis['axis'] === 'both') {
      $qb->andWhere("pci.neSyohinSyohinCode = :neSyohinSyohinCode")->setParameter("neSyohinSyohinCode", $neSyohinSyohinCode);
    }
    return $qb->getQuery()->getResult();
  }

  /**
   * 指定された代表商品コードと、指定があれば軸、軸コードが一致するSKUの送料設定を更新する。
   * 引数に送料グループ種別を受け取り、対象の送料グループ種別の送料設定内で、サイズ・重量が許容される
   * 最も安い送料設定を、対象SKUの送料設定とする。
   * このメソッド内ではflushしないため、呼び出し元でflushすること。
   * <p>
   * 重量や3辺のサイズなどデータがない場合は、定形外であれば「定形外郵便(規格外250g以下)」宅配便であれば「宅配便(100)」とする。
   * <p>
   * 重量や3辺のサイズなどデータがない場合は、logInfoにログ情報を追加する。
   * <p>
   * ※このメソッドは、画面、ジョブ双方から呼ばれるため、実装では両方の仕様に対応するよう注意する事。
   *
   * @param String $daihyoSyohinCode 代表商品コード (not null)
   * @param String $groupCode (not null)
   * @param String $bundleAxis (nullable)
   * @param String $axisCode (nullable)
   * @param String $targetNeSyohinSyohinCode (nullable) 1SKUだけ更新の場合に指定
   * @param int $voucharNumber (nullable)  伝票番号
   * @param boolean $force (NotNull) 強制更新するか trueなら強制（現在価格チェックなし）。falseの場合は現在価格より高い場合は保留にする。
   * @param array $skuShippingdivisions SKUごとの配送方法の連想配列。neSyohinSyohinCodeがキー、shippingdivisionId が 値。
     *                               代表商品ごとに処理開始時点の値を保持する（あとから取ると書き換わっているため、先に確保したものを引数で引き回す。
     *                               force = false の場合必須
   * @param array $logInfo ログ出力のための情報を保存する配列
   * @return 0: SKU更新無し 1: SKU更新あり
   */
  public function updateSameAxisItems($daihyoSyohinCode, $groupCode, $bundleAxis, $axisCode, $targetNeSyohinSyohinCode, $voucharNumber, $force, $skuShippingdivisions, &$logInfo) {
    /** @var BatchLogger $logger */
    $logger = $this->getContainer()->get('misc.util.batch_logger');

    // 更新対象のSKUを取得
    $skuList = null;
    if ($bundleAxis) {
      $skuList = $this->findByDaihyoSyohinCodeAndAxis($daihyoSyohinCode, $bundleAxis, $axisCode);
    } else if ($targetNeSyohinSyohinCode) {
      $skuList[] = $this->find($targetNeSyohinSyohinCode);
    } else {
      $skuList = $this->findByDaihyoSyohinCode($daihyoSyohinCode);
    }
    $newShippingdivision = $this->getShippingdivision($skuList[0], $groupCode, $logInfo);

    $pendingRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbProductchoiceitemsShippingdivisionPending');
    $em = $pendingRepository->getEntityManager();

    // 現在値（バッチ開始時点の値）との比較を行う場合
    if (!$force) {
      $shippingRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbShippingdivision');
      $oldShippingdivisionId = $skuShippingdivisions[$skuList[0]->getNeSyohinSyohinCode()];
      if (is_null($oldShippingdivisionId)) {
        $oldShippingdivisionId = $skuList[0]->getProduct()->getShippingdivisionId();
      }
      // 念のため送料設定があるか判定
      if ($oldShippingdivisionId) {
        $oldShippingdivision = $shippingRepository->find($oldShippingdivisionId);

        // これまで設定済みの送料よりも、新しい送料のほうが価格が上がる場合は更新を行わない
        if ($oldShippingdivision && $newShippingdivision->getPrice() > $oldShippingdivision->getPrice()) {
          $pending = $pendingRepository->findPendingByAxisOrNeSyohinSyohinCode($daihyoSyohinCode, $bundleAxis, $axisCode, $targetNeSyohinSyohinCode);
          if ($pending) {
            $pending->setReflectStatus(TbProductchoiceitemsShippingdivisionPending::REFLECT_STATUS_CANCEL);
          }
          $pending = new TbProductchoiceitemsShippingdivisionPending();
          $pending->setDaihyoSyohinCode($daihyoSyohinCode);
          $pending->setBundleAxis($bundleAxis);
          $pending->setAxisCode($axisCode);
          $pending->setTargetNeSyohinSyohinCode($targetNeSyohinSyohinCode);
          $pending->setPrevShippingdivisionId($oldShippingdivision->getId());
          $pending->setPendingShippingdivisionId($newShippingdivision->getId());
          $pending->setTargetVoucharNumber($voucharNumber);
          $pending->setReflectStatus(TbProductchoiceitemsShippingdivisionPending::REFLECT_STATUS_PENDING);
          $em->persist($pending);
          $em->flush($pending);
          return 0;
        }
      }
    }

    // 設定を更新する場合は、既存の保留情報は削除
    $pending = $pendingRepository->findPendingByAxisOrNeSyohinSyohinCode($daihyoSyohinCode, $bundleAxis, $axisCode, $targetNeSyohinSyohinCode);
    if ($pending) {
      $pending->setReflectStatus(TbProductchoiceitemsShippingdivisionPending::REFLECT_STATUS_CANCEL);
      $em->flush($pending);
    }

    foreach ($skuList as $sku) {
      $sku->setShippingdivisionId($newShippingdivision->getId());
    }
    return 1;
  }

    /**
     * SKUと送料グループ種別を元に、送料を取得する。
     * 引数に送料グループ種別を受け取り、対象の送料グループ種別の送料設定内で、サイズ・重量が許容される
     * 最も安い送料設定を、対象SKUの送料設定とする。
     * <p>
     * 重量や3辺のサイズなどデータがない場合・重量・3辺サイズが合わない場合は、
     * 定形外であれば定形外デフォルト、宅配便であれば宅配便デフォルト、ゆうパケットであればゆうパケットデフォルトとする
     * （それぞれtb_settingsで、「KEY_SHIPPING_DEFAULT_TEIKEIGAI」「KEY_SHIPPING_DEFAULT_TAKUHAIBIN」「KEY_SHIPPING_DEFAULT_YUU_PACKET」でIDを保持）
     *
     * 1件しかない送料グループ種別では、該当の送料とする。
     * <p>
     * @param TbProductchoiceitems $sku 送料設定対象のSKU
     * @param int $groupCode 送料グループ種別コード
     * @return TbShippingdivision 送料設定
     * @throws UnexpectedValueException 1件しかないはずの送料グループに複数の送料設定が存在する
     */
    private function getShippingdivision($sku, $groupCode, &$logInfo) {
      /** @var BatchLogger $logger */
      $logger = $this->getContainer()->get('misc.util.batch_logger');

      $shippingRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbShippingdivision');
      $qb = $shippingRepository->createQueryBuilder('s', 's.id');
      $qb->andWhere('s.shippingGroupCode = :groupCode')->setParameter(':groupCode', $groupCode, \PDO::PARAM_STR);
      $qb->andWhere('s.terminateFlg = :terminateFlg')->setParameter(':terminateFlg', 0, \PDO::PARAM_INT);
      $qb->addOrderBy('s.price', 'ASC');
      $shippingList = $qb->getQuery()->getResult();

      $startId = null; // 探索スタート位置　送料設定リスト（価格順）のなかで、このID以降のものだけ探索する。

      // 宅配便
      if ($groupCode == TbShippingdivision::SHIPPING_GROUP_CODE_TAKUHAIBIN) {
        // 3辺いずれかが未指定の場合
        if (empty($sku->getDepth()) || empty($sku->getWidth()) || empty($sku->getHeight())) {
          $tbSettingRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbSetting');
          $tbSetting = $tbSettingRepository->find(TbSetting::KEY_SHIPPING_DEFAULT_TAKUHAIBIN);
          $startId = $tbSetting->getSettingVal();
        } else {
          $startId = $shippingList[0]->getId();
        }

      // 定形外
      } else if ($groupCode == TbShippingdivision::SHIPPING_GROUP_CODE_TEIKEIGAI) {
        // 重量または3辺いずれかが未指定の場合
        if (empty($sku->getWeight()) || empty($sku->getDepth()) || empty($sku->getWidth()) || empty($sku->getHeight())) {
          // NEディレクトリが「ジュエリー・腕時計」ならば、デフォルトはTbSetting設定値ではなく、定形外郵便(規格内)
          $NeDirRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbPlusnaoproductdirectory');
          $dir = $NeDirRepository->find($sku->getProduct()->getNeDirectoryId());
          if (TbPlusnaoproductdirectory::FIELD1_VALUE_JEWELRY_WATCH == $dir->getField01()) {
            $startId = TbShippingdivision::SHIPPINGDIVISION_ID_TEIKEIGAI_STANDARD;
          } else {
            $tbSettingRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbSetting');
            $tbSetting = $tbSettingRepository->find(TbSetting::KEY_SHIPPING_DEFAULT_TEIKEIGAI);
            $startId = $tbSetting->getSettingVal();
          }
        } else {
          $startId = $shippingList[0]->getId();
        }
      // ゆうパケット
      } else if ($groupCode == TbShippingdivision::SHIPPING_GROUP_CODE_YUU_PACKET) {
        // 重量または3辺いずれかが未指定の場合
        if (empty($sku->getWeight()) || empty($sku->getDepth()) || empty($sku->getWidth()) || empty($sku->getHeight())) {
          $tbSettingRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbSetting');
          $tbSetting = $tbSettingRepository->find(TbSetting::KEY_SHIPPING_DEFAULT_YUU_PACKET);
          $startId = $tbSetting->getSettingVal();
        } else {
          $startId = $shippingList[0]->getId();
        }
      // その他の送料設定
      } else {
        if (count($shippingList) != 1) { // その他の送料設定は必ず1件のみ
          throw new \UnexpectedValueException("送料設定状態が正しくありません。選択した送料設定のデータが1件だけ存在するか確認してください");
        } else {
          $startId = $shippingList[0]->getId();
        }
      }

      // 3辺合計　未設定ならば0と同じとして扱う
      $sumSize = ($sku->getDepth() ? $sku->getDepth() : 0)
          + ($sku->getWidth() ? $sku->getWidth() : 0)
          + ($sku->getHeight() ? $sku->getHeight() : 0);

      $isSkip = true; // startIdが出てくるまではスキップ中　出てきたらチェック開始

      foreach ($shippingList as $shipping) {
        if ($isSkip == true && $shipping->getId() == $startId) {
          $isSkip = false;
        }
        if ($isSkip) {
          continue;
        }

        // 重量、3辺合計、個別辺、いずれかがオーバーならば次の送料設定へ
        if ($shipping->getMaxWeight() && $sku->getWeight() && $sku->getWeight() > $shipping->getMaxWeight()) {
          continue;
        } else if ($shipping->getMaxThreeEdgeSum() && $sumSize > 0 && $sumSize > $shipping->getMaxThreeEdgeSum()) {
          continue;
        } else if ($shipping->getMaxThreeEdgeIndividual()) {
          // 3辺それぞれの最大が設定されているので、個別の数字に分割
          $limit = explode(',', $shipping->getMaxThreeEdgeIndividual());
          rsort($limit, SORT_NUMERIC);
          $size = array($sku->getDepth(), $sku->getWidth(), $sku->getHeight());
          rsort($size, SORT_NUMERIC);
          if ($size[0] > $limit[0] || $size[1] > $limit[1] || $size[2] > $limit[2]) {
            continue;
          }
        }
        // サイズチェックをすべて通過すれば現在のもので確定
        return $shipping;
      }
      // ここまでで決まらなければログに出力し、デフォルトの指定がある配送方法はデフォルト値。1件のものは1件
      $logInfo['data'][] = array(
          'ne_syohin_syohin_code' => $sku->getNeSyohinSyohinCode(),
          '送料グループ種別' => $groupCode
      );

      $startId = null;
      if ($groupCode == TbShippingdivision::SHIPPING_GROUP_CODE_TAKUHAIBIN) {
        $tbSettingRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbSetting');
        $tbSetting = $tbSettingRepository->find(TbSetting::KEY_SHIPPING_DEFAULT_TAKUHAIBIN);
        $startId = $tbSetting->getSettingVal();
        foreach ($shippingList as $shipping) {
          if ($shipping->getId() == $startId) {
            return $shipping;
          }
        }
      } else if ($groupCode == TbShippingdivision::SHIPPING_GROUP_CODE_TEIKEIGAI) {
        $tbSettingRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbSetting');
        $tbSetting = $tbSettingRepository->find(TbSetting::KEY_SHIPPING_DEFAULT_TEIKEIGAI);
        $startId = $tbSetting->getSettingVal();
        foreach ($shippingList as $shipping) {
          if ($shipping->getId() == $startId) {
            return $shipping;
          }
        }
      } else if ($groupCode == TbShippingdivision::SHIPPING_GROUP_CODE_YUU_PACKET) {
        $tbSettingRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbSetting');
        $tbSetting = $tbSettingRepository->find(TbSetting::KEY_SHIPPING_DEFAULT_YUU_PACKET);
        $startId = $tbSetting->getSettingVal();
        foreach ($shippingList as $shipping) {
          if ($shipping->getId() == $startId) {
            return $shipping;
          }
        }
      }

      // ここに来た配送方法は必ず1件のみなので、1件目を利用
      return $shippingList[0];
    }

    /**
     * tb_sales_detail の 出荷確定日、または伝票番号をベースにして、指定された範囲の単品購入を検索し、
     * その配送方法をtb_productchoiceitemsの送料設定に反映します。
     *
     * ※変数、引数が多すぎなので、これ以降の処理だけクラスとして切り出し、クラス変数で処理すればだいぶすっきりしそう。
     * 　が、他にそのような例がないので、ひとまず引数で引き回す。
     *
     * @param \DateTime $fromDate 対象とする出荷確定日の開始日（この日を含む）(nullable)
     * @param \DateTime $toDate 対象とする出荷確定日の終了日（この日を含む）(nullable)
     * @param int $fromNo 対象とする伝票番号の開始番号（この番号を含む）。0の場合指定なしとして扱う(not null)
     * @param int $toNo 対象とする伝票番号の終了番号（この番号を含む）。0の場合指定なしとして扱う(not null)
     * @return 送料設定が出来なかったSKU情報の配列を返却する
     */
    public function updateProductchoiceitemsShippingdivisions(\Datetime $fromDate = null, \Datetime $toDate = null, int $fromNo = null, int $toNo = null, $logger) {

      $dmRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbDeliveryMethod');
      $deliveryMethods = $dmRepository->getTbDeliveryMethodsWithShippingGroupCode();
      $analyzeRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbSalesDetailAnalyze');
      $orders = $analyzeRepository->getSingleItemPurchaseShippingMethod($fromDate, $toDate, $fromNo, $toNo); // 対象となる単品注文を取得
      $logInfo = array('message' => '想定外の配送コードの受注リスト'); // ログ出力用の文字列

      // 対象がなければここで処理終了
      if (count($orders) == 0) {
        return $logInfo;
      }

      $logger->addDbLog($logger->makeDbLog(null, "処理対象の受注レコード件数：" . count($orders) . "件（重複SKU込み）"));

      $this->getEntityManager()->beginTransaction();

      // 取得した受注を1件ずつループして更新を行う。
      // 1つのSKU（軸が同値のもの）ごとに最後のデータのみ更新を実行する。
      $logRepository = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbProductchoiceitemsShippingGroupLog');
      $previousOrder = null;
      $previousSizeAxis = null;
      $previousDaihyoSyohinCode = null;
      $previousShippingdivisions = null; // 処理開始前のshippingdivision配列。entity書き換え後だとバッチ開始前の値が取れないため、この時点で確保

      $count = 0; // 処理件数 一定件数ごとにコミットする
      $commitMaxCount = 1000; // コミット単位。処理したログ件数毎（1ログで20SKUぐらい更新すると考え、溜まりすぎないよう＆トランザクションが長くなりすぎないように注意）

      // 代表商品に紐づくSKUごとの送料設定リスト　初期化

      $previousDaihyoSyohinCode = $orders[0]['daihyo_syohin_code'];
      $previousShippingdivisions = $this->getAllShippingdivisionsWithArray($orders[0]['daihyo_syohin_code']);
      foreach ($orders as $order) {
        // キャンセル伝票はスキップ
        if ($order['canceled'] != '0' || $order['detail_canceled'] != '0') {
          continue;
        }
        // 送料グループ種別が設定されていない配送方法ならスキップ
        if (!isset($deliveryMethods[$order['shipping_method_code']])) {
          continue;
        }
        // 納品書特記事項に「発送方法変更不可」ある場合はスキップ
        if (mb_strstr($order['special_note'], '発送方法変更不可') !== false) {
          continue;
        }

        // 軸情報を取得
        $sku = $this->find($order['ne_syohin_syohin_code']);
        if (is_null($sku)) {
          continue;
        }
        $sizeAxis = $this->getSizeAxisAndValue($sku);

        // 前と同一のSKU、または代表商品 + 軸であれば、変数を上書きして次のループへ
        if ($previousOrder === null || $previousOrder['ne_syohin_syohin_code']  == $order['ne_syohin_syohin_code'] || ($previousOrder['daihyo_syohin_code'] == $order['daihyo_syohin_code'] && $sizeAxis['axis'] != 'both' && ($sizeAxis['axis'] == 'none' || $sizeAxis['code'] == $previousSizeAxis['code']))) {
          $previousOrder = $order;
          $previousSizeAxis = $sizeAxis;
          continue;
        }

        // 前と変わっていたら、前のループ分がその軸の最新のものなので、DBに反映する
        // （SKUコードが「代表商品コード-カラー-サイズ」等の順番だった場合、同じ軸が複数回出てくることもあるが、後から処理するもので上書きしたいので問題ない

        // 手動設定履歴がない場合だけ処理
        if (! $logRepository->existShippingdivisionManualSettingLog(
            $previousOrder['daihyo_syohin_code'], $previousSizeAxis, $previousOrder['ne_syohin_syohin_code'], new \DateTime($previousOrder['shipping_date']))) {
          $deliveryMethod = $deliveryMethods[$previousOrder['shipping_method_code']];
          $count = $count + $this->updateShippingdivision($previousOrder, $previousSizeAxis, $logInfo, $deliveryMethod->getShippingGroupCode(), $previousShippingdivisions);
        }

        // 前と異なる代表商品であれば、代表商品に紐づくSKUごとの送料設定リスト取得して更新
        if ($previousDaihyoSyohinCode != $order['daihyo_syohin_code']) {
          $previousDaihyoSyohinCode = $order['daihyo_syohin_code'];
          $previousShippingdivisions = $this->getAllShippingdivisionsWithArray($order['daihyo_syohin_code']);
        }

        // コミット保留が上限に達したらいったんコミットしてカウントを0に戻す
        if ($count == $commitMaxCount) {
          $this->getEntityManager()->flush();
          $this->getEntityManager()->commit();
          $logger->addDbLog($logger->makeDbLog(null, "$commitMaxCount 件コミット", '現在のSKU：' . $previousOrder['ne_syohin_syohin_code'], 'メモリ使用量：' . (round(memory_get_usage() / (1024 * 1024), 2)) .'MB'));
          $this->getEntityManager()->clear('MiscBundle:TbProductchoiceitemsShippingGroupLog'); // メモリ解放
          $this->getEntityManager()->clear('MiscBundle:TbProductchoiceitems');
          $this->getEntityManager()->clear('MiscBundle:TbProductchoiceitemsShippingdivisionPending');
          $count = 0;
          $this->getEntityManager()->beginTransaction();
        }
        $previousOrder = $order;
        $previousSizeAxis = $sizeAxis;
      }

      // ループ終了
      // 最後の1件はループ内で処理されないのでここで処理、内容はループ内と同一
      if ($previousOrder != null) {
        if ($previousDaihyoSyohinCode != $order['daihyo_syohin_code']) {
          $previousDaihyoSyohinCode = $order['daihyo_syohin_code'];
          $previousShippingdivisions = $this->getAllShippingdivisionsWithArray($order['daihyo_syohin_code']);
        }
        if (! $logRepository->existShippingdivisionManualSettingLog(
            $previousOrder['daihyo_syohin_code'], $previousSizeAxis, $previousOrder['ne_syohin_syohin_code'], new \DateTime($previousOrder['shipping_date']))) {
          $deliveryMethod = $deliveryMethods[$previousOrder['shipping_method_code']];
          $this->updateShippingdivision($previousOrder, $previousSizeAxis, $logInfo, $deliveryMethod->getShippingGroupCode(), $previousShippingdivisions);
        }
        $this->getEntityManager()->flush();
      }
      $this->getEntityManager()->commit();

      return $logInfo;
    }

    /**
     * 1受注履歴分のupdateを実行する。
     * updateを行った場合は 1、行わなかった場合は 0 を返却する。
     *
     * これまで設定済みの送料よりも、新しい送料のほうが価格が上がる場合は、即時更新を行う代わりにSKU別送料設定保留にデータを登録し、更新無しで返却する。
     * @param array $order
     * @param array $sizeAxis
     * @param BatchLogger $logInfo
     * @param array $shippingGroupCode 更新対象の送料設定グループ
     * @param $skuShippingdivisions SKUごとの配送方法の連想配列。neSyohinSyohinCodeがキー、shippingdivisionId が 値。
     *                               代表商品ごとに処理開始時点の値を保持する（あとから取ると書き換わっているため、先に確保したものを引数で引き回す）
     */
    private function updateShippingdivision($order, $sizeAxis, &$logInfo, $shippingGroupCode, $skuShippingdivisions) {
      // サイズ軸指定あり
      if ($sizeAxis['axis'] === 'col' || $sizeAxis['axis'] === 'row') {
        return $this->updateSameAxisItems($order['daihyo_syohin_code'], $shippingGroupCode, $sizeAxis['axis'], $sizeAxis['code'], null, $order['voucher_number'], false, $skuShippingdivisions, $logInfo);

      // 両軸ともサイズ軸のため、1SKUのみ更新
      } else if ($sizeAxis['axis'] === 'both') {
        return $this->updateSameAxisItems($order['daihyo_syohin_code'], $shippingGroupCode, null, null, $order['ne_syohin_syohin_code'], $order['voucher_number'], false, $skuShippingdivisions, $logInfo);

      // サイズ軸がないため、全SKU更新
      } else {
        return $this->updateSameAxisItems($order['daihyo_syohin_code'], $shippingGroupCode, null, null, null, $order['voucher_number'], false, $skuShippingdivisions, $logInfo);
      }
    }

    /**
     * サイズ・グループ変更されたSKUの送料設定を再計算し、変更があれば見直します。
     *
     * 実際に変更になるのは、以下の条件に該当するものです。
     * ・送料グループが定形外・宅配便・ゆうパケットである（同じグループに複数の送料設定レコードが存在する）。
     * ・値下となる
     * また、値上げとなるものは、即時変更の代わりに保留となります。
     */
    public function updateSizeChangeItemShippingdivision($logger) {

      $logInfo = array('message' => '想定外の配送コードの受注リスト'); // ログ出力用の文字列

      /** @var EntityManager $em */
      $em = $this->getEntityManager();

      // 対象SKUを取得
      $paramArray = array();
      $dql = 'SELECT pci.daihyoSyohinCode, pci.neSyohinSyohinCode, sd.shippingGroupCode'
          . ' FROM MiscBundle:TbProductchoiceitems pci'
          . ' INNER JOIN MiscBundle:TbProductchoiceitemsFormerSize fs WITH pci.neSyohinSyohinCode = fs.neSyohinSyohinCode'
          . ' INNER JOIN MiscBundle:TbShippingdivision sd WITH pci.shippingdivisionId = sd.id'
          . ' WHERE fs.changedFlg = 1'
          . ' AND sd.shippingGroupCode IN (:groupCodeTakuhaibin, :groupCodeTeikeigai, :groupCodeYuuPacket)'
          . ' ORDER BY pci.daihyoSyohinCode, pci.neSyohinSyohinCode';
      $paramArray['groupCodeTakuhaibin'] = TbShippingdivision::SHIPPING_GROUP_CODE_TAKUHAIBIN;
      $paramArray['groupCodeTeikeigai'] = TbShippingdivision::SHIPPING_GROUP_CODE_TEIKEIGAI;
      $paramArray['groupCodeYuuPacket'] = TbShippingdivision::SHIPPING_GROUP_CODE_YUU_PACKET;
      $query = $em->createQuery($dql);
      foreach ($paramArray as $key => $value) {
        $query->setParameter($key, $value);
      }
      $skus = $query->getResult();

      // 対象がなければ、ここで処理終了
      if (count($skus) == 0) {
        return $logInfo;
      }
      $logger->addDbLog($logger->makeDbLog(null, "処理対象のSKU件数：" . count($skus) . "件（同一サイズ軸のものを含む）"));

      $this->getEntityManager()->beginTransaction();

      // 対象SKUをループし、処理を実行
      $previousSku = null;
      $previousSizeAxis = null;

      $previousDaihyoSyohinCode = null;
      $previousShippingdivisions = null; // 処理開始前のshippingdivision配列。entity書き換え後だとバッチ開始前の値が取れないため、この時点で確保

      if (count($skus) > 0) {
        $previousDaihyoSyohinCode = $skus[0]['daihyoSyohinCode'];
        $previousShippingdivisions = $this->getAllShippingdivisionsWithArray($skus[0]['daihyoSyohinCode']); // 1件目初期化　これだけ、代表商品の変更タイミングでだけ取りたいので、書き換えタイミングが異なる　
      }

      foreach ($skus as $sku) {
        $skuEntity = $this->find($sku['neSyohinSyohinCode']);
        $sizeAxis = $this->getSizeAxisAndValue($skuEntity);

        // 前と同一のSKU、または代表商品 + 軸であれば、変数を上書きして次のループへ
        if ($previousSku === null || $previousSku['neSyohinSyohinCode']  == $sku['neSyohinSyohinCode'] || ($previousSku['daihyoSyohinCode'] == $sku['daihyoSyohinCode'] && $sizeAxis['axis'] != 'both' && ($sizeAxis['axis'] == 'none' || $sizeAxis['code'] == $previousSizeAxis['code']))) {
          $previousSku = $sku;
          $previousSizeAxis = $sizeAxis;
          continue;
        }

        // 前と変わっていたら、前のループ分がその軸の最新のものなので、DBに反映する
        // （SKUコードが「代表商品コード-カラー-サイズ」等の順番だった場合、同じ軸が複数回出てくることもあるが、後から処理するもので上書きしたいので問題ない
        // updateShippingdivisionを使いたいので、仮の配列に値を登録
        $order = array('daihyo_syohin_code' => $previousSku['daihyoSyohinCode'], 'ne_syohin_syohin_code' => $previousSku['neSyohinSyohinCode'], 'voucher_number' => null);
        $this->updateShippingdivision($order, $previousSizeAxis, $logInfo, $previousSku['shippingGroupCode'], $previousShippingdivisions);

        $previousSku = $sku;
        $previousSizeAxis = $sizeAxis;

        // 前と異なる代表商品であれば、代表商品に紐づくSKUごとの送料設定リストを取得して更新
        if ($previousDaihyoSyohinCode != $sku['daihyoSyohinCode']) {
          $previousDaihyoSyohinCode = $sku['daihyoSyohinCode'];
          $previousShippingdivisions = $this->getAllShippingdivisionsWithArray($sku['daihyoSyohinCode']);
        }
      }

      // ループ終了
      // 最後の1件はループ内で処理されないのでここで処理、内容はループ内と同一
      if ($previousSku != null) {
        $order = array('daihyo_syohin_code' => $previousSku['daihyoSyohinCode'], 'ne_syohin_syohin_code' => $previousSku['neSyohinSyohinCode'], 'voucher_number' => null);
        $this->updateShippingdivision($order, $previousSizeAxis, $logInfo, $previousSku['shippingGroupCode'], $previousShippingdivisions);
      }

      $this->getEntityManager()->flush();
      $this->getEntityManager()->commit();

      return $logInfo;
    }

    /**
     * 横軸の項目を追加する
     * @param $colAxisValue
     */
    public function insertColAxisValue($colAxisValue)
    {
      // 並び順のため、代表商品に紐づく件数を取得
      $sql = <<<EOD
      SELECT
        count(ne_syohin_syohin_code) 
      FROM
        tb_productchoiceitems 
      WHERE
        daihyo_syohin_code = :daihyoSyohinCode 
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':daihyoSyohinCode', $colAxisValue['daihyoSyohinCode']);
      $stmt->execute();
      $usedSkuCount = $stmt->fetchColumn(0);

      $sql = <<<EOD
      INSERT 
      INTO tb_productchoiceitems( 
        daihyo_syohin_code
        , ne_syohin_syohin_code
        , colcode
        , rowcode
        , colname
        , rowname
        , rowname_en
        , support_rowname 
        , `並び順No`
      ) 
      SELECT
      :daihyoSyohinCode
        , concat(:daihyoSyohinCode, :colcode, t.rowcode)
        , :colcode
        , t.rowcode
        , :colname
        , t.rowname 
        , t.rowname_en
        , t.support_rowname 
        , @num:=@num+1
      FROM
        ( 
          SELECT
            rowcode
            , rowname 
            , rowname_en
            , support_rowname 
            , sum(ne_syohin_syohin_code) 
          FROM
            tb_productchoiceitems 
          WHERE
            daihyo_syohin_code = :daihyoSyohinCode
          GROUP BY
            rowcode 
          ORDER BY
            sum(ne_syohin_syohin_code) ASC
        ) AS t,
        (SELECT @num:= :baseNum) AS dummy_t
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':colname', $colAxisValue['colname']);
      $stmt->bindValue(':daihyoSyohinCode', $colAxisValue['daihyoSyohinCode']);
      $stmt->bindValue(':colcode', $colAxisValue['colcode']);
      $stmt->bindValue(':baseNum', $usedSkuCount);
      $stmt->execute();

      $this->insertNewSkuNumber($colAxisValue['daihyoSyohinCode']);

      return;
    }

    /**
     * 縦軸の項目を追加する
     * @param $rowAxisValue
     */
    public function insertRowAxisValue($rowAxisValue)
    {
      // 並び順のため、代表商品に紐づく件数を取得
      $sql = <<<EOD
      SELECT
        count(ne_syohin_syohin_code) 
      FROM
        tb_productchoiceitems 
      WHERE
        daihyo_syohin_code = :daihyoSyohinCode 
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':daihyoSyohinCode', $rowAxisValue['daihyoSyohinCode']);
      $stmt->execute();
      $usedSkuCount = $stmt->fetchColumn(0);

      $sql = <<<EOD
      INSERT 
      INTO tb_productchoiceitems( 
        daihyo_syohin_code
        , ne_syohin_syohin_code
        , colcode
        , rowcode
        , colname
        , rowname
        , colname_en
        , support_colname 
        , `並び順No`
      ) 
      SELECT
      :daihyoSyohinCode
        , concat(:daihyoSyohinCode, t.colcode, :rowcode)
        , t.colcode
        , :rowcode
        , t.colname
        , :rowname 
        , t.colname_en
        , t.support_colname 
        , @num:=@num+1
      FROM
        ( 
          SELECT
            colcode
            , colname 
            , colname_en
            , support_colname 
          FROM
            tb_productchoiceitems 
          WHERE
            daihyo_syohin_code = :daihyoSyohinCode
          GROUP BY
            colcode 
          ORDER BY
            sum(ne_syohin_syohin_code) ASC
        ) AS t,
        (SELECT @num:= :baseNum) AS dummy_t
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':rowname', $rowAxisValue['rowname']);
      $stmt->bindValue(':daihyoSyohinCode', $rowAxisValue['daihyoSyohinCode']);
      $stmt->bindValue(':rowcode', $rowAxisValue['rowcode']);
      $stmt->bindValue(':baseNum', $usedSkuCount);
      $stmt->execute();

      $this->insertNewSkuNumber($rowAxisValue['daihyoSyohinCode']);

      return;
    }

    /**
     * 横軸の項目を削除する
     * @param $colAxisValue
     */
    public function deleteColAxisValue($colAxisValue)
    {
      // 横軸に対して総在庫数、総発注残数（エア＋コンテナ）のいずれかが1以上のskuがあれば削除しない
      $sql = <<<EOD
      SELECT
        count(ne_syohin_syohin_code) 
      FROM
        tb_productchoiceitems 
      WHERE
        daihyo_syohin_code = :daihyoSyohinCode 
        AND colcode = :colcode
        AND (`総在庫数` > 0 OR `発注残数` > 0)
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':daihyoSyohinCode', $colAxisValue['daihyoSyohinCode']);
      $stmt->bindValue(':colcode', $colAxisValue['colcode']);
      $stmt->execute();
      $usedSkuCount = $stmt->fetchColumn(0);
      if ($usedSkuCount > 0){
        // 使用中であればここで処理終了
        throw new BusinessException("横軸に対して総在庫数、総発注残数（エア＋コンテナ）のいずれかが1以上のskuが存在");
      }

      // 横軸削除
      $sql = <<<EOD
      DELETE FROM tb_productchoiceitems 
        WHERE
          daihyo_syohin_code = :daihyoSyohinCode 
          AND colcode = :colcode
          AND (`総在庫数` <= 0 AND `発注残数` <= 0)
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':daihyoSyohinCode', $colAxisValue['daihyoSyohinCode']);
      $stmt->bindValue(':colcode', $colAxisValue['colcode']);
      $stmt->execute();
    }

    /**
     * 縦軸の項目を削除する
     * @param $rowAxisValue
     */
    public function deleteRowAxisValue($rowAxisValue)
    {
      // 縦軸に対して使用中（総在庫数、総発注残数（エア＋コンテナ）のいずれかが1以上）のskuがあれば削除しない
      $sql = <<<EOD
      SELECT
        count(ne_syohin_syohin_code) 
      FROM
        tb_productchoiceitems 
      WHERE
        daihyo_syohin_code = :daihyoSyohinCode 
        AND rowcode = :rowcode
        AND (`総在庫数` > 0 OR `発注残数` > 0)
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':daihyoSyohinCode', $rowAxisValue['daihyoSyohinCode']);
      $stmt->bindValue(':rowcode', $rowAxisValue['rowcode']);
      $stmt->execute();
      $usedSkuCount = $stmt->fetchColumn(0);
      if ($usedSkuCount > 0){
        // 使用中であればここで処理終了
        throw new BusinessException("縦軸に対して使用中（総在庫数、総発注残数（エア＋コンテナ）のいずれかが1以上）のskuが存在");
      }

      // 縦軸削除
      $sql = <<<EOD
      DELETE FROM tb_productchoiceitems 
        WHERE
          daihyo_syohin_code = :daihyoSyohinCode 
          AND rowcode = :rowcode
          AND (`総在庫数` <= 0 AND `発注残数` <= 0)
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':daihyoSyohinCode', $rowAxisValue['daihyoSyohinCode']);
      $stmt->bindValue(':rowcode', $rowAxisValue['rowcode']);
      $stmt->execute();
    }

    /**
     * 使用中(削除できない)横軸を取得する
     * @param $daihyoSyohinCode
     * @return array
     */
    public function findUsedColAxis($daihyoSyohinCode)
    {
      // 関連した縦軸全てで使用中（在庫数、総発注残数（エア＋コンテナ）のいずれかが1以上）の横軸を取得
      $sql = <<<EOD
      SELECT DISTINCT
        colcode 
      FROM
        tb_productchoiceitems 
      WHERE
        daihyo_syohin_code = :daihyoSyohinCode 
        AND (`総在庫数` > 0 OR `発注残数` > 0)
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':daihyoSyohinCode', $daihyoSyohinCode);
      $stmt->execute();
      return $stmt->fetchAll(\PDO::FETCH_COLUMN);
    }

    /**
     * 使用中(削除できない)縦軸を取得する
     * @param $daihyoSyohinCode
     * @return array
     */
    public function findUsedRowAxis($daihyoSyohinCode)
    {
      // 関連した縦軸全てで使用中（在庫数、総発注残数（エア＋コンテナ）のいずれかが1以上）の縦軸を取得
      $sql = <<<EOD
      SELECT DISTINCT
        rowcode 
      FROM
        tb_productchoiceitems 
      WHERE
        daihyo_syohin_code = :daihyoSyohinCode 
        AND (`総在庫数` > 0 OR `発注残数` > 0)
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':daihyoSyohinCode', $daihyoSyohinCode);
      $stmt->execute();
      return $stmt->fetchAll(\PDO::FETCH_COLUMN);
    }

    /**
     * 横軸の項目を更新する
     * @param $colAxisValue
     */
    public function updateColAxisValue($colAxisValue)
    {
      $sql = <<<EOD
      UPDATE tb_productchoiceitems
        SET
          colname = :colname
          , colname_en = :colnameEn
          , support_colname = :supportColname
          , sku_number = :skuNumber
        WHERE
          daihyo_syohin_code = :daihyoSyohinCode
          AND colcode = :colcode
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':colname', $colAxisValue['colname']);
      $stmt->bindValue(':colnameEn', $colAxisValue['colname_en']);
      $stmt->bindValue(':supportColname', $colAxisValue['support_colname']);
      $stmt->bindValue(':daihyoSyohinCode', $colAxisValue['daihyo_syohin_code']);
      $stmt->bindValue(':skuNumber', $colAxisValue['sku_number'] ?? null);
      $stmt->bindValue(':colcode', $colAxisValue['colcode']);
      $stmt->execute();
      return;
    }

    /**
     * 縦軸の項目を更新する
     * @param $rowAxisValue
     */
    public function updateRowAxisValue($rowAxisValue)
    {
      $sql = <<<EOD
      UPDATE tb_productchoiceitems
        SET
          rowname = :rowname
          , rowname_en = :rownameEn
          , support_rowname = :supportRowname
          , sku_number = :skuNumber
        WHERE
          daihyo_syohin_code = :daihyoSyohinCode
          AND rowcode = :rowcode
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':rowname', $rowAxisValue['rowname']);
      $stmt->bindValue(':rownameEn', $rowAxisValue['rowname_en']);
      $stmt->bindValue(':supportRowname', $rowAxisValue['support_rowname']);
      $stmt->bindValue(':daihyoSyohinCode', $rowAxisValue['daihyo_syohin_code']);
      $stmt->bindValue(':skuNumber', $rowAxisValue['sku_number'] ?? null);
      $stmt->bindValue(':rowcode', $rowAxisValue['rowcode']);
      $stmt->execute();
      return;
    }

    /**
     * 軸の並び順を更新する
     * @param array $axes 軸情報
     */
    public function updateAxisOrderValue($axes)
    {
      $skusArray = [];
      $orderArray = [];
      $order = 1;
      foreach ($axes as $axis) {
        // daihyoSyohinCode, colcode, rowcodeから SKU を組み立て
        $skusArray[] = $axis['daihyoSyohinCode'] . $axis['colcode'] . $axis['rowcode'];
        // 並び順は1から順番に採番
        $orderArray[] = $order ++;
      }
      $skusStr = "'" . implode("', '", $skusArray) . "'";
      $orderStr = implode(", ", $orderArray);      

      // バルクアップデート
      $sql = <<<EOD
        UPDATE tb_productchoiceitems 
          SET
            並び順No = ELT(
              FIELD(ne_syohin_syohin_code, {$skusStr}), {$orderStr}
            )
          WHERE
            ne_syohin_syohin_code IN ({$skusStr});
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->execute();
    }

    /**
     * 在庫定数設定画面のためのNE商品情報を返す。
     * @param string $daihyoSyohinCode
     * @return array
     */
    public function findForInventoryConstant($daihyoSyohinCode)
    {
      $sql = <<<EOD
        SELECT
          CASE
            WHEN p.受発注可能フラグ = 0 THEN '不可'
            ELSE '可能'
          END AS orderingAvailability,
          p.ne_syohin_syohin_code AS neSyohinCode,
          p.rowname,
          p.colname,
          p.zaiko_teisu AS inventoryConstant,
          COALESCE(o.発注点, 0) AS orderScore,
          COALESCE(o.季節在庫定数, 0) AS seasonInventoryConstant,
          p.在庫数 AS stockQuantity,
          p.フリー在庫数 AS freeInventoryQuantity,
          p.発注残数 - p.コンテナ便発注残数 AS airOrderRemaining,
          p.コンテナ便発注残数 AS containerOrderRemaining
        FROM
          tb_productchoiceitems p
          LEFT JOIN tb_product_order_calculation o
            ON p.ne_syohin_syohin_code = o.ne_syohin_syohin_code
        WHERE
          p.daihyo_syohin_code = :daihyoSyohinCode;
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':daihyoSyohinCode', $daihyoSyohinCode);
      $stmt->execute();
      return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }

    /**
     * 在庫定数を更新する。
     * @param array [NE商品コード => 在庫定数]の形式の連想配列の配列
     */
    public function updateInventoryConstant($modifyList)
    {
      $skusStr = "'" . implode("', '", array_keys($modifyList)) . "'";
      $inventoryConstantsStr = implode(", ", $modifyList);

      $sql = <<<EOD
        UPDATE
          tb_productchoiceitems
        SET
          zaiko_teisu = ELT(
            FIELD(ne_syohin_syohin_code, {$skusStr}), {$inventoryConstantsStr}
          )
        WHERE
          ne_syohin_syohin_code IN ({$skusStr});
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->execute();
    }

    /**
     * 商品サイズを更新する。
     * @param array NE商品コードのリスト $skuList
     * @param array 変更サイズ横 $width
     * @param array 変更サイズ縦 $height
     * @param array 変更サイズ高さ $depth
     * @param array 変更サイズ重量 $weight
     */
    public function updateSize($skuList, $width, $height, $depth, $weight)
    {
      $skuListStr = "'" . implode("', '", $skuList) . "'";

      $sql = <<<EOD
        UPDATE
          tb_productchoiceitems
        SET
          width = :width,
          height = :height,
          depth = :depth,
          weight = :weight
        WHERE
          ne_syohin_syohin_code IN ({$skuListStr});
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':width', $width);
      $stmt->bindValue(':height', $height);
      $stmt->bindValue(':depth', $depth);
      $stmt->bindValue(':weight', $weight);
      $stmt->execute();
    }
    
    /**
     * 指定されたSKUリストの総在庫を取得して返却する。
     * 
     * 総在庫は tb_productchoiceitems ではなく、tb_product_location と移動中在庫数を元に直接取得する。
     * （tb_productchoiceitems の在庫系カラム除去に向けた対応）
     * v_product_stock_total を使用すればそのまま取得できるが、このビューは極めて重いため、同等の処理を直接クエリ発行して実施する。
     * 
     * @param array $skuList 総在庫を取得するSKUの配列
     * @return array SKUコードをキー、総在庫を値とする連想配列
     */
    public function findTotalStock($skuList) {
      $skuListStr = "'" . implode("', '", $skuList) . "'";
      $sql = <<<EOD
        SELECT pci.ne_syohin_syohin_code, SUM(IFNULL(stock.stock, 0)) + SUM(IFNULL(transport.transport_num, 0)) as total_stock
        FROM tb_productchoiceitems pci 
        LEFT JOIN (
          SELECT pl.ne_syohin_syohin_code, SUM(pl.stock) stock
          FROM tb_product_location pl 
          JOIN tb_location l
          WHERE pl.ne_syohin_syohin_code IN ($skuListStr)
            AND pl.position >= 0 
          GROUP BY pl.ne_syohin_syohin_code
        ) as stock ON pci.ne_syohin_syohin_code = stock.ne_syohin_syohin_code
        LEFT JOIN (
          SELECT 
            d.ne_syohin_syohin_code
            , SUM(d.picked) AS transport_num
          FROM tb_stock_transport_detail d
          JOIN tb_stock_transport t ON d.transport_id = t.id
          WHERE t.status IN (0, 10, 20, 30)
            AND d.ne_syohin_syohin_code IN ($skuListStr)
          GROUP BY d.ne_syohin_syohin_code
        ) as transport ON pci.ne_syohin_syohin_code = transport.ne_syohin_syohin_code
        WHERE pci.ne_syohin_syohin_code IN ($skuListStr)
        GROUP BY pci.ne_syohin_syohin_code
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->execute();
      return $stmt->fetchAll(\PDO::FETCH_KEY_PAIR);
    }

    /**
     * 新しい追加された商品にSKU Numberを設定
     * 
     * tb_productchoiceitemsのsku_numberを更新
     * 
     * @param array $daihyoSyohinCode
     * @return boolean true
     */
    public function insertNewSkuNumber($daihyoSyohinCode)
    {
      // tb_productchoiceitems_skuテーブルから最新のSku管理番号を取得
      $sql = <<<EOD
      SELECT
        latest_sku
      FROM
        tb_productchoiceitems_sku 
      WHERE
        id = 'product_choice_item_sku'
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->execute();
      $latestSku = $stmt->fetchColumn(0);

      // sku_numberがNULLのことを取得
      $sql = <<<EOD
        SELECT
          ne_syohin_syohin_code,
          daihyo_syohin_code
        FROM
          tb_productchoiceitems
        WHERE
          daihyo_syohin_code = :daihyoSyohinCode
          AND (sku_number IS NULL OR sku_number = '')
        ORDER BY
          並び順No
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':daihyoSyohinCode', $daihyoSyohinCode);
      $stmt->execute();
      $items = $stmt->fetchAll(\PDO::FETCH_ASSOC);

      // sku_numberがNULLのことでsku_numberを更新
      foreach ($items as $item) {
        $skuNumber = "sku-" . substr("000000000000{$latestSku}", -12);

        $sql = <<<EOD
          UPDATE
            tb_productchoiceitems as pci
          SET 
            pci.sku_number = :skuNumber
          WHERE 
            pci.daihyo_syohin_code = :syohinCode
            AND pci.ne_syohin_syohin_code = :neSyohinCode
EOD;
        $stmt = $this->getConnection('main')->prepare($sql);
        $stmt->bindValue(':syohinCode', $item['daihyo_syohin_code'], \PDO::PARAM_STR);
        $stmt->bindValue(':neSyohinCode', $item['ne_syohin_syohin_code'], \PDO::PARAM_STR);
        $stmt->bindValue(':skuNumber', $skuNumber, \PDO::PARAM_STR);
        $stmt->execute();

        $latestSku++;
      }

      // tb_productchoiceitems_skuテーブルに最新のSku管理番号を保存
      $sql = <<<EOD
        UPDATE
          tb_productchoiceitems_sku as pci
        SET 
          pci.latest_sku = :skuNumber
        WHERE 
          pci.id = 'product_choice_item_sku'
EOD;
      $stmt = $this->getConnection('main')->prepare($sql);
      $stmt->bindValue(':skuNumber', $latestSku, \PDO::PARAM_INT);
      $stmt->execute();

      return true;
    }
}
