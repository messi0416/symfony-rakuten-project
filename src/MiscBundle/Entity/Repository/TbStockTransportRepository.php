<?php

namespace MiscBundle\Entity\Repository;
use MiscBundle\Entity\TbStockTransport;
use MiscBundle\Entity\TbWarehouse;
use MiscBundle\Util\DbCommonUtil;

/**
 * TbStockTransportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbStockTransportRepository extends BaseRepository
{
  const STATUS_NONE = 0; // 未処理
  const STATUS_READY = 10; // 準備済み (※在庫削減済み)
  const STATUS_SHIPPING = 20; // 移動中
  const STATUS_ARRIVED = 30; // 到着 (※在庫未復元)
  const STATUS_DONE = 40; // 完了 (※在庫復元済み)
  const STATUS_CANCELED = 90; // キャンセル

  public static $STATUS_DISPLAYS = [
      self::STATUS_NONE => '未処理'
//    , self::STATUS_READY => '準備済み'
    , self::STATUS_SHIPPING => '移動中'
//    , self::STATUS_ARRIVED => '到着'
    , self::STATUS_DONE => '完了'
    , self::STATUS_CANCELED => 'キャンセル'
  ];

  const TRANSPORT_CODE_FBA_SEND = 'FBA納品';
  const TRANSPORT_CODE_FBA_RETURN = 'FBA引上';
  const TRANSPORT_CODE_WAREHOUSE = '倉庫移動';

  public static $TRANSPORT_CODE_DISPLAYS = [
      self::TRANSPORT_CODE_FBA_SEND => self::TRANSPORT_CODE_FBA_SEND
    , self::TRANSPORT_CODE_FBA_RETURN => self::TRANSPORT_CODE_FBA_RETURN
    , self::TRANSPORT_CODE_WAREHOUSE => self::TRANSPORT_CODE_WAREHOUSE
  ];

  const DESTINATION_NAME_FBA_SEND = 'FBA';

  public function findTransportList($conditions = [], $orders = [], $page = 1, $limit = 100)
  {
    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    $qb = $this->createQueryBuilder('t');

    // 絞込条件：ステータス
    if (isset($conditions['status']) && strlen($conditions['status'])) {
      $qb->andWhere(" t.status = :status ")->setParameter(':status', intval($conditions['status']), \PDO::PARAM_INT);
    }
    // 絞込条件：取込日（from）
    if (isset($conditions['dateFrom']) && $conditions['dateFrom'] instanceof \DateTimeInterface) {
      $qb->andWhere(" t.date >= :dateFrom ")->setParameter(':dateFrom', $conditions['dateFrom']->format('Y-m-d'), \PDO::PARAM_STR);
    }
    // 絞込条件：取込日（to）
    if (isset($conditions['dateTo']) && $conditions['dateTo'] instanceof \DateTimeInterface) {
      $qb->andWhere(" t.date <= :dateTo ")->setParameter(':dateTo', $conditions['dateTo']->format('Y-m-d'), \PDO::PARAM_STR);
    }
    // 絞込条件 移動コード
    if (isset($conditions['transportCode']) && strlen($conditions['transportCode'])) {
      $qb->andWhere(" t.transport_code = :transportCode ")->setParameter(':transportCode', $conditions['transportCode'], \PDO::PARAM_STR);
    }
    // 絞込条件 移動番号
    if (isset($conditions['transportNumber']) && strlen($conditions['transportNumber'])) {
      $qb->andWhere(" t.transport_number LIKE :transportNumber ")->setParameter(':transportNumber', sprintf('%%%s%%', $commonUtil->escapeLikeString($conditions['transportNumber'])), \PDO::PARAM_STR);
    }

    if ($orders) {
      foreach($orders as $k => $v) {
        $qb->addOrderBy($k, $v);
      }
    } else {
      $qb->addOrderBy('t.id', 'DESC');
    }


    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $qb->getQuery() /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }

  /**
   * 1件取得
   * @param int $id
   * @return TbStockTransport
   */
  public function getOne($id)
  {
    /** @var TbStockTransport $transport */
    $transport = $this->find($id);
    if ($transport) {
      $this->loadDetails($transport);
    }

    return $transport;
  }

  /**
   * 詳細一覧取得
   * @param TbStockTransport $transport
   * @return TbStockTransport
   */
  public function loadDetails(TbStockTransport $transport)
  {
    /** @var BaseRepository $repo */
    $repo = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbStockTransportDetail');
    $details = $repo->findBy([ 'transport_id' => $transport->getId() ], [ 'ne_syohin_syohin_code' => 'ASC' ]);
    $transport->setDetails($details);

    return $transport;
  }

  /**
   * ピッキングリストからの取得
   * @param TbWarehouse $warehouse
   * @param $date
   * @param $number
   * @return TbStockTransport
   */
  public function getOneByPickingListDateAndNumber(TbWarehouse $warehouse, $date, $number)
  {
    $transport = null;

    $qb = $this->createQueryBuilder('t');
    $qb->andWhere('t.departure_warehouse_id = :warehouseId')->setParameter(':warehouseId', $warehouse->getId(), \PDO::PARAM_INT);
    $qb->andWhere('t.picking_list_date = :date')->setParameter(':date', $date, \PDO::PARAM_STR);
    $qb->andWhere('t.picking_list_number = :number')->setParameter(':number', $number, \PDO::PARAM_INT);

    $result = $qb->getQuery()->getResult();
    if ($result) {
      $transport = $result[0];
    }
    if ($transport) {
      $this->loadDetails($transport);
    }

    return $transport;
  }

  /**
   * 商品の移動中在庫数更新処理
   * @throws \Doctrine\DBAL\DBALException
   */
  public function updateChoiceItemTransportStocks()
  {
    // そう頻繁に実行される訳ではないので、deadlock を恐れずにシンプル実装。
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      UPDATE
      tb_productchoiceitems pci
      LEFT JOIN v_product_stock_transporting v ON pci.ne_syohin_syohin_code = v.ne_syohin_syohin_code
      SET pci.移動中在庫数 = v.transport_num
      WHERE pci.`移動中在庫数` <> COALESCE(v.transport_num, 0)
EOD;

    $dbMain->exec($sql);
  }


}
