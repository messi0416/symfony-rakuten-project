<?php

namespace MiscBundle\Entity\Repository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Query\ResultSetMapping;
use forestlib\Doctrine\ORM\LimitableNativeQuery;
use MiscBundle\Entity\SymfonyUsers;
use MiscBundle\Entity\TbRealShopReturnReport;
use MiscBundle\Entity\TbWarehouse;
use MiscBundle\Util\DbCommonUtil;
use MiscBundle\Util\MultiInsertUtil;


/**
 * TbRealShopReturnReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbRealShopReturnReportRepository extends BaseRepository
{
  // レポートステータス
  const REPORT_STATUS_NONE      = 0;
  const REPORT_STATUS_IMPORTED  = 1;
  const REPORT_STATUS_DELETED   = 9; // 未使用

  /**
   * その日の max number 取得
   * @param \DateTimeInterface $date
   * @return int
   * @throws \Doctrine\DBAL\DBALException
   */
  public function getMaxNumber(\DateTimeInterface $date)
  {
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      SELECT MAX(number) AS max_number FROM tb_real_shop_return_report r
      WHERE r.return_date = :date
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':date', $date->format('Y-m-d'));
    $stmt->execute();

    return intval($stmt->fetchColumn(0));
  }

  /**
   * 返品リスト登録
   * @param array $list
   * @param SymfonyUsers|null $account
   */
  public function registerReport($date, $number, $list, $account = null)
  {
    $dbMain = $this->getConnection('main');
    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    // 一括insert
    $insertBuilder = new MultiInsertUtil("tb_real_shop_return_report", [
      'fields' => [
          'return_date'           => \PDO::PARAM_STR
        , 'number'                => \PDO::PARAM_INT
        , 'ne_syohin_syohin_code' => \PDO::PARAM_STR
        , 'shop_stock'            => \PDO::PARAM_INT
        , 'move_num'              => \PDO::PARAM_INT
        , 'status'                => \PDO::PARAM_INT
        , 'create_account_id'     => \PDO::PARAM_INT
        , 'create_account_name'   => \PDO::PARAM_STR
      ]
    ]);

    $commonUtil->multipleInsert($insertBuilder, $dbMain, $list, function ($row) use ($date, $number, $account) {

      $item = [
          'return_date'           => $date->format('Y-m-d')
        , 'number'                => $number
        , 'ne_syohin_syohin_code' => $row['ne_syohin_syohin_code']
        , 'shop_stock'            => $row['shop_stock']
        , 'move_num'              => $row['move_num']
        , 'status'                => self::REPORT_STATUS_NONE
        , 'create_account_id'     => $account ? $account->getId() : 0
        , 'create_account_name'   => $account ? $account->getUsername() : ''
      ];

      return $item;

    }, 'foreach');

    // 在庫依頼更新処理
    $this->updateOrderNumToZero($date, $number);

  }

  /**
   * 返品対象の商品の在庫依頼を一括で0に更新する
   * @param \DateTimeInterface $date
   * @param int $number
   */
  private function updateOrderNumToZero(\DateTimeInterface $date, $number)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      UPDATE
      tb_real_shop_product_stock s
      INNER JOIN tb_real_shop_return_report r ON s.ne_syohin_syohin_code = r.ne_syohin_syohin_code
      SET s.order_num = 0
      WHERE r.return_date = :date
        AND r.number = :number
        AND r.`status` = :statusNone
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':date', $date->format('Y-m-d'), \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->bindValue(':statusNone', self::REPORT_STATUS_NONE, \PDO::PARAM_INT);
    $stmt->execute();
  }


  /**
   * 一覧データ取得
   * @param array $conditions
   * @param array $orders
   * @param int $page
   * @param int $limit
   * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
   */
  public function getListData($conditions = [], $orders = [], $page = 1, $limit = 20)
  {
    /** @var EntityManager $em */
    $em = $this->getEntityManager();

    $sqlSelect = <<<EOD
      SELECT
          T.return_date
        , T.number
        , T.account_name
        , T.product_count
        , T.move_num
EOD;
    $sqlBody = <<<EOD
      FROM (
        SELECT
            rr.return_date
          , rr.number
          , GROUP_CONCAT(DISTINCT rr.create_account_name ORDER BY rr.create_account_id SEPARATOR '/') AS account_name
          , COUNT(DISTINCT rr.ne_syohin_syohin_code) AS product_count
          , SUM(rr.move_num) AS move_num
        FROM tb_real_shop_return_report rr
        WHERE rr.status = :statusNone
        GROUP BY rr.return_date, rr.number
      ) AS T
EOD;

    $params = [];
    $params[':statusNone'] = self::REPORT_STATUS_NONE;

    $rsm =  new ResultSetMapping();
    $rsm->addScalarResult('return_date', 'return_date', 'date');
    $rsm->addScalarResult('number', 'number', 'integer');
    $rsm->addScalarResult('account_name', 'account_name', 'string');
    $rsm->addScalarResult('product_count', 'product_count', 'integer');
    $rsm->addScalarResult('move_num', 'move_num', 'integer');

    $query = LimitableNativeQuery::createQuery($em, $rsm, $sqlSelect, $sqlBody);
    foreach($params as $k => $v) {
      $query->setParameter($k, $v);
    }

    $resultOrders = [];
    $defaultOrders = [
        'T.return_date' => 'DESC'
      , 'T.number' => 'DESC'
    ];
    $query->setOrders(array_merge($resultOrders, $defaultOrders));

    /** @var \Knp\Component\Pager\Paginator $paginator */
    $paginator  = $this->getContainer()->get('knp_paginator');
    /** @var \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination */
    $pagination = $paginator->paginate(
        $query /* query NOT result */
      , $page
      , $limit
    );

    return $pagination;
  }


  /**
   * 一回分の返品情報全件取得
   * @param $date
   * @param $number
   * @return TbRealShopReturnReport[]
   */
  public function getReportDetail($date, $number)
  {
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      SELECT
          rr.*
      FROM tb_real_shop_return_report rr
      WHERE rr.return_date = :returnDate
        AND rr.number = :number
      ORDER BY rr.ne_syohin_syohin_code
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':returnDate', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }


  /**
   * ラベル印刷情報 取得
   * @param $date
   * @param $number
   * @return TbRealShopReturnReport[]
   */
  public function getReportLabelList($date, $number)
  {
    $dbMain = $this->getConnection('main');

    $sql = <<<EOD
      SELECT
          rr.ne_syohin_syohin_code
        , code.id AS product_code
        , pci.colname
        , pci.rowname
        , i.baika_tanka
        , rr.move_num
      FROM tb_real_shop_return_report rr
      LEFT JOIN tb_productchoiceitems pci ON rr.ne_syohin_syohin_code = pci.ne_syohin_syohin_code
      LEFT JOIN tb_real_shop_information i ON pci.daihyo_syohin_code = i.daihyo_syohin_code
      LEFT JOIN tb_product_code code ON rr.ne_syohin_syohin_code = code.ne_syohin_syohin_code
      WHERE rr.return_date = :returnDate
        AND rr.number = :number
      ORDER BY rr.ne_syohin_syohin_code
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':returnDate', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * ラベル印刷情報（ラベル屋さん Access共通用） 取得
   */
  public function getReportLabelListForRaberuyasan($date, $number)
  {
    $dbMain = $this->getConnection('main');
    $sql = <<<EOD
      SELECT
          CONCAT(
              T.メール便送料無料マーク
            , T.ne_syohin_syohin_code
          ) AS label1
        , T.備考2                 AS label2
        , T.daihyo_syohin_label   AS label3
        , T.ディレクトリ           AS label4
        , T.枚数                  AS num
      FROM (
        SELECT
            (
              CASE
                WHEN (cal.label_remark_flg <> 0)  THEN '■'
                ELSE ''
              END
            ) AS メール便送料無料マーク
          , pci.ne_syohin_syohin_code
          , CONCAT(
              '['
              , pci.colname
              , '] '
              , '['
              , pci.rowname
              , '] '
              , '['
              , m.sire_code
              , ']'
            ) AS 備考2
          , cal.daihyo_syohin_label
          , CONCAT(
                dir.フィールド2
              , '>'
              , dir.フィールド3
              , '>'
              , dir.フィールド4
              , '>'
              , dir.フィールド5
              , '>'
              , dir.フィールド6
            ) AS ディレクトリ
          , rr.move_num AS 枚数
        FROM tb_real_shop_return_report rr
        LEFT JOIN tb_productchoiceitems      pci ON rr.ne_syohin_syohin_code = pci.ne_syohin_syohin_code
        LEFT JOIN tb_mainproducts_cal        cal ON pci.daihyo_syohin_code = cal.daihyo_syohin_code
        LEFT JOIN tb_mainproducts            m   ON pci.daihyo_syohin_code = m.daihyo_syohin_code
        LEFT JOIN tb_plusnaoproductdirectory dir ON m.NEディレクトリID = dir.NEディレクトリID
        WHERE rr.return_date = :returnDate
          AND rr.number = :number
        ORDER BY rr.ne_syohin_syohin_code
      ) T
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':returnDate', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->execute();

    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }


  /**
   * 返品確定処理
   * @param $date
   * @param int $number
   * @param SymfonyUsers $account
   * @param TbWarehouse $warehouse
   * @return \MiscBundle\Entity\TbLocation|null
   * @throws \Doctrine\DBAL\ConnectionException
   * @throws \Doctrine\DBAL\DBALException
   */
  public function submitImport($date, $number, $account = null, $warehouse = null)
  {
    $logger = $this->getLogger();

    $dbMain = $this->getConnection('main');
    $dbLog = $this->getConnection('log');
    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');

    // トランザクション開始
    $dbMain->beginTransaction();

    $reportList = $this->getReportDetail($date, $number);
    $stocks = [];
    foreach($reportList as $report) {
      $stocks[$report['ne_syohin_syohin_code']] = $report['move_num'];
    }

    /** @var TbLocationRepository $repoLocation */
    $repoLocation = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbLocation');

    // （履歴用）アクションキー 作成＆セット
    $actionKey = $repoLocation->setLocationLogActionKey($dbMain);

    // 返品
    $newLocation = $repoLocation->createAutoLocation('real', 'NE_J_', $warehouse);
    if (!$newLocation) {
      throw new \RuntimeException('新規ロケーションの作成に失敗しました。');
    }

    // 新規ロケーションへ格納
    // position 最大値を取るために、一時テーブルへ格納してからINSERTを行う。

    $dbMain->query("DROP TEMPORARY TABLE IF EXISTS tmp_work_real_shop_return_goods_import");
    $sql = <<<EOD
      CREATE TEMPORARY TABLE tmp_work_real_shop_return_goods_import (
          `ne_syohin_syohin_code` VARCHAR(50) NOT NULL PRIMARY KEY
        , `stock` INTEGER NOT NULL DEFAULT 0
     ) Engine=InnoDB DEFAULT CHARACTER SET utf8;
EOD;
    $dbMain->query($sql);

    // 一括insert
    $insertBuilder = new MultiInsertUtil("tmp_work_real_shop_return_goods_import", [
      'fields' => [
          'ne_syohin_syohin_code' => \PDO::PARAM_STR
        , 'stock' => \PDO::PARAM_INT
      ]
      , 'prefix' => "INSERT IGNORE INTO"
    ]);

    $commonUtil->multipleInsert($insertBuilder, $dbMain, $reportList, function($row) {
      $item = [
          'ne_syohin_syohin_code' => $row['ne_syohin_syohin_code']
        , 'stock'                 => $row['move_num']
      ];

      return $item;
    }, 'foreach');

    $sql = <<<EOD
      INSERT INTO tb_product_location (
          ne_syohin_syohin_code
        , location_id
        , stock
        , position
      )
      SELECT
          tmp.ne_syohin_syohin_code
        , :locationId
        , tmp.stock
        , CASE
            WHEN COALESCE(T.max_position, -1) < 0 THEN 0
            ELSE T.max_position + 1
          END AS position
      FROM tmp_work_real_shop_return_goods_import tmp
      LEFT JOIN (
        SELECT
            pl.ne_syohin_syohin_code
          , MAX(pl.position) AS max_position
        FROM tb_product_location pl
        GROUP BY pl.ne_syohin_syohin_code
      ) T ON tmp.ne_syohin_syohin_code = T.ne_syohin_syohin_code
EOD;
    $logger->info($sql);

    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':locationId', $newLocation->getId());
    $stmt->execute();

    // ロケーション変更履歴 保存
    $repoLocation->saveLocationChangeLogSummary($dbMain, $dbLog, TbLocationRepository::LOG_OPERATION_IMPORT_REAL_SHOP_RETURN, $account ? $account->getUsername() : 'BatchSV02', $actionKey);

    // 返品リストを完了更新
    $sql = <<<EOD
      UPDATE
      tb_real_shop_return_report rr
      SET rr.status = :statusImported
      WHERE rr.return_date = :returnDate
        AND rr.number = :number
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':statusImported', self::REPORT_STATUS_IMPORTED);
    $stmt->bindValue(':returnDate', $date, \PDO::PARAM_STR);
    $stmt->bindValue(':number', $number, \PDO::PARAM_INT);
    $stmt->execute();

    $dbMain->commit();

    return $newLocation;
  }
}
