<?php

namespace MiscBundle\Entity\Repository;
use MiscBundle\Entity\TbSalesDetail;
use MiscBundle\Entity\TbSalesVoucherDeliveryInfo;
use MiscBundle\Entity\VSalesVoucher;
use MiscBundle\Util\BatchLogger;
use MiscBundle\Util\DbCommonUtil;


/**
 * TbSalesDetailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TbSalesDetailRepository extends BaseRepository
{

  /**
   * 伝票番号で取得
   * @param int $voucherNumber
   * @return VSalesVoucher
   */
  public function getVoucherByVoucherNumber($voucherNumber)
  {
    $qb = $this->createQueryBuilder('a');
    $qb->andWhere('a.voucher_number = :voucherNumber')->setParameter(':voucherNumber', intval($voucherNumber), \PDO::PARAM_INT);
    $qb->andWhere("a.canceled = '0'");
    $qb->andWhere("a.detail_canceled = '0'");

    $details = $qb->getQuery()->getResult();

    $voucher = null;

    if ($details) {
      $voucher = new VSalesVoucher();
      $voucher->setDetails($details);

      /** @var BaseRepository $repoDeliveryInfo */
      $repoDeliveryInfo = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbSalesVoucherDeliveryInfo');
      /** @var TbSalesVoucherDeliveryInfo $info */
      $info = $repoDeliveryInfo->find($voucher->getVoucherNumber());
      if ($info) {
        $voucher->setDeliveryInfo($info);
      }
    }

    return $voucher;
  }



  /**
   * 伝票番号で取得（複数）
   * @param array $voucherNumbers
   * @param boolean $isSortedVoucherNum 与えられた伝票番号順にソートするかのフラグ
   * @return VSalesVoucher[]
   */
  public function getVoucherByVoucherNumbers($voucherNumbers, $isSortedVoucherNum = false)
  {
    $logger = $this->getLogger();

    $vouchers = [];
    if (!$voucherNumbers) {
      return $vouchers;
    }

    $qb = $this->createQueryBuilder('a');
    $qb->andWhere($qb->expr()->in('a.voucher_number', $voucherNumbers));
    $qb->andWhere("a.canceled = '0'");
    $qb->andWhere("a.detail_canceled = '0'");
    $qb->addOrderBy("a.voucher_number", "ASC");
    $qb->addOrderBy("a.line_number", "ASC");

    /** @var TbSalesDetail[] $result */
    $result = $qb->getQuery()->getResult();

    if ($isSortedVoucherNum) {
      $sortedResult = [];
      foreach ($voucherNumbers as $num) {
        foreach ($result as $detail) {
          if ($detail->getVoucherNumber() == $num) {
            $sortedResult[] = $detail;
          }
        }
      }
      $result = $sortedResult;
    }

    $details = [];
    foreach($result as $detail) {
      $voucherNumber = $detail->getVoucherNumber();
      if (!isset($details[$voucherNumber])) {
        $details[$voucherNumber] = [];
      }
      $details[$voucherNumber][] = $detail;
    }


    /** @var BaseRepository $repoDeliveryInfo */
    $repoDeliveryInfo = $this->getContainer()->get('doctrine')->getRepository('MiscBundle:TbSalesVoucherDeliveryInfo');

    foreach($details as $voucherNumber => $voucherDetails) {
      $voucher = new VSalesVoucher();
      $voucher->setDetails($voucherDetails);

      $vouchers[$voucherNumber] = $voucher;

      /** @var TbSalesVoucherDeliveryInfo $info */
      $info = $repoDeliveryInfo->find($voucherNumber);
      if ($info) {
        $voucher->setDeliveryInfo($info);
      }
    }

    return $vouchers;
  }

  /**
   * 伝票番号で住所を取得（複数）
   * @param array $voucherNumbers 伝票番号一覧
   * @return array
   */
  public function getAddressesByVoucherNumbers(array $voucherNumbers) : array
  {
      $vouchers = [];
      if (!$voucherNumbers) {
          return $vouchers;
      }

      $qb = $this->createQueryBuilder('sd');
      $qb->select("sd.voucher_number"); // 伝票番号
      $qb->addSelect("sd.customer_address1"); // 購入者住所1
      $qb->addSelect("sd.customer_address2"); // 購入者住所2
      $qb->addSelect("sd.delivery_address1"); // 送り先住所1
      $qb->addSelect("sd.delivery_address2"); // 送り先住所2
      $qb->andWhere($qb->expr()->in('sd.voucher_number', $voucherNumbers));

      /** @var TbSalesDetail[] $result */
      $result = $qb->getQuery()->getResult();
      $details = [];
      foreach($result as $detail) {
          $voucherNumber = $detail['voucher_number'];
          if (!isset($details[$voucherNumber])) {
              $details[$voucherNumber] = [];
          }
          $details[$voucherNumber] = $detail;
      }
      return $details;
  }

  /**
   * 受注明細リストを取得する
   *
   * @param int $voucherNumber 伝票番号
   * @param string $orderNumber 受注番号
   * @param int $neMallId NEモールID
   * @return array 以下のキーを持つ連想配列の配列
   *    'voucherNumber' => int 伝票番号
   *    'orderNumber' => string 受注番号
   *    'orderDate' => date 受注日
   *    'mallCode' => string 店舗コード
   *    'mallName' => string モール名
   *    'orderStatus' => string 受注状態
   *    'ownFlg' => int 自社倉庫フラグ
   *    'voucherStatus' => int 出荷伝票グループステータス
   *    'packingStatus' => int 出荷伝票梱包ステータス
   *    'warehouseName' => string 倉庫名
   *    'productQuantity' => int 商品数
   *    'totalAmount' => int 総額
   *    'packingId' => int 出荷伝票梱包ID
   */
  public function findSalesDetailList($voucherNumber, $orderNumber, $neMallId)
  {
    /** @var \Doctrine\DBAL\Connection $dbMain */
    $dbMain = $this->getConnection('main');

    // データ取得
    $addIndexSql = "";
    if ($voucherNumber === '') {
      $addIndexSql = "FORCE INDEX (index_受注番号)";
    }
    $addWheres = [];
    $addParams = [];
    $addWhereSql = "";
    if ($voucherNumber !== '') {
      $addWheres[] = "d.伝票番号 = :voucherNumber";
      $addParams[':voucherNumber'] = $voucherNumber;
    }
    if ($orderNumber !== '') {
      $addWheres[] = "d.受注番号 LIKE :orderNumber";
      $addParams[':orderNumber'] = $orderNumber . '%';
    }
    if ($neMallId !== '') {
      $addWheres[] = "m.ne_mall_id = :neMallId";
      $addParams[':neMallId'] = $neMallId;
    }
    if ($addWheres) {
      $addWhereSql = sprintf(" AND ( %s ) ", implode(" AND ", $addWheres));
    }
    $sql = <<<EOD
      SELECT
        d.伝票番号 AS voucherNumber
        , d.受注番号 AS orderNumber
        , d.受注日 AS orderDate
        , d.店舗コード AS mallCode
        , m.mall_name AS mallName
        , d.受注状態 AS orderStatus
        , w.own_flg AS ownFlg
        , v.status AS voucherStatus
        , p.status AS packingStatus
        , w.name AS warehouseName
        , SUM(d.受注数) AS productQuantity
        , SUM(d.総合計) AS totalAmount
        , p.id AS packingId
      FROM
        tb_sales_detail d {$addIndexSql}
        LEFT JOIN tb_shopping_mall m
          ON CAST(d.店舗コード AS SIGNED) = m.ne_mall_id
        LEFT JOIN tb_shipping_voucher_packing p
          ON d.伝票番号 = p.voucher_number
        LEFT JOIN tb_shipping_voucher v
          ON p.voucher_id = v.id
        LEFT JOIN tb_warehouse w
          ON v.warehouse_id = w.id
      WHERE
        1
        {$addWhereSql}
      GROUP BY
        d.伝票番号
      ORDER BY
        d.伝票番号 desc;
EOD;
    $stmt = $dbMain->prepare($sql);
    foreach ($addParams as $k => $v) {
      $stmt->bindValue($k, $v, \PDO::PARAM_STR);
    }
    $stmt->execute();
    return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }

  /**
   * 重複を除いた受注番号の件数を取得する
   *
   * @param string $orderNumber 受注番号
   * @param int $neMallId NEモールID
   * @return int 受注番号の件数
   */
  public function countDistinctOrderNumber($orderNumber, $neMallId) {
    /** @var \Doctrine\DBAL\Connection $dbMain */
    $dbMain = $this->getConnection('main');

    $addWheres = [];
    $addParams = [];
    $addWhereSql = "";
    if ($neMallId !== '') {
      $addWheres[] = "d.店舗コード = :neMallId";
      $addParams[':neMallId'] = $neMallId;
    }
    if ($addWheres) {
      $addWhereSql = sprintf(" AND ( %s ) ", implode(" AND ", $addWheres));
    }

    $sql = <<<EOD
      SELECT
        count(distinct d.受注番号)
      FROM
        tb_sales_detail d
      WHERE
        d.受注番号 LIKE :orderNumber
        {$addWhereSql};
EOD;
    $stmt = $dbMain->prepare($sql);
    $stmt->bindValue(':orderNumber', $orderNumber . '%', \PDO::PARAM_STR);
    foreach ($addParams as $k => $v) {
      $stmt->bindValue($k, $v, \PDO::PARAM_STR);
    }
    $stmt->execute();
    return intval($stmt->fetchColumn(0));
  }
  
  /**
   * 伝票番号検索用。
   * 検索条件に含まれる顧客情報をもとに、該当する伝票情報を取得して返却する。
   * 1伝票1行（明細情報を含めない）
   * 同姓同名や、同じお客様のリピート購入などがあるため、複数ヒットすることがあり得る。
   * @param $db 検索に使用するDBコネクション
   * @param $condition 検索条件の連想配列。内容は伝票番号検索画面参照。
   *                   受注日From（salesDateFrom）、受注日To（salesDateTo）はyyyy-mm-dd形式の文字列
   * @param $limit 取得件数
   * @return 条件に該当する伝票情報
   */
  public function findVoucherInfo($db, $condition, $limit) {
    
    // 顧客情報は tb_sales_detail にしかないが、tb_sales_detail は受注日インデックスがなく、高速化が出来ない
    // このため、
    // (1) まず tb_sales_detail_analyze を受注日検索し、伝票番号の最小最大を取得する
    // (2) (1)の伝票番号の範囲で tb_sales_detail を検索する
    // という手順とする。
    // 
    // なお、受注がNextEngineに送信されるタイミングの差により、伝票番号と受注日時は常に順序が一致しているとは限らない。
    // たとえば
    //   9000000 2024-01-02 10:00:00
    //   9000001 2024-01-01 23:00:00
    // というようなことは普通にあり得る（直接連携せず、手動連携のみの店舗は特にずれる）。
    
    /** @var BatchLogger $logger */
    $logger = $this->getLogger();
    /** @var DbCommonUtil $commonUtil */
    $commonUtil = $this->getContainer()->get('misc.util.db_common');
    
    $minVoucherNumber = '';
    $maxVoucherNumber = '';
    if ($condition['salesDateFrom']) {
      // 極端に伝票番号がずれることもないはずなので、仮に30日ぶんの範囲で伝票番号を絞り込む（でないと指定日以降を全て見てしまう）
      $tmpDateToStr = (new \DateTime($condition['salesDateFrom']))->modify('+30 day')->format('Y-m-d H:i:s');
      $sql = <<<EOD
        SELECT MIN(伝票番号) FROM tb_sales_detail_analyze 
        WHERE 受注日 >= :salesDateFrom AND 受注日 <= :salesDateTo
EOD;
      $stmt = $db->prepare($sql);
      $stmt->bindValue(':salesDateFrom', $condition['salesDateFrom'] . ' 00:00:00', \PDO::PARAM_STR);
      $stmt->bindValue(':salesDateTo', $tmpDateToStr, \PDO::PARAM_STR);
      $stmt->execute();
      $minVoucherNumber = $stmt->fetchColumn(0);
    }
    
    if ($condition['salesDateTo']) {
      // 極端に伝票番号がずれることもないはずなので、仮に30日ぶんの範囲で伝票番号を絞り込む（でないと指定日以前を全て見てしまう）
      $tmpDateFromStr = (new \DateTime($condition['salesDateTo']))->modify('-30 day')->format('Y-m-d H:i:s');
      $sql = <<<EOD
        SELECT MAX(伝票番号) FROM tb_sales_detail_analyze 
        WHERE 受注日 >= :salesDateFrom AND 受注日 <= :salesDateTo
EOD;
      $stmt = $db->prepare($sql);
      $stmt->bindValue(':salesDateFrom', $tmpDateFromStr, \PDO::PARAM_STR);
      $stmt->bindValue(':salesDateTo', $condition['salesDateTo'] . ' 23:59:59', \PDO::PARAM_STR);
      $stmt->execute();
      $maxVoucherNumber = $stmt->fetchColumn(0);
    }
    
    // 本体クエリの検索条件構築
    
    $addWheres = [];
    $addParams = [];
    $addWhereSql = "";
    
    if ($minVoucherNumber) {
      $addWheres[] = "伝票番号 >= :minVoucherNumber";
      $addParams[':minVoucherNumber'] = $minVoucherNumber;
    }
    if ($condition['salesDateFrom']) {
      $addWheres[] = "受注日 >= :salesDateFrom"; // 伝票番号が範囲内でも、受注日が不一致の場合があるので両方条件にする
      $addParams[':salesDateFrom'] = $condition['salesDateFrom'] . ' 00:00:00';
    }
    if ($maxVoucherNumber) {
      $addWheres[] = "伝票番号 <= :maxVoucherNumber";
      $addParams[':maxVoucherNumber'] = $maxVoucherNumber;
    }
    if ($condition['salesDateTo']) {
      $addWheres[] = "受注日 <= :salesDateTo"; // 伝票番号が範囲内でも、受注日が不一致の場合があるので両方条件にする
      $addParams[':salesDateTo'] = $condition['salesDateTo'] . ' 23:59:59';
    }
    
    // お客様名
    if (isset($condition['customerName']) && strlen(trim($condition['customerName']))) {
      $word = '%' . $commonUtil->escapeLikeString(trim($condition['customerName'])) . '%';
      $addWheres[] = "(購入者名 LIKE :customerName OR 送り先名 LIKE :customerName)";
      $addParams[':customerName'] = $word;
    }
    
    // お客様名（スペース除去） -- DBデータのスペースを除去してからマッチングする
    if (isset($condition['customerNameWithoutSpace']) && strlen(trim($condition['customerNameWithoutSpace']))) {
      $word = '%' . $commonUtil->escapeLikeString(trim($condition['customerNameWithoutSpace'])) . '%';
      $addWheres[] = "(REPLACE(購入者名, ' ', '') LIKE :customerNameWithoutSpace OR REPLACE(送り先名, ' ', '') LIKE :customerNameWithoutSpace)";
      $addParams[':customerNameWithoutSpace'] = $word;
    }
    
    // お客様名カナ
    if (isset($condition['customerNameKana']) && strlen(trim($condition['customerNameKana']))) {
      $word = '%' . $commonUtil->escapeLikeString(trim($condition['customerNameKana'])) . '%';
      $addWheres[] = "(購入者カナ LIKE :customerNameKana OR 送り先カナ LIKE :customerNameKana)";
      $addParams[':customerNameKana'] = $word;
    }
    
    // 電話番号
    if (isset($condition['tel']) && strlen(trim($condition['tel']))) {
      $addWheres[] = "(REPLACE(購入者電話番号, '-', '') = :tel OR REPLACE(送り先電話番号, '-', '') = :tel)";
      $addParams[':tel'] = $condition['tel'];
    }
    
    // 郵便番号
    if (isset($condition['postCode']) && strlen(trim($condition['postCode']))) {
      $addWheres[] = "(REPLACE(購入者郵便番号, '-', '') = :postCode OR REPLACE(送り先郵便番号, '-', '') = :postCode)";
      $addParams[':postCode'] = $condition['postCode'];
    }
    
    // 住所
    if (isset($condition['address']) && strlen(trim($condition['address']))) {
      $word = '%' . $commonUtil->escapeLikeString(trim($condition['address'])) . '%';
      $addWheres[] = "(`購入者（住所1+住所2）` LIKE :address OR `送り先（住所1+住所2）` LIKE :address)";
      $addParams[':address'] = $word;
    }
    
    // 購入者メールアドレス
    if (isset($condition['email']) && strlen(trim($condition['email']))) {
      $word = $commonUtil->escapeLikeString(trim($condition['email'])) . '%';
      $addWheres[] = "購入者メールアドレス LIKE :email";
      $addParams[':email'] = $word;
    }
    
    // 伝票番号
    if (isset($condition['voucherNumber']) && strlen(trim($condition['voucherNumber']))) {
      $addWheres[] = "伝票番号 = :voucherNumber";
      $addParams[':voucherNumber'] = $condition['voucherNumber'];
    }
    if ($addWheres) {
      $addWhereSql = sprintf(" AND ( %s ) ", implode(" AND ", $addWheres));
    }
    
    $sql = <<<EOD
      SELECT 
        伝票番号 as voucher_number
        , 受注日 as sales_date
        , 出荷確定日 as shipping_date
        , 受注状態 as sales_status
        , CASE 
            WHEN GROUP_CONCAT(distinct キャンセル区分) <> '0' THEN 'キャンセル'
            WHEN GROUP_CONCAT(distinct 明細行キャンセル) <> '0' THEN '明細'
            ELSE ''
          END as 'cancel_status'
        , 店舗名 as shop_name
        , 購入者名 as customer_name
        , 購入者電話番号 as customer_tel
        , LEFT(`購入者（住所1+住所2）`, 10) as customer_address -- 個人情報保護のため、伝票検索画面では住所は10文字目までしか出さない
        , count(*) as detail_count
      FROM tb_sales_detail
      WHERE 1 = 1 
        {$addWhereSql}
      GROUP BY 伝票番号
      ORDER BY 伝票番号 DESC
      LIMIT :limit
EOD;
    
      $stmt = $db->prepare($sql);
      foreach ($addParams as $k => $v) {
        $stmt->bindValue($k, $v, \PDO::PARAM_STR);
      }
      $stmt->bindValue(":limit", $limit, \PDO::PARAM_INT);
      $stmt->execute();
      return $stmt->fetchAll(\PDO::FETCH_ASSOC);
  }
}
